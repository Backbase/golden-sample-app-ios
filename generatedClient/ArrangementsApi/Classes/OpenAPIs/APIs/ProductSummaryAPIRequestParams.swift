//
// ProductSummaryAPIRequestParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import ClientCommonGen2

public extension ProductSummaryAPI {
    /// This class is used as a container class for request parameters for ProductSummaryAPI.getArrangementsByBusinessFunction API call.
    struct GetArrangementsByBusinessFunctionRequestParams: Equatable {
            /** Provide comma separated contexts for retrieving arrangements */
    public let businessFunction: String
    /** Provide the resource for retrieving arrangements */
    public let resourceName: String
    /** Privilege for the arrangements */
    public let privilege: String
    /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
    public let contentLanguage: String?
    /** Retrieve a list of arrangements with the latest balances */
    public let withLatestBalances: Bool?
    /** Masked/Unmasked card number */
    public let maskIndicator: Bool?
    /** Type of account */
    public let debitAccount: Bool?
    /** Type of account */
    public let creditAccount: Bool?
    /** Privilege for external transfers */
    public let externalTransferAllowed: Bool?
    /** Product Kind Name */
    public let productKindName: String?
    /** A list of legal entities ids to filter by */
    public let legalEntityIds: [String]?
    /** No description available */
    public let sourceId: String?
    /** Indicates whether an arrangement is favorite for a user or not */
    public let favorite: Bool?
    /** Full text search */
    public let searchTerm: String?
    /** Parameter that identifies weather the returned list should be ordered by custom order/grouping */
    public let customOrder: Bool?
    /** Parameter that sets favorite arrangements on top when true */
    public let favoriteFirst: Bool?
    /** A list of subscription identifiers */
    public let subscriptions: [String]?
    /** Parameter that filters out arrangements where parentId is not null */
    public let hasParent: Bool?
    /** Page Number. Skip over pages of elements by specifying a start value for the query */
    public let from: Int?
    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */
    public let size: Int?
    /** Record UUID. As an alternative for specifying &#39;from&#39; this allows to point to the record to start the selection from.  */
    public let cursor: String?
    /** Order by field */
    public let orderBy: [OrderByField]?
    /** Direction */
    public let direction: SortDirection?
    /** Product kind names to be ignored */
    public let ignoredProductKindNames: [String]?
    /** Product kind names to be considered in the query */
    public let productKindNames: [String]?

    internal init(businessFunction: String, resourceName: String, privilege: String, contentLanguage: String?, withLatestBalances: Bool?, maskIndicator: Bool?, debitAccount: Bool?, creditAccount: Bool?, externalTransferAllowed: Bool?, productKindName: String?, legalEntityIds: [String]?, sourceId: String?, favorite: Bool?, searchTerm: String?, customOrder: Bool?, favoriteFirst: Bool?, subscriptions: [String]?, hasParent: Bool?, from: Int?, size: Int?, cursor: String?, orderBy: [OrderByField]?, direction: SortDirection?, ignoredProductKindNames: [String]?, productKindNames: [String]?) {
        self.businessFunction = businessFunction
        self.resourceName = resourceName
        self.privilege = privilege
        self.contentLanguage = contentLanguage
        self.withLatestBalances = withLatestBalances
        self.maskIndicator = maskIndicator
        self.debitAccount = debitAccount
        self.creditAccount = creditAccount
        self.externalTransferAllowed = externalTransferAllowed
        self.productKindName = productKindName
        self.legalEntityIds = legalEntityIds
        self.sourceId = sourceId
        self.favorite = favorite
        self.searchTerm = searchTerm
        self.customOrder = customOrder
        self.favoriteFirst = favoriteFirst
        self.subscriptions = subscriptions
        self.hasParent = hasParent
        self.from = from
        self.size = size
        self.cursor = cursor
        self.orderBy = orderBy
        self.direction = direction
        self.ignoredProductKindNames = ignoredProductKindNames
        self.productKindNames = productKindNames
    }
    /// Builder class for GetArrangementsByBusinessFunctionRequestParams DTO.
    public final class Builder: Equatable {
        /** Provide comma separated contexts for retrieving arrangements */
        public let businessFunction: String
        /** Provide the resource for retrieving arrangements */
        public let resourceName: String
        /** Privilege for the arrangements */
        public let privilege: String
        /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
        public private(set) var contentLanguage: String?
        /** Retrieve a list of arrangements with the latest balances */
        public private(set) var withLatestBalances: Bool? = true
        /** Masked/Unmasked card number */
        public private(set) var maskIndicator: Bool?
        /** Type of account */
        public private(set) var debitAccount: Bool?
        /** Type of account */
        public private(set) var creditAccount: Bool?
        /** Privilege for external transfers */
        public private(set) var externalTransferAllowed: Bool?
        /** Product Kind Name */
        public private(set) var productKindName: String?
        /** A list of legal entities ids to filter by */
        public private(set) var legalEntityIds: [String]?
        /** No description available */
        public private(set) var sourceId: String?
        /** Indicates whether an arrangement is favorite for a user or not */
        public private(set) var favorite: Bool?
        /** Full text search */
        public private(set) var searchTerm: String?
        /** Parameter that identifies weather the returned list should be ordered by custom order/grouping */
        public private(set) var customOrder: Bool?
        /** Parameter that sets favorite arrangements on top when true */
        public private(set) var favoriteFirst: Bool? = false
        /** A list of subscription identifiers */
        public private(set) var subscriptions: [String]?
        /** Parameter that filters out arrangements where parentId is not null */
        public private(set) var hasParent: Bool?
        /** Page Number. Skip over pages of elements by specifying a start value for the query */
        public private(set) var from: Int? = 0
        /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */
        public private(set) var size: Int? = 10
        /** Record UUID. As an alternative for specifying &#39;from&#39; this allows to point to the record to start the selection from.  */
        public private(set) var cursor: String? = ""
        /** Order by field */
        public private(set) var orderBy: [OrderByField]?
        /** Direction */
        public private(set) var direction: SortDirection?
        /** Product kind names to be ignored */
        public private(set) var ignoredProductKindNames: [String]?
        /** Product kind names to be considered in the query */
        public private(set) var productKindNames: [String]?

        public init(businessFunction: String, resourceName: String, privilege: String) {
            self.businessFunction = businessFunction
            self.resourceName = resourceName
            self.privilege = privilege
        }

        /// Setter method for contentLanguage property.
        public func set(contentLanguage: String?) -> Self {
            self.contentLanguage = contentLanguage
            return self
        }
        /// Setter method for withLatestBalances property.
        public func set(withLatestBalances: Bool?) -> Self {
            self.withLatestBalances = withLatestBalances
            return self
        }
        /// Setter method for maskIndicator property.
        public func set(maskIndicator: Bool?) -> Self {
            self.maskIndicator = maskIndicator
            return self
        }
        /// Setter method for debitAccount property.
        public func set(debitAccount: Bool?) -> Self {
            self.debitAccount = debitAccount
            return self
        }
        /// Setter method for creditAccount property.
        public func set(creditAccount: Bool?) -> Self {
            self.creditAccount = creditAccount
            return self
        }
        /// Setter method for externalTransferAllowed property.
        public func set(externalTransferAllowed: Bool?) -> Self {
            self.externalTransferAllowed = externalTransferAllowed
            return self
        }
        /// Setter method for productKindName property.
        public func set(productKindName: String?) -> Self {
            self.productKindName = productKindName
            return self
        }
        /// Setter method for legalEntityIds property.
        public func set(legalEntityIds: [String]?) -> Self {
            self.legalEntityIds = legalEntityIds
            return self
        }
        /// Setter method for sourceId property.
        public func set(sourceId: String?) -> Self {
            self.sourceId = sourceId
            return self
        }
        /// Setter method for favorite property.
        public func set(favorite: Bool?) -> Self {
            self.favorite = favorite
            return self
        }
        /// Setter method for searchTerm property.
        public func set(searchTerm: String?) -> Self {
            self.searchTerm = searchTerm
            return self
        }
        /// Setter method for customOrder property.
        public func set(customOrder: Bool?) -> Self {
            self.customOrder = customOrder
            return self
        }
        /// Setter method for favoriteFirst property.
        public func set(favoriteFirst: Bool?) -> Self {
            self.favoriteFirst = favoriteFirst
            return self
        }
        /// Setter method for subscriptions property.
        public func set(subscriptions: [String]?) -> Self {
            self.subscriptions = subscriptions
            return self
        }
        /// Setter method for hasParent property.
        public func set(hasParent: Bool?) -> Self {
            self.hasParent = hasParent
            return self
        }
        /// Setter method for from property.
        public func set(from: Int?) -> Self {
            self.from = from
            return self
        }
        /// Setter method for size property.
        public func set(size: Int?) -> Self {
            self.size = size
            return self
        }
        /// Setter method for cursor property.
        public func set(cursor: String?) -> Self {
            self.cursor = cursor
            return self
        }
        /// Setter method for orderBy property.
        public func set(orderBy: [OrderByField]?) -> Self {
            self.orderBy = orderBy
            return self
        }
        /// Setter method for direction property.
        public func set(direction: SortDirection?) -> Self {
            self.direction = direction
            return self
        }
        /// Setter method for ignoredProductKindNames property.
        public func set(ignoredProductKindNames: [String]?) -> Self {
            self.ignoredProductKindNames = ignoredProductKindNames
            return self
        }
        /// Setter method for productKindNames property.
        public func set(productKindNames: [String]?) -> Self {
            self.productKindNames = productKindNames
            return self
        }

        /// Builder initializer method for GetArrangementsByBusinessFunctionRequestParams DTO.
        public func build() -> GetArrangementsByBusinessFunctionRequestParams {
            return GetArrangementsByBusinessFunctionRequestParams(businessFunction: businessFunction, 
            		resourceName: resourceName, 
            		privilege: privilege, 
            		contentLanguage: contentLanguage, 
            		withLatestBalances: withLatestBalances, 
            		maskIndicator: maskIndicator, 
            		debitAccount: debitAccount, 
            		creditAccount: creditAccount, 
            		externalTransferAllowed: externalTransferAllowed, 
            		productKindName: productKindName, 
            		legalEntityIds: legalEntityIds, 
            		sourceId: sourceId, 
            		favorite: favorite, 
            		searchTerm: searchTerm, 
            		customOrder: customOrder, 
            		favoriteFirst: favoriteFirst, 
            		subscriptions: subscriptions, 
            		hasParent: hasParent, 
            		from: from, 
            		size: size, 
            		cursor: cursor, 
            		orderBy: orderBy, 
            		direction: direction, 
            		ignoredProductKindNames: ignoredProductKindNames, 
            		productKindNames: productKindNames)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
        	return lhs.businessFunction == rhs.businessFunction &&
        	lhs.resourceName == rhs.resourceName &&
        	lhs.privilege == rhs.privilege &&
        	lhs.contentLanguage == rhs.contentLanguage &&
        	lhs.withLatestBalances == rhs.withLatestBalances &&
        	lhs.maskIndicator == rhs.maskIndicator &&
        	lhs.debitAccount == rhs.debitAccount &&
        	lhs.creditAccount == rhs.creditAccount &&
        	lhs.externalTransferAllowed == rhs.externalTransferAllowed &&
        	lhs.productKindName == rhs.productKindName &&
        	lhs.legalEntityIds?.description == rhs.legalEntityIds?.description &&
        	lhs.sourceId == rhs.sourceId &&
        	lhs.favorite == rhs.favorite &&
        	lhs.searchTerm == rhs.searchTerm &&
        	lhs.customOrder == rhs.customOrder &&
        	lhs.favoriteFirst == rhs.favoriteFirst &&
        	lhs.subscriptions?.description == rhs.subscriptions?.description &&
        	lhs.hasParent == rhs.hasParent &&
        	lhs.from == rhs.from &&
        	lhs.size == rhs.size &&
        	lhs.cursor == rhs.cursor &&
        	lhs.orderBy?.description == rhs.orderBy?.description &&
        	lhs.direction == rhs.direction &&
        	lhs.ignoredProductKindNames?.description == rhs.ignoredProductKindNames?.description &&
        	lhs.productKindNames?.description == rhs.productKindNames?.description
    	}
    }

public static func ==(lhs: Self, rhs: Self) -> Bool {
    return lhs.businessFunction == rhs.businessFunction &&
    lhs.resourceName == rhs.resourceName &&
    lhs.privilege == rhs.privilege &&
    lhs.contentLanguage == rhs.contentLanguage &&
    lhs.withLatestBalances == rhs.withLatestBalances &&
    lhs.maskIndicator == rhs.maskIndicator &&
    lhs.debitAccount == rhs.debitAccount &&
    lhs.creditAccount == rhs.creditAccount &&
    lhs.externalTransferAllowed == rhs.externalTransferAllowed &&
    lhs.productKindName == rhs.productKindName &&
    lhs.legalEntityIds?.description == rhs.legalEntityIds?.description &&
    lhs.sourceId == rhs.sourceId &&
    lhs.favorite == rhs.favorite &&
    lhs.searchTerm == rhs.searchTerm &&
    lhs.customOrder == rhs.customOrder &&
    lhs.favoriteFirst == rhs.favoriteFirst &&
    lhs.subscriptions?.description == rhs.subscriptions?.description &&
    lhs.hasParent == rhs.hasParent &&
    lhs.from == rhs.from &&
    lhs.size == rhs.size &&
    lhs.cursor == rhs.cursor &&
    lhs.orderBy?.description == rhs.orderBy?.description &&
    lhs.direction == rhs.direction &&
    lhs.ignoredProductKindNames?.description == rhs.ignoredProductKindNames?.description &&
    lhs.productKindNames?.description == rhs.productKindNames?.description
}
    }
    /// This class is used as a container class for request parameters for ProductSummaryAPI.getProductSummary API call.
    struct GetProductSummaryRequestParams: Equatable {
            /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
    public let contentLanguage: String?
    /** Type of account */
    public let debitAccount: Bool?
    /** Type of account */
    public let creditAccount: Bool?
    /** Masked/Unmasked card number */
    public let maskIndicator: Bool?
    /** Product kind names to be ignored */
    public let ignoredProductKindNames: [String]?
    /** Select arrangements current user has permission to perform this business function. */
    public let businessFunction: String?
    /** In combination with businessFunction parameter, defines the resource. */
    public let resourceName: String?
    /** In combination with businessFunction parameter, defines the privilege. */
    public let privilege: String?

    internal init(contentLanguage: String?, debitAccount: Bool?, creditAccount: Bool?, maskIndicator: Bool?, ignoredProductKindNames: [String]?, businessFunction: String?, resourceName: String?, privilege: String?) {
        self.contentLanguage = contentLanguage
        self.debitAccount = debitAccount
        self.creditAccount = creditAccount
        self.maskIndicator = maskIndicator
        self.ignoredProductKindNames = ignoredProductKindNames
        self.businessFunction = businessFunction
        self.resourceName = resourceName
        self.privilege = privilege
    }
    /// Builder class for GetProductSummaryRequestParams DTO.
    public final class Builder: Equatable {
        /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
        public private(set) var contentLanguage: String?
        /** Type of account */
        public private(set) var debitAccount: Bool?
        /** Type of account */
        public private(set) var creditAccount: Bool?
        /** Masked/Unmasked card number */
        public private(set) var maskIndicator: Bool?
        /** Product kind names to be ignored */
        public private(set) var ignoredProductKindNames: [String]?
        /** Select arrangements current user has permission to perform this business function. */
        public private(set) var businessFunction: String?
        /** In combination with businessFunction parameter, defines the resource. */
        public private(set) var resourceName: String?
        /** In combination with businessFunction parameter, defines the privilege. */
        public private(set) var privilege: String?

        public init() {
        }

        /// Setter method for contentLanguage property.
        public func set(contentLanguage: String?) -> Self {
            self.contentLanguage = contentLanguage
            return self
        }
        /// Setter method for debitAccount property.
        public func set(debitAccount: Bool?) -> Self {
            self.debitAccount = debitAccount
            return self
        }
        /// Setter method for creditAccount property.
        public func set(creditAccount: Bool?) -> Self {
            self.creditAccount = creditAccount
            return self
        }
        /// Setter method for maskIndicator property.
        public func set(maskIndicator: Bool?) -> Self {
            self.maskIndicator = maskIndicator
            return self
        }
        /// Setter method for ignoredProductKindNames property.
        public func set(ignoredProductKindNames: [String]?) -> Self {
            self.ignoredProductKindNames = ignoredProductKindNames
            return self
        }
        /// Setter method for businessFunction property.
        public func set(businessFunction: String?) -> Self {
            self.businessFunction = businessFunction
            return self
        }
        /// Setter method for resourceName property.
        public func set(resourceName: String?) -> Self {
            self.resourceName = resourceName
            return self
        }
        /// Setter method for privilege property.
        public func set(privilege: String?) -> Self {
            self.privilege = privilege
            return self
        }

        /// Builder initializer method for GetProductSummaryRequestParams DTO.
        public func build() -> GetProductSummaryRequestParams {
            return GetProductSummaryRequestParams(contentLanguage: contentLanguage, 
            		debitAccount: debitAccount, 
            		creditAccount: creditAccount, 
            		maskIndicator: maskIndicator, 
            		ignoredProductKindNames: ignoredProductKindNames, 
            		businessFunction: businessFunction, 
            		resourceName: resourceName, 
            		privilege: privilege)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
        	return lhs.contentLanguage == rhs.contentLanguage &&
        	lhs.debitAccount == rhs.debitAccount &&
        	lhs.creditAccount == rhs.creditAccount &&
        	lhs.maskIndicator == rhs.maskIndicator &&
        	lhs.ignoredProductKindNames?.description == rhs.ignoredProductKindNames?.description &&
        	lhs.businessFunction == rhs.businessFunction &&
        	lhs.resourceName == rhs.resourceName &&
        	lhs.privilege == rhs.privilege
    	}
    }

public static func ==(lhs: Self, rhs: Self) -> Bool {
    return lhs.contentLanguage == rhs.contentLanguage &&
    lhs.debitAccount == rhs.debitAccount &&
    lhs.creditAccount == rhs.creditAccount &&
    lhs.maskIndicator == rhs.maskIndicator &&
    lhs.ignoredProductKindNames?.description == rhs.ignoredProductKindNames?.description &&
    lhs.businessFunction == rhs.businessFunction &&
    lhs.resourceName == rhs.resourceName &&
    lhs.privilege == rhs.privilege
}
    }
    /// This class is used as a container class for request parameters for ProductSummaryAPI.getProductSummaryEntitlementsByLegalEntityId API call.
    struct GetProductSummaryEntitlementsByLegalEntityIdRequestParams: Equatable {
            /** legal entity ids */
    public let legalEntityIds: [String]
    /** arrangement ids */
    public let arrangementIds: [String]?
    /** No description available */
    public let ignoredArrangementIds: [String]?
    /** Full text search */
    public let searchTerm: String?
    /** Page Number. Skip over pages of elements by specifying a start value for the query */
    public let from: Int?
    /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */
    public let size: Int?
    /** Record UUID. As an alternative for specifying &#39;from&#39; this allows to point to the record to start the selection from.  */
    public let cursor: String?
    /** Order by field */
    public let orderBy: [OrderByField]?
    /** Direction */
    public let direction: SortDirection?

    internal init(legalEntityIds: [String], arrangementIds: [String]?, ignoredArrangementIds: [String]?, searchTerm: String?, from: Int?, size: Int?, cursor: String?, orderBy: [OrderByField]?, direction: SortDirection?) {
        self.legalEntityIds = legalEntityIds
        self.arrangementIds = arrangementIds
        self.ignoredArrangementIds = ignoredArrangementIds
        self.searchTerm = searchTerm
        self.from = from
        self.size = size
        self.cursor = cursor
        self.orderBy = orderBy
        self.direction = direction
    }
    /// Builder class for GetProductSummaryEntitlementsByLegalEntityIdRequestParams DTO.
    public final class Builder: Equatable {
        /** legal entity ids */
        public let legalEntityIds: [String]
        /** arrangement ids */
        public private(set) var arrangementIds: [String]?
        /** No description available */
        public private(set) var ignoredArrangementIds: [String]?
        /** Full text search */
        public private(set) var searchTerm: String?
        /** Page Number. Skip over pages of elements by specifying a start value for the query */
        public private(set) var from: Int? = 0
        /** Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  */
        public private(set) var size: Int? = 10
        /** Record UUID. As an alternative for specifying &#39;from&#39; this allows to point to the record to start the selection from.  */
        public private(set) var cursor: String? = ""
        /** Order by field */
        public private(set) var orderBy: [OrderByField]?
        /** Direction */
        public private(set) var direction: SortDirection?

        public init(legalEntityIds: [String]) {
            self.legalEntityIds = legalEntityIds
        }

        /// Setter method for arrangementIds property.
        public func set(arrangementIds: [String]?) -> Self {
            self.arrangementIds = arrangementIds
            return self
        }
        /// Setter method for ignoredArrangementIds property.
        public func set(ignoredArrangementIds: [String]?) -> Self {
            self.ignoredArrangementIds = ignoredArrangementIds
            return self
        }
        /// Setter method for searchTerm property.
        public func set(searchTerm: String?) -> Self {
            self.searchTerm = searchTerm
            return self
        }
        /// Setter method for from property.
        public func set(from: Int?) -> Self {
            self.from = from
            return self
        }
        /// Setter method for size property.
        public func set(size: Int?) -> Self {
            self.size = size
            return self
        }
        /// Setter method for cursor property.
        public func set(cursor: String?) -> Self {
            self.cursor = cursor
            return self
        }
        /// Setter method for orderBy property.
        public func set(orderBy: [OrderByField]?) -> Self {
            self.orderBy = orderBy
            return self
        }
        /// Setter method for direction property.
        public func set(direction: SortDirection?) -> Self {
            self.direction = direction
            return self
        }

        /// Builder initializer method for GetProductSummaryEntitlementsByLegalEntityIdRequestParams DTO.
        public func build() -> GetProductSummaryEntitlementsByLegalEntityIdRequestParams {
            return GetProductSummaryEntitlementsByLegalEntityIdRequestParams(legalEntityIds: legalEntityIds, 
            		arrangementIds: arrangementIds, 
            		ignoredArrangementIds: ignoredArrangementIds, 
            		searchTerm: searchTerm, 
            		from: from, 
            		size: size, 
            		cursor: cursor, 
            		orderBy: orderBy, 
            		direction: direction)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
        	return lhs.legalEntityIds.description == rhs.legalEntityIds.description &&
        	lhs.arrangementIds?.description == rhs.arrangementIds?.description &&
        	lhs.ignoredArrangementIds?.description == rhs.ignoredArrangementIds?.description &&
        	lhs.searchTerm == rhs.searchTerm &&
        	lhs.from == rhs.from &&
        	lhs.size == rhs.size &&
        	lhs.cursor == rhs.cursor &&
        	lhs.orderBy?.description == rhs.orderBy?.description &&
        	lhs.direction == rhs.direction
    	}
    }

public static func ==(lhs: Self, rhs: Self) -> Bool {
    return lhs.legalEntityIds.description == rhs.legalEntityIds.description &&
    lhs.arrangementIds?.description == rhs.arrangementIds?.description &&
    lhs.ignoredArrangementIds?.description == rhs.ignoredArrangementIds?.description &&
    lhs.searchTerm == rhs.searchTerm &&
    lhs.from == rhs.from &&
    lhs.size == rhs.size &&
    lhs.cursor == rhs.cursor &&
    lhs.orderBy?.description == rhs.orderBy?.description &&
    lhs.direction == rhs.direction
}
    }
    /// This class is used as a container class for request parameters for ProductSummaryAPI.postFilterProductSummaries API call.
    struct PostFilterProductSummariesRequestParams: Equatable {
            public let productSummaryFilterParams: ProductSummaryFilterParams

    internal init(productSummaryFilterParams: ProductSummaryFilterParams) {
        self.productSummaryFilterParams = productSummaryFilterParams
    }
    /// Builder class for PostFilterProductSummariesRequestParams DTO.
    public final class Builder: Equatable {
        public let productSummaryFilterParams: ProductSummaryFilterParams

        public init(productSummaryFilterParams: ProductSummaryFilterParams) {
            self.productSummaryFilterParams = productSummaryFilterParams
        }


        /// Builder initializer method for PostFilterProductSummariesRequestParams DTO.
        public func build() -> PostFilterProductSummariesRequestParams {
            return PostFilterProductSummariesRequestParams(productSummaryFilterParams: productSummaryFilterParams)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
        	return lhs.productSummaryFilterParams == rhs.productSummaryFilterParams
    	}
    }

public static func ==(lhs: Self, rhs: Self) -> Bool {
    return lhs.productSummaryFilterParams == rhs.productSummaryFilterParams
}
    }
}
