//
// ArrangementViewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Backbase
import ClientCommonGen2

/// ArrangementViewsAPI protocol defines a blueprint of methods, properties, and other requirements for ArrangementViewsAPI functionality. 
public protocol ArrangementViewsAPIProtocol {

    /**
     - GET /client-api/v2/arrangement-views/{viewName}
     - Provide a named view of the arrangement.
     - parameter viewName: (path) the name of the view that should be returned 
     - parameter filter: (query) Encoded filtering expression that is applied to the arrangements collection.  The filter is applied to all groups that are defined in the view. The response contains all arrangements retained in each group. The arrangements are returned as a single group irrespective of the number of arrangements in the result. Only the first page is returned, as defined by the default group limit configuration, but the consumers of the endpoint can use pagination which is activated only when filtering is enabled.  The filter is a logical combination of simple expressions that verifies the attributes of the arrangements.  A simple expression is a relational predicate that has the form:  &#x60;&#x60;&#x60; &lt;PATH&gt; &lt;OP&gt; &lt;CONSTANTS&gt; &#x60;&#x60;&#x60;  ... where:  * **PATH**: the attribute path, e.g. &#x60;productKind.kindUri&#x60; * **OP**: relational operator as described below * **CONSTANT**: one ore more constants values, depending on the operator  The operator can be one of the following:  * **&#x60;&#x3D;&#x60;**: to test for equality or whether the value is a proper subset of the given array * **&#x60;!&#x60;**: the oposite of &#x60;&#x3D;&#x60; * **&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&gt;&#x60;**: to test for comparison  For a complete description of the expression syntax, check the community documentation.  **NOTE**: this parameter must be URL encoded.  (optional)
     - parameter limit: (query) Limit the number of elements on the response. Default value will be taken from configuration.  **NOTE**: pagination is active only with filtering.  (optional)
     - parameter cursor: (query) Pointer to the first record of the page that is going to be returned by the endpoint.  The pointer must be taken from the cursor of a previous call of the endpoint.  The endpoint returns a status of 403 (forbidden) if the cursor is invalid or if there is no arrangement that corresponds to the given cursor, with a key &#x60;account.api.arrangement.notEntitledToSee&#x60;.  **NOTE**: pagination is active only with filtering.  (optional)
     - parameter sort: (query) Mapped attribute names by which arrangements will be sorted. Prefix the name with minus (-) sign to sort in descending order.  (optional)
     - returns: Call<ArrangementViewResponse> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementViewsAPI.GetArrangementViewRequestParams class.")
    func getArrangementViewCall(viewName: String, filter: String?, limit: Int?, cursor: String?, sort: [String]?) throws -> Call<ArrangementViewResponse>
    
    /**
     - GET /client-api/v2/arrangement-views/{viewName}
     - Provide a named view of the arrangement.

     - parameter params: The request parameters of this request.
     - returns: Call<ArrangementViewResponse> 
     */
    func getArrangementViewCall(params: ArrangementViewsAPI.GetArrangementViewRequestParams) throws -> Call<ArrangementViewResponse>

    /**
     - GET /client-api/v2/arrangement-views/{viewName}/groups/{groupName}
     - Provide a named group containing arrangements.
     - parameter viewName: (path) the name of the view that should be returned 
     - parameter groupName: (path) the name of the group that should be returned 
     - parameter filter: (query) Encoded filtering expression that is applied to the arrangements collection.  The filter is applied to all groups that are defined in the view. The response contains all arrangements retained in each group. The arrangements are returned as a single group irrespective of the number of arrangements in the result. Only the first page is returned, as defined by the default group limit configuration.  The filter is a logical combination of simple expressions that verifies the attributes of the arrangements.  A simple expression is a relational predicate that has the form:  &#x60;&#x60;&#x60; &lt;PATH&gt; &lt;OP&gt; &lt;CONSTANTS&gt; &#x60;&#x60;&#x60;  ... where:  * **PATH**: the attribute path, e.g. &#x60;productKind.kindUri&#x60; * **OP**: relational operator as described below * **CONSTANT**: one or more constants values, depending on the operator  The operator can be one of the following:  * **&#x60;&#x3D;&#x60;**: to test for equality or whether the value is a proper subset of the given array * **&#x60;!&#x60;**: the oposite of &#x60;&#x3D;&#x60; * **&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&gt;&#x60;**: to test for comparison  For a complete description of the expression syntax, check the community documentation.  **NOTE**: this parameter must be URL encoded.  (optional)
     - parameter limit: (query) Limit the number of elements on the response. Default value will be taken from configuration. (optional)
     - parameter cursor: (query) Pointer to the first record of the page that is going to be returned by the endpoint.  The pointer must be taken from the cursor of a previous call of the endpoint.  The endpoint returns a status of 403 (forbidden) if the cursor is invalid or if there is no arrangement that corresponds to the given cursor, with a key &#x60;account.api.arrangement.notEntitledToSee&#x60;.  (optional)
     - parameter sort: (query) Mapped attribute names by which arrangements will be sorted. Prefix the name with minus (-) sign to sort in descending order.  (optional)
     - returns: Call<ArrangementGroupResponse> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementViewsAPI.GetArrangementViewGroupRequestParams class.")
    func getArrangementViewGroupCall(viewName: String, groupName: String, filter: String?, limit: Int?, cursor: String?, sort: [String]?) throws -> Call<ArrangementGroupResponse>
    
    /**
     - GET /client-api/v2/arrangement-views/{viewName}/groups/{groupName}
     - Provide a named group containing arrangements.

     - parameter params: The request parameters of this request.
     - returns: Call<ArrangementGroupResponse> 
     */
    func getArrangementViewGroupCall(params: ArrangementViewsAPI.GetArrangementViewGroupRequestParams) throws -> Call<ArrangementGroupResponse>
}


public class ArrangementViewsAPI: NSObject, DBSClient, ArrangementViewsAPIProtocol {
    public var dataProvider: DBSDataProvider?
    public var baseURL: URL

    public override init() {
        self.baseURL = URL(fileURLWithPath: "")
    }

    required public init(dataProvider: DBSDataProvider, baseURL: URL) {
        self.dataProvider = dataProvider
        self.baseURL = baseURL
    }
    /**
     - GET /client-api/v2/arrangement-views/{viewName}
     - Provide a named view of the arrangement.
     - parameter viewName: (path) the name of the view that should be returned 
     - parameter filter: (query) Encoded filtering expression that is applied to the arrangements collection.  The filter is applied to all groups that are defined in the view. The response contains all arrangements retained in each group. The arrangements are returned as a single group irrespective of the number of arrangements in the result. Only the first page is returned, as defined by the default group limit configuration, but the consumers of the endpoint can use pagination which is activated only when filtering is enabled.  The filter is a logical combination of simple expressions that verifies the attributes of the arrangements.  A simple expression is a relational predicate that has the form:  &#x60;&#x60;&#x60; &lt;PATH&gt; &lt;OP&gt; &lt;CONSTANTS&gt; &#x60;&#x60;&#x60;  ... where:  * **PATH**: the attribute path, e.g. &#x60;productKind.kindUri&#x60; * **OP**: relational operator as described below * **CONSTANT**: one ore more constants values, depending on the operator  The operator can be one of the following:  * **&#x60;&#x3D;&#x60;**: to test for equality or whether the value is a proper subset of the given array * **&#x60;!&#x60;**: the oposite of &#x60;&#x3D;&#x60; * **&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&gt;&#x60;**: to test for comparison  For a complete description of the expression syntax, check the community documentation.  **NOTE**: this parameter must be URL encoded.  (optional)
     - parameter limit: (query) Limit the number of elements on the response. Default value will be taken from configuration.  **NOTE**: pagination is active only with filtering.  (optional)
     - parameter cursor: (query) Pointer to the first record of the page that is going to be returned by the endpoint.  The pointer must be taken from the cursor of a previous call of the endpoint.  The endpoint returns a status of 403 (forbidden) if the cursor is invalid or if there is no arrangement that corresponds to the given cursor, with a key &#x60;account.api.arrangement.notEntitledToSee&#x60;.  **NOTE**: pagination is active only with filtering.  (optional)
     - parameter sort: (query) Mapped attribute names by which arrangements will be sorted. Prefix the name with minus (-) sign to sort in descending order.  (optional)
     - returns: Call<ArrangementViewResponse> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementViewsAPI.GetArrangementViewRequestParams class.")
    open func getArrangementViewCall(viewName: String, filter: String? = nil, limit: Int? = nil, cursor: String? = nil, sort: [String]? = nil) throws -> Call<ArrangementViewResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangement-views/{viewName}"
        let viewNamePathItem = "\(APIHelper.mapValueToPathItem(viewName))"
        path = path.replacingOccurrences(of: "{viewName}", with: viewNamePathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "_filter":filter?.encodeToJSON(), 
            "_limit":limit?.encodeToJSON(), 
            "_cursor":cursor?.encodeToJSON(), 
            "_sort":sort?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<ArrangementViewResponse>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangement-views/{viewName}
     - Provide a named view of the arrangement.

     - parameter params: The request parameters of this request.
     - returns: Call<ArrangementViewResponse> 
     */
    open func getArrangementViewCall(params: ArrangementViewsAPI.GetArrangementViewRequestParams) throws -> Call<ArrangementViewResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangement-views/{viewName}"
        let viewNamePathItem = "\(APIHelper.mapValueToPathItem(params.viewName))"
        path = path.replacingOccurrences(of: "{viewName}", with: viewNamePathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "_filter": params.filter?.encodeToJSON(), 
            "_limit": params.limit?.encodeToJSON(), 
            "_cursor": params.cursor?.encodeToJSON(), 
            "_sort": params.sort?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<ArrangementViewResponse>(dataProvider: dataProvider, request: request)
    }
    /**
     - GET /client-api/v2/arrangement-views/{viewName}/groups/{groupName}
     - Provide a named group containing arrangements.
     - parameter viewName: (path) the name of the view that should be returned 
     - parameter groupName: (path) the name of the group that should be returned 
     - parameter filter: (query) Encoded filtering expression that is applied to the arrangements collection.  The filter is applied to all groups that are defined in the view. The response contains all arrangements retained in each group. The arrangements are returned as a single group irrespective of the number of arrangements in the result. Only the first page is returned, as defined by the default group limit configuration.  The filter is a logical combination of simple expressions that verifies the attributes of the arrangements.  A simple expression is a relational predicate that has the form:  &#x60;&#x60;&#x60; &lt;PATH&gt; &lt;OP&gt; &lt;CONSTANTS&gt; &#x60;&#x60;&#x60;  ... where:  * **PATH**: the attribute path, e.g. &#x60;productKind.kindUri&#x60; * **OP**: relational operator as described below * **CONSTANT**: one or more constants values, depending on the operator  The operator can be one of the following:  * **&#x60;&#x3D;&#x60;**: to test for equality or whether the value is a proper subset of the given array * **&#x60;!&#x60;**: the oposite of &#x60;&#x3D;&#x60; * **&#x60;&lt;&#x60;, &#x60;&lt;&#x3D;&#x60;, &#x60;&gt;&#x3D;&#x60;, &#x60;&gt;&#x60;**: to test for comparison  For a complete description of the expression syntax, check the community documentation.  **NOTE**: this parameter must be URL encoded.  (optional)
     - parameter limit: (query) Limit the number of elements on the response. Default value will be taken from configuration. (optional)
     - parameter cursor: (query) Pointer to the first record of the page that is going to be returned by the endpoint.  The pointer must be taken from the cursor of a previous call of the endpoint.  The endpoint returns a status of 403 (forbidden) if the cursor is invalid or if there is no arrangement that corresponds to the given cursor, with a key &#x60;account.api.arrangement.notEntitledToSee&#x60;.  (optional)
     - parameter sort: (query) Mapped attribute names by which arrangements will be sorted. Prefix the name with minus (-) sign to sort in descending order.  (optional)
     - returns: Call<ArrangementGroupResponse> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementViewsAPI.GetArrangementViewGroupRequestParams class.")
    open func getArrangementViewGroupCall(viewName: String, groupName: String, filter: String? = nil, limit: Int? = nil, cursor: String? = nil, sort: [String]? = nil) throws -> Call<ArrangementGroupResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangement-views/{viewName}/groups/{groupName}"
        let viewNamePathItem = "\(APIHelper.mapValueToPathItem(viewName))"
        path = path.replacingOccurrences(of: "{viewName}", with: viewNamePathItem, options: .literal, range: nil)
        let groupNamePathItem = "\(APIHelper.mapValueToPathItem(groupName))"
        path = path.replacingOccurrences(of: "{groupName}", with: groupNamePathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "_filter":filter?.encodeToJSON(), 
            "_limit":limit?.encodeToJSON(), 
            "_cursor":cursor?.encodeToJSON(), 
            "_sort":sort?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<ArrangementGroupResponse>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangement-views/{viewName}/groups/{groupName}
     - Provide a named group containing arrangements.

     - parameter params: The request parameters of this request.
     - returns: Call<ArrangementGroupResponse> 
     */
    open func getArrangementViewGroupCall(params: ArrangementViewsAPI.GetArrangementViewGroupRequestParams) throws -> Call<ArrangementGroupResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangement-views/{viewName}/groups/{groupName}"
        let viewNamePathItem = "\(APIHelper.mapValueToPathItem(params.viewName))"
        path = path.replacingOccurrences(of: "{viewName}", with: viewNamePathItem, options: .literal, range: nil)
        let groupNamePathItem = "\(APIHelper.mapValueToPathItem(params.groupName))"
        path = path.replacingOccurrences(of: "{groupName}", with: groupNamePathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "_filter": params.filter?.encodeToJSON(), 
            "_limit": params.limit?.encodeToJSON(), 
            "_cursor": params.cursor?.encodeToJSON(), 
            "_sort": params.sort?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<ArrangementGroupResponse>(dataProvider: dataProvider, request: request)
    }
}
