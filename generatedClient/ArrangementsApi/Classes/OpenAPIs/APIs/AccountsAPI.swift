//
// AccountsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Backbase
import ClientCommonGen2

/// AccountsAPI protocol defines a blueprint of methods, properties, and other requirements for AccountsAPI functionality. 
public protocol AccountsAPIProtocol {

    /**
     Account Search
     - POST /client-api/v2/accounts/filter
     - Allows for searching of accounts in core bank.
     - responseHeaders: [x-total-count(Int)]
     - parameter filterAccountsRequest: (body)  
     - returns: Call<[FilterAccountsResponse]> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with AccountsAPI.FilterAccountsRequestParams class.")
    func filterAccountsCall(filterAccountsRequest: FilterAccountsRequest) throws -> Call<[FilterAccountsResponse]>
    
    /**
     Account Search
     - POST /client-api/v2/accounts/filter
     - Allows for searching of accounts in core bank.
     - responseHeaders: [x-total-count(Int)]

     - parameter params: The request parameters of this request.
     - returns: Call<[FilterAccountsResponse]> 
     */
    func filterAccountsCall(params: AccountsAPI.FilterAccountsRequestParams) throws -> Call<[FilterAccountsResponse]>

    /**
     - GET /client-api/v2/accounts/balance-history/{arrangementIds}
     - Retrieve balance history per arrangement for given arrangement ids.
     - parameter arrangementIds: (path) comma separated arrangement ids 
     - parameter accept: (header) Media type that is acceptable for the response. (optional)
     - parameter dateFrom: (query) Bottom value of date range (optional)
     - parameter dateTo: (query) Top value of date range (optional)
     - parameter timePeriod: (query) Defined time period for showing graph oscillations (optional)
     - parameter format: (query) Format of the response (optional)
     - returns: Call<AccountBalanceHistory> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with AccountsAPI.GetBalanceHistoryRequestParams class.")
    func getBalanceHistoryCall(arrangementIds: String, accept: String?, dateFrom: Date?, dateTo: Date?, timePeriod: TimePeriod?, format: AccountsAPI.Format_getBalanceHistory?) throws -> Call<AccountBalanceHistory>
    
    /**
     - GET /client-api/v2/accounts/balance-history/{arrangementIds}
     - Retrieve balance history per arrangement for given arrangement ids.

     - parameter params: The request parameters of this request.
     - returns: Call<AccountBalanceHistory> 
     */
    func getBalanceHistoryCall(params: AccountsAPI.GetBalanceHistoryRequestParams) throws -> Call<AccountBalanceHistory>

    /**
     - GET /client-api/v2/accounts/balance-history/arrangement/{arrangementId}
     - Retrieve balance history for single arrangement for given id.
     - parameter arrangementId: (path) Arrangement Id 
     - parameter dateFrom: (query) Bottom value of date range (optional)
     - parameter dateTo: (query) Top value of date range (optional)
     - parameter timePeriod: (query) Defined time period for showing graph oscillations (optional)
     - parameter from: (query) Page Number. Skip over pages of elements by specifying a start value for the query (optional, default to 0)
     - parameter size: (query) Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  (optional, default to 10)
     - parameter cursor: (query) Record UUID. As an alternative for specifying &#39;from&#39; this allows to point to the record to start the selection from.  (optional, default to "")
     - returns: Call<[AccountBalanceHistoryItem]> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with AccountsAPI.GetBalanceHistoryForArrangementRequestParams class.")
    func getBalanceHistoryForArrangementCall(arrangementId: String, dateFrom: Date?, dateTo: Date?, timePeriod: TimePeriod?, from: Int?, size: Int?, cursor: String?) throws -> Call<[AccountBalanceHistoryItem]>
    
    /**
     - GET /client-api/v2/accounts/balance-history/arrangement/{arrangementId}
     - Retrieve balance history for single arrangement for given id.

     - parameter params: The request parameters of this request.
     - returns: Call<[AccountBalanceHistoryItem]> 
     */
    func getBalanceHistoryForArrangementCall(params: AccountsAPI.GetBalanceHistoryForArrangementRequestParams) throws -> Call<[AccountBalanceHistoryItem]>
}


public class AccountsAPI: NSObject, DBSClient, AccountsAPIProtocol {
    public var dataProvider: DBSDataProvider?
    public var baseURL: URL

    public override init() {
        self.baseURL = URL(fileURLWithPath: "")
    }

    required public init(dataProvider: DBSDataProvider, baseURL: URL) {
        self.dataProvider = dataProvider
        self.baseURL = baseURL
    }
    /**
     Account Search
     - POST /client-api/v2/accounts/filter
     - Allows for searching of accounts in core bank.
     - responseHeaders: [x-total-count(Int)]
     - parameter filterAccountsRequest: (body)  
     - returns: Call<[FilterAccountsResponse]> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with AccountsAPI.FilterAccountsRequestParams class.")
    open func filterAccountsCall(filterAccountsRequest: FilterAccountsRequest) throws -> Call<[FilterAccountsResponse]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/accounts/filter"
        
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filterAccountsRequest)

        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "POST",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .json)
        return Call<[FilterAccountsResponse]>(dataProvider: dataProvider, request: request)
    }

    /**
     Account Search
     - POST /client-api/v2/accounts/filter
     - Allows for searching of accounts in core bank.
     - responseHeaders: [x-total-count(Int)]

     - parameter params: The request parameters of this request.
     - returns: Call<[FilterAccountsResponse]> 
     */
    open func filterAccountsCall(params: AccountsAPI.FilterAccountsRequestParams) throws -> Call<[FilterAccountsResponse]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/accounts/filter"
        
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: params.filterAccountsRequest)

        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "POST",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .json)
        return Call<[FilterAccountsResponse]>(dataProvider: dataProvider, request: request)
    }
    /**
     * enum for parameter format
     */
    @available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the AccountsAPI.GetBalanceHistoryRequestParams class.")
    public enum Format_getBalanceHistory: String, CaseIterable {
        case json = "json"
        case csv = "csv"
    }

    /**
     - GET /client-api/v2/accounts/balance-history/{arrangementIds}
     - Retrieve balance history per arrangement for given arrangement ids.
     - parameter arrangementIds: (path) comma separated arrangement ids 
     - parameter accept: (header) Media type that is acceptable for the response. (optional)
     - parameter dateFrom: (query) Bottom value of date range (optional)
     - parameter dateTo: (query) Top value of date range (optional)
     - parameter timePeriod: (query) Defined time period for showing graph oscillations (optional)
     - parameter format: (query) Format of the response (optional)
     - returns: Call<AccountBalanceHistory> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with AccountsAPI.GetBalanceHistoryRequestParams class.")
    open func getBalanceHistoryCall(arrangementIds: String, accept: String? = nil, dateFrom: Date? = nil, dateTo: Date? = nil, timePeriod: TimePeriod? = nil, format: Format_getBalanceHistory? = nil) throws -> Call<AccountBalanceHistory> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/accounts/balance-history/{arrangementIds}"
        let arrangementIdsPathItem = "\(APIHelper.mapValueToPathItem(arrangementIds))"
        path = path.replacingOccurrences(of: "{arrangementIds}", with: arrangementIdsPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "dateFrom":dateFrom?.encodeToJSONDateTime(), 
            "dateTo":dateTo?.encodeToJSONDateTime(), 
            "timePeriod":timePeriod?.encodeToJSON(), 
            "format":format?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        let nillableHeaders: [String: Any?] = [
            "Accept":accept?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none,
                                                                            headers: headerParameters)
        return Call<AccountBalanceHistory>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/accounts/balance-history/{arrangementIds}
     - Retrieve balance history per arrangement for given arrangement ids.

     - parameter params: The request parameters of this request.
     - returns: Call<AccountBalanceHistory> 
     */
    open func getBalanceHistoryCall(params: AccountsAPI.GetBalanceHistoryRequestParams) throws -> Call<AccountBalanceHistory> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/accounts/balance-history/{arrangementIds}"
        let arrangementIdsPathItem = "\(APIHelper.mapValueToPathItem(params.arrangementIds))"
        path = path.replacingOccurrences(of: "{arrangementIds}", with: arrangementIdsPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "dateFrom": params.dateFrom?.encodeToJSONDateTime(), 
            "dateTo": params.dateTo?.encodeToJSONDateTime(), 
            "timePeriod": params.timePeriod?.encodeToJSON(), 
            "format": params.format?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        let nillableHeaders: [String: Any?] = [
            "Accept": params.accept?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none,
                                                                            headers: headerParameters)
        return Call<AccountBalanceHistory>(dataProvider: dataProvider, request: request)
    }
    /**
     - GET /client-api/v2/accounts/balance-history/arrangement/{arrangementId}
     - Retrieve balance history for single arrangement for given id.
     - parameter arrangementId: (path) Arrangement Id 
     - parameter dateFrom: (query) Bottom value of date range (optional)
     - parameter dateTo: (query) Top value of date range (optional)
     - parameter timePeriod: (query) Defined time period for showing graph oscillations (optional)
     - parameter from: (query) Page Number. Skip over pages of elements by specifying a start value for the query (optional, default to 0)
     - parameter size: (query) Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  (optional, default to 10)
     - parameter cursor: (query) Record UUID. As an alternative for specifying &#39;from&#39; this allows to point to the record to start the selection from.  (optional, default to "")
     - returns: Call<[AccountBalanceHistoryItem]> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with AccountsAPI.GetBalanceHistoryForArrangementRequestParams class.")
    open func getBalanceHistoryForArrangementCall(arrangementId: String, dateFrom: Date? = nil, dateTo: Date? = nil, timePeriod: TimePeriod? = nil, from: Int? = nil, size: Int? = nil, cursor: String? = nil) throws -> Call<[AccountBalanceHistoryItem]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/accounts/balance-history/arrangement/{arrangementId}"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "dateFrom":dateFrom?.encodeToJSONDateTime(), 
            "dateTo":dateTo?.encodeToJSONDateTime(), 
            "timePeriod":timePeriod?.encodeToJSON(), 
            "from":from?.encodeToJSON(), 
            "size":size?.encodeToJSON(), 
            "cursor":cursor?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<[AccountBalanceHistoryItem]>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/accounts/balance-history/arrangement/{arrangementId}
     - Retrieve balance history for single arrangement for given id.

     - parameter params: The request parameters of this request.
     - returns: Call<[AccountBalanceHistoryItem]> 
     */
    open func getBalanceHistoryForArrangementCall(params: AccountsAPI.GetBalanceHistoryForArrangementRequestParams) throws -> Call<[AccountBalanceHistoryItem]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/accounts/balance-history/arrangement/{arrangementId}"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(params.arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "dateFrom": params.dateFrom?.encodeToJSONDateTime(), 
            "dateTo": params.dateTo?.encodeToJSONDateTime(), 
            "timePeriod": params.timePeriod?.encodeToJSON(), 
            "from": params.from?.encodeToJSON(), 
            "size": params.size?.encodeToJSON(), 
            "cursor": params.cursor?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<[AccountBalanceHistoryItem]>(dataProvider: dataProvider, request: request)
    }
}
