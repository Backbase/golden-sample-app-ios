//
// BalancesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Backbase
import ClientCommonGen2

/// BalancesAPI protocol defines a blueprint of methods, properties, and other requirements for BalancesAPI functionality. 
public protocol BalancesAPIProtocol {

    /**
     - GET /client-api/v2/balances/aggregations
     - Retrieves aggregated balances ordered by favorite currencies.
     - parameter contentLanguage: (header) Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. (optional)
     - parameter productKindIds: (query) Filters arrangements by given product kind ids and aggregates their balances. Since product kinds will be static this property is deprecated, please use externalProductKindIds. (optional)
     - parameter externalProductKindIds: (query) Filters arrangements by given external product kind ids and aggregates their balances. (optional)
     - parameter groupedBy: (query) Groups arrangements by id of given parameter and aggregates their balances. If it is empty, then it aggregates balances for all arrangements (optional)
     - parameter includeTotals: (query) Includes total aggregations by currency as a first item of the list in response when it is true otherwise, it doesn&#39;t. (optional, default to false)
     - returns: Call<[AggregatedBalances]> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with BalancesAPI.GetAggregationsRequestParams class.")
    func getAggregationsCall(contentLanguage: String?, productKindIds: [Int]?, externalProductKindIds: [String]?, groupedBy: BalancesAPI.GroupedBy_getAggregations?, includeTotals: Bool?) throws -> Call<[AggregatedBalances]>
    
    /**
     - GET /client-api/v2/balances/aggregations
     - Retrieves aggregated balances ordered by favorite currencies.

     - parameter params: The request parameters of this request.
     - returns: Call<[AggregatedBalances]> 
     */
    func getAggregationsCall(params: BalancesAPI.GetAggregationsRequestParams) throws -> Call<[AggregatedBalances]>

    
    /**
     - GET /client-api/v2/balances/aggregations/favorites/currencies
     - Retrieve aggregated balances in favorite currencies

     - returns: Call<[AggregatedBalance]> 
     */
    func getFavoriteCurrenciesCall() throws -> Call<[AggregatedBalance]>
}


public class BalancesAPI: NSObject, DBSClient, BalancesAPIProtocol {
    public var dataProvider: DBSDataProvider?
    public var baseURL: URL

    public override init() {
        self.baseURL = URL(fileURLWithPath: "")
    }

    required public init(dataProvider: DBSDataProvider, baseURL: URL) {
        self.dataProvider = dataProvider
        self.baseURL = baseURL
    }
    /**
     * enum for parameter groupedBy
     */
    @available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the BalancesAPI.GetAggregationsRequestParams class.")
    public enum GroupedBy_getAggregations: String, CaseIterable {
        case productKind = "PRODUCT_KIND"
    }

    /**
     - GET /client-api/v2/balances/aggregations
     - Retrieves aggregated balances ordered by favorite currencies.
     - parameter contentLanguage: (header) Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. (optional)
     - parameter productKindIds: (query) Filters arrangements by given product kind ids and aggregates their balances. Since product kinds will be static this property is deprecated, please use externalProductKindIds. (optional)
     - parameter externalProductKindIds: (query) Filters arrangements by given external product kind ids and aggregates their balances. (optional)
     - parameter groupedBy: (query) Groups arrangements by id of given parameter and aggregates their balances. If it is empty, then it aggregates balances for all arrangements (optional)
     - parameter includeTotals: (query) Includes total aggregations by currency as a first item of the list in response when it is true otherwise, it doesn&#39;t. (optional, default to false)
     - returns: Call<[AggregatedBalances]> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with BalancesAPI.GetAggregationsRequestParams class.")
    open func getAggregationsCall(contentLanguage: String? = nil, productKindIds: [Int]? = nil, externalProductKindIds: [String]? = nil, groupedBy: GroupedBy_getAggregations? = nil, includeTotals: Bool? = nil) throws -> Call<[AggregatedBalances]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/balances/aggregations"
        
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "productKindIds":productKindIds?.encodeToJSON(), 
            "externalProductKindIds":externalProductKindIds?.encodeToJSON(), 
            "groupedBy":groupedBy?.encodeToJSON(), 
            "includeTotals":includeTotals?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        let nillableHeaders: [String: Any?] = [
            "Content-Language":contentLanguage?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none,
                                                                            headers: headerParameters)
        return Call<[AggregatedBalances]>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/balances/aggregations
     - Retrieves aggregated balances ordered by favorite currencies.

     - parameter params: The request parameters of this request.
     - returns: Call<[AggregatedBalances]> 
     */
    open func getAggregationsCall(params: BalancesAPI.GetAggregationsRequestParams) throws -> Call<[AggregatedBalances]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/balances/aggregations"
        
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "productKindIds": params.productKindIds?.encodeToJSON(), 
            "externalProductKindIds": params.externalProductKindIds?.encodeToJSON(), 
            "groupedBy": params.groupedBy?.encodeToJSON(), 
            "includeTotals": params.includeTotals?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        let nillableHeaders: [String: Any?] = [
            "Content-Language": params.contentLanguage?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none,
                                                                            headers: headerParameters)
        return Call<[AggregatedBalances]>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/balances/aggregations/favorites/currencies
     - Retrieve aggregated balances in favorite currencies

     - returns: Call<[AggregatedBalance]> 
     */
    open func getFavoriteCurrenciesCall() throws -> Call<[AggregatedBalance]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/balances/aggregations/favorites/currencies"
        
        let parameters: [String: Any]? = nil
        
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<[AggregatedBalance]>(dataProvider: dataProvider, request: request)
    }
}
