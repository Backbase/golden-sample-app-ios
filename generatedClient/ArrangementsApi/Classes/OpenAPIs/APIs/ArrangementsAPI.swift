//
// ArrangementsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Backbase
import ClientCommonGen2

/// ArrangementsAPI protocol defines a blueprint of methods, properties, and other requirements for ArrangementsAPI functionality. 
public protocol ArrangementsAPIProtocol {

    /**
     - GET /client-api/v2/arrangements/{arrangementId}
     - Retrieve a single arrangement with details.
     - parameter arrangementId: (path) Arrangement Id 
     - parameter contentLanguage: (header) Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. (optional)
     - parameter maskIndicator: (query) Masked/Unmasked card number (optional)
     - returns: Call<AccountArrangementItem> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetArrangementByIdRequestParams class.")
    func getArrangementByIdCall(arrangementId: String, contentLanguage: String?, maskIndicator: Bool?) throws -> Call<AccountArrangementItem>
    
    /**
     - GET /client-api/v2/arrangements/{arrangementId}
     - Retrieve a single arrangement with details.

     - parameter params: The request parameters of this request.
     - returns: Call<AccountArrangementItem> 
     */
    func getArrangementByIdCall(params: ArrangementsAPI.GetArrangementByIdRequestParams) throws -> Call<AccountArrangementItem>

    /**
     - GET /client-api/v2/arrangements/{arrangementId}/children
     - Retrieve child arrangements.
     - responseHeaders: [x-total-count(Int)]
     - parameter arrangementId: (path) Arrangement Id 
     - parameter from: (query) Page Number. Skip over pages of elements by specifying a start value for the query (optional, default to 0)
     - parameter size: (query) Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  (optional, default to 10)
     - returns: Call<[ChildArrangementResult]> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetArrangementChildrenRequestParams class.")
    func getArrangementChildrenCall(arrangementId: String, from: Int?, size: Int?) throws -> Call<[ChildArrangementResult]>
    
    /**
     - GET /client-api/v2/arrangements/{arrangementId}/children
     - Retrieve child arrangements.
     - responseHeaders: [x-total-count(Int)]

     - parameter params: The request parameters of this request.
     - returns: Call<[ChildArrangementResult]> 
     */
    func getArrangementChildrenCall(params: ArrangementsAPI.GetArrangementChildrenRequestParams) throws -> Call<[ChildArrangementResult]>

    /**
     - GET /client-api/v2/arrangements/linked
     - Retrieves a list of arrangements for a given external legal entity with information if linked or unlinked.
     - parameter legalEntityId: (query) External Legal entity Id 
     - parameter from: (query) Page Number. Skip over pages of elements by specifying a start value for the query (optional, default to 0)
     - parameter size: (query) Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  (optional, default to 10)
     - returns: Call<AccountLinkedArrangementItems> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetLinkedRequestParams class.")
    func getLinkedCall(legalEntityId: String, from: Int?, size: Int?) throws -> Call<AccountLinkedArrangementItems>
    
    /**
     - GET /client-api/v2/arrangements/linked
     - Retrieves a list of arrangements for a given external legal entity with information if linked or unlinked.

     - parameter params: The request parameters of this request.
     - returns: Call<AccountLinkedArrangementItems> 
     */
    func getLinkedCall(params: ArrangementsAPI.GetLinkedRequestParams) throws -> Call<AccountLinkedArrangementItems>

    /**
     - GET /client-api/v2/arrangements/user-preferences
     - Retrieve user defined preferences for arrangement id
     - parameter arrangementId: (query) arrangement id 
     - returns: Call<AccountUserPreferences> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetUserPreferencesRequestParams class.")
    func getUserPreferencesCall(arrangementId: String) throws -> Call<AccountUserPreferences>
    
    /**
     - GET /client-api/v2/arrangements/user-preferences
     - Retrieve user defined preferences for arrangement id

     - parameter params: The request parameters of this request.
     - returns: Call<AccountUserPreferences> 
     */
    func getUserPreferencesCall(params: ArrangementsAPI.GetUserPreferencesRequestParams) throws -> Call<AccountUserPreferences>

    /**
     - POST /client-api/v2/arrangements/link/{externalLegalEntityId}
     - Link an arrangement to the given external legal entity or persist it to DBS
     - parameter externalLegalEntityId: (path) external legal entity id 
     - parameter accountLinkedArrangementItem: (body)  
     - returns: Call<NoResponse> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.LinkExternalLegalEntityRequestParams class.")
    func linkExternalLegalEntityCall(externalLegalEntityId: String, accountLinkedArrangementItem: AccountLinkedArrangementItem) throws -> Call<NoResponse>
    
    /**
     - POST /client-api/v2/arrangements/link/{externalLegalEntityId}
     - Link an arrangement to the given external legal entity or persist it to DBS

     - parameter params: The request parameters of this request.
     - returns: Call<NoResponse> 
     */
    func linkExternalLegalEntityCall(params: ArrangementsAPI.LinkExternalLegalEntityRequestParams) throws -> Call<NoResponse>

    /**
     - POST /client-api/v2/arrangements/unlink/{externalLegalEntityId}/{externalArrangementId}
     - Unlink an arrangement from the given legal entity if all privileges are removed
     - parameter externalLegalEntityId: (path) external legal entity id 
     - parameter externalArrangementId: (path) external arrangement id 
     - returns: Call<NoResponse> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.UnlinkExternalLegalEntityRequestParams class.")
    func unlinkExternalLegalEntityCall(externalLegalEntityId: String, externalArrangementId: String) throws -> Call<NoResponse>
    
    /**
     - POST /client-api/v2/arrangements/unlink/{externalLegalEntityId}/{externalArrangementId}
     - Unlink an arrangement from the given legal entity if all privileges are removed

     - parameter params: The request parameters of this request.
     - returns: Call<NoResponse> 
     */
    func unlinkExternalLegalEntityCall(params: ArrangementsAPI.UnlinkExternalLegalEntityRequestParams) throws -> Call<NoResponse>

    /**
     - GET /client-api/v2/arrangements/{arrangementId}/unmasked-attributes/{attributeName}
     - Returns the unmasked value of the requested attribute.
     - parameter arrangementId: (path) Arrangement Id 
     - parameter attributeName: (path) The attribute to be unmasked 
     - returns: Call<String> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.UnmaskedAttributeRequestParams class.")
    func unmaskedAttributeCall(arrangementId: String, attributeName: MaskableAttribute) throws -> Call<String>
    
    /**
     - GET /client-api/v2/arrangements/{arrangementId}/unmasked-attributes/{attributeName}
     - Returns the unmasked value of the requested attribute.

     - parameter params: The request parameters of this request.
     - returns: Call<String> 
     */
    func unmaskedAttributeCall(params: ArrangementsAPI.UnmaskedAttributeRequestParams) throws -> Call<String>

    /**
     - PUT /client-api/v2/arrangements/user-preferences
     - Update user defined preferences for arrangement id
     - parameter accountUserPreferences: (body)  
     - returns: Call<NoResponse> 
     */
    @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.UpdateUserPreferencesRequestParams class.")
    func updateUserPreferencesCall(accountUserPreferences: AccountUserPreferences) throws -> Call<NoResponse>
    
    /**
     - PUT /client-api/v2/arrangements/user-preferences
     - Update user defined preferences for arrangement id

     - parameter params: The request parameters of this request.
     - returns: Call<NoResponse> 
     */
    func updateUserPreferencesCall(params: ArrangementsAPI.UpdateUserPreferencesRequestParams) throws -> Call<NoResponse>
}


public class ArrangementsAPI: NSObject, DBSClient, ArrangementsAPIProtocol {
    public var dataProvider: DBSDataProvider?
    public var baseURL: URL

    public override init() {
        self.baseURL = URL(fileURLWithPath: "")
    }

    required public init(dataProvider: DBSDataProvider, baseURL: URL) {
        self.dataProvider = dataProvider
        self.baseURL = baseURL
    }
    /**
     - GET /client-api/v2/arrangements/{arrangementId}
     - Retrieve a single arrangement with details.
     - parameter arrangementId: (path) Arrangement Id 
     - parameter contentLanguage: (header) Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. (optional)
     - parameter maskIndicator: (query) Masked/Unmasked card number (optional)
     - returns: Call<AccountArrangementItem> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetArrangementByIdRequestParams class.")
    open func getArrangementByIdCall(arrangementId: String, contentLanguage: String? = nil, maskIndicator: Bool? = nil) throws -> Call<AccountArrangementItem> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/{arrangementId}"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "maskIndicator":maskIndicator?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        let nillableHeaders: [String: Any?] = [
            "Content-Language":contentLanguage?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none,
                                                                            headers: headerParameters)
        return Call<AccountArrangementItem>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangements/{arrangementId}
     - Retrieve a single arrangement with details.

     - parameter params: The request parameters of this request.
     - returns: Call<AccountArrangementItem> 
     */
    open func getArrangementByIdCall(params: ArrangementsAPI.GetArrangementByIdRequestParams) throws -> Call<AccountArrangementItem> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/{arrangementId}"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(params.arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "maskIndicator": params.maskIndicator?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        let nillableHeaders: [String: Any?] = [
            "Content-Language": params.contentLanguage?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none,
                                                                            headers: headerParameters)
        return Call<AccountArrangementItem>(dataProvider: dataProvider, request: request)
    }
    /**
     - GET /client-api/v2/arrangements/{arrangementId}/children
     - Retrieve child arrangements.
     - responseHeaders: [x-total-count(Int)]
     - parameter arrangementId: (path) Arrangement Id 
     - parameter from: (query) Page Number. Skip over pages of elements by specifying a start value for the query (optional, default to 0)
     - parameter size: (query) Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  (optional, default to 10)
     - returns: Call<[ChildArrangementResult]> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetArrangementChildrenRequestParams class.")
    open func getArrangementChildrenCall(arrangementId: String, from: Int? = nil, size: Int? = nil) throws -> Call<[ChildArrangementResult]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/{arrangementId}/children"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "from":from?.encodeToJSON(), 
            "size":size?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<[ChildArrangementResult]>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangements/{arrangementId}/children
     - Retrieve child arrangements.
     - responseHeaders: [x-total-count(Int)]

     - parameter params: The request parameters of this request.
     - returns: Call<[ChildArrangementResult]> 
     */
    open func getArrangementChildrenCall(params: ArrangementsAPI.GetArrangementChildrenRequestParams) throws -> Call<[ChildArrangementResult]> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/{arrangementId}/children"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(params.arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "from": params.from?.encodeToJSON(), 
            "size": params.size?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<[ChildArrangementResult]>(dataProvider: dataProvider, request: request)
    }
    /**
     - GET /client-api/v2/arrangements/linked
     - Retrieves a list of arrangements for a given external legal entity with information if linked or unlinked.
     - parameter legalEntityId: (query) External Legal entity Id 
     - parameter from: (query) Page Number. Skip over pages of elements by specifying a start value for the query (optional, default to 0)
     - parameter size: (query) Limit the number of elements on the response. When used in combination with cursor, the value is allowed to be a negative number to indicate requesting records upwards from the starting point indicated by the cursor.  (optional, default to 10)
     - returns: Call<AccountLinkedArrangementItems> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetLinkedRequestParams class.")
    open func getLinkedCall(legalEntityId: String, from: Int? = nil, size: Int? = nil) throws -> Call<AccountLinkedArrangementItems> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/arrangements/linked"
        
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "legalEntityId":legalEntityId.encodeToJSON(), 
            "from":from?.encodeToJSON(), 
            "size":size?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<AccountLinkedArrangementItems>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangements/linked
     - Retrieves a list of arrangements for a given external legal entity with information if linked or unlinked.

     - parameter params: The request parameters of this request.
     - returns: Call<AccountLinkedArrangementItems> 
     */
    open func getLinkedCall(params: ArrangementsAPI.GetLinkedRequestParams) throws -> Call<AccountLinkedArrangementItems> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/arrangements/linked"
        
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "legalEntityId": params.legalEntityId.encodeToJSON(), 
            "from": params.from?.encodeToJSON(), 
            "size": params.size?.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<AccountLinkedArrangementItems>(dataProvider: dataProvider, request: request)
    }
    /**
     - GET /client-api/v2/arrangements/user-preferences
     - Retrieve user defined preferences for arrangement id
     - parameter arrangementId: (query) arrangement id 
     - returns: Call<AccountUserPreferences> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.GetUserPreferencesRequestParams class.")
    open func getUserPreferencesCall(arrangementId: String) throws -> Call<AccountUserPreferences> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/arrangements/user-preferences"
        
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "arrangementId":arrangementId.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<AccountUserPreferences>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangements/user-preferences
     - Retrieve user defined preferences for arrangement id

     - parameter params: The request parameters of this request.
     - returns: Call<AccountUserPreferences> 
     */
    open func getUserPreferencesCall(params: ArrangementsAPI.GetUserPreferencesRequestParams) throws -> Call<AccountUserPreferences> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/arrangements/user-preferences"
        
        let parameters: [String: Any]? = nil
        
        let queryParameters: [String: Any?] = [
            "arrangementId": params.arrangementId.encodeToJSON()
        ]
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: queryParameters.compactMapValues({ $0 }),
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<AccountUserPreferences>(dataProvider: dataProvider, request: request)
    }
    /**
     - POST /client-api/v2/arrangements/link/{externalLegalEntityId}
     - Link an arrangement to the given external legal entity or persist it to DBS
     - parameter externalLegalEntityId: (path) external legal entity id 
     - parameter accountLinkedArrangementItem: (body)  
     - returns: Call<NoResponse> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.LinkExternalLegalEntityRequestParams class.")
    open func linkExternalLegalEntityCall(externalLegalEntityId: String, accountLinkedArrangementItem: AccountLinkedArrangementItem) throws -> Call<NoResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/link/{externalLegalEntityId}"
        let externalLegalEntityIdPathItem = "\(APIHelper.mapValueToPathItem(externalLegalEntityId))"
        path = path.replacingOccurrences(of: "{externalLegalEntityId}", with: externalLegalEntityIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountLinkedArrangementItem)

        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "POST",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .json)
        return Call<NoResponse>(dataProvider: dataProvider, request: request)
    }

    /**
     - POST /client-api/v2/arrangements/link/{externalLegalEntityId}
     - Link an arrangement to the given external legal entity or persist it to DBS

     - parameter params: The request parameters of this request.
     - returns: Call<NoResponse> 
     */
    open func linkExternalLegalEntityCall(params: ArrangementsAPI.LinkExternalLegalEntityRequestParams) throws -> Call<NoResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/link/{externalLegalEntityId}"
        let externalLegalEntityIdPathItem = "\(APIHelper.mapValueToPathItem(params.externalLegalEntityId))"
        path = path.replacingOccurrences(of: "{externalLegalEntityId}", with: externalLegalEntityIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: params.accountLinkedArrangementItem)

        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "POST",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .json)
        return Call<NoResponse>(dataProvider: dataProvider, request: request)
    }
    /**
     - POST /client-api/v2/arrangements/unlink/{externalLegalEntityId}/{externalArrangementId}
     - Unlink an arrangement from the given legal entity if all privileges are removed
     - parameter externalLegalEntityId: (path) external legal entity id 
     - parameter externalArrangementId: (path) external arrangement id 
     - returns: Call<NoResponse> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.UnlinkExternalLegalEntityRequestParams class.")
    open func unlinkExternalLegalEntityCall(externalLegalEntityId: String, externalArrangementId: String) throws -> Call<NoResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/unlink/{externalLegalEntityId}/{externalArrangementId}"
        let externalLegalEntityIdPathItem = "\(APIHelper.mapValueToPathItem(externalLegalEntityId))"
        path = path.replacingOccurrences(of: "{externalLegalEntityId}", with: externalLegalEntityIdPathItem, options: .literal, range: nil)
        let externalArrangementIdPathItem = "\(APIHelper.mapValueToPathItem(externalArrangementId))"
        path = path.replacingOccurrences(of: "{externalArrangementId}", with: externalArrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "POST",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<NoResponse>(dataProvider: dataProvider, request: request)
    }

    /**
     - POST /client-api/v2/arrangements/unlink/{externalLegalEntityId}/{externalArrangementId}
     - Unlink an arrangement from the given legal entity if all privileges are removed

     - parameter params: The request parameters of this request.
     - returns: Call<NoResponse> 
     */
    open func unlinkExternalLegalEntityCall(params: ArrangementsAPI.UnlinkExternalLegalEntityRequestParams) throws -> Call<NoResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/unlink/{externalLegalEntityId}/{externalArrangementId}"
        let externalLegalEntityIdPathItem = "\(APIHelper.mapValueToPathItem(params.externalLegalEntityId))"
        path = path.replacingOccurrences(of: "{externalLegalEntityId}", with: externalLegalEntityIdPathItem, options: .literal, range: nil)
        let externalArrangementIdPathItem = "\(APIHelper.mapValueToPathItem(params.externalArrangementId))"
        path = path.replacingOccurrences(of: "{externalArrangementId}", with: externalArrangementIdPathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "POST",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<NoResponse>(dataProvider: dataProvider, request: request)
    }
    /**
     - GET /client-api/v2/arrangements/{arrangementId}/unmasked-attributes/{attributeName}
     - Returns the unmasked value of the requested attribute.
     - parameter arrangementId: (path) Arrangement Id 
     - parameter attributeName: (path) The attribute to be unmasked 
     - returns: Call<String> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.UnmaskedAttributeRequestParams class.")
    open func unmaskedAttributeCall(arrangementId: String, attributeName: MaskableAttribute) throws -> Call<String> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/{arrangementId}/unmasked-attributes/{attributeName}"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        let attributeNamePathItem = "\(APIHelper.mapValueToPathItem(attributeName))"
        path = path.replacingOccurrences(of: "{attributeName}", with: attributeNamePathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<String>(dataProvider: dataProvider, request: request)
    }

    /**
     - GET /client-api/v2/arrangements/{arrangementId}/unmasked-attributes/{attributeName}
     - Returns the unmasked value of the requested attribute.

     - parameter params: The request parameters of this request.
     - returns: Call<String> 
     */
    open func unmaskedAttributeCall(params: ArrangementsAPI.UnmaskedAttributeRequestParams) throws -> Call<String> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        var path = "/client-api/v2/arrangements/{arrangementId}/unmasked-attributes/{attributeName}"
        let arrangementIdPathItem = "\(APIHelper.mapValueToPathItem(params.arrangementId))"
        path = path.replacingOccurrences(of: "{arrangementId}", with: arrangementIdPathItem, options: .literal, range: nil)
        let attributeNamePathItem = "\(APIHelper.mapValueToPathItem(params.attributeName))"
        path = path.replacingOccurrences(of: "{attributeName}", with: attributeNamePathItem, options: .literal, range: nil)
        path = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        let parameters: [String: Any]? = nil
        
        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "GET",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .none)
        return Call<String>(dataProvider: dataProvider, request: request)
    }
    /**
     - PUT /client-api/v2/arrangements/user-preferences
     - Update user defined preferences for arrangement id
     - parameter accountUserPreferences: (body)  
     - returns: Call<NoResponse> 
     */
     @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with ArrangementsAPI.UpdateUserPreferencesRequestParams class.")
    open func updateUserPreferencesCall(accountUserPreferences: AccountUserPreferences) throws -> Call<NoResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/arrangements/user-preferences"
        
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accountUserPreferences)

        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "PUT",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .json)
        return Call<NoResponse>(dataProvider: dataProvider, request: request)
    }

    /**
     - PUT /client-api/v2/arrangements/user-preferences
     - Update user defined preferences for arrangement id

     - parameter params: The request parameters of this request.
     - returns: Call<NoResponse> 
     */
    open func updateUserPreferencesCall(params: ArrangementsAPI.UpdateUserPreferencesRequestParams) throws -> Call<NoResponse> {
        guard let dataProvider = dataProvider else { throw CallError.missingDataProvider }
        let path = "/client-api/v2/arrangements/user-preferences"
        
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: params.accountUserPreferences)

        let urlComponents = URLComponents(url: baseURL.appendingPathComponent(path), resolvingAgainstBaseURL: false)
        guard let url = urlComponents?.url else { throw CallError.invalidUrl }
        let request = try ClientCommonGen2.RequestBuilder.createURLRequest(requestUrl: url, 
                                                                            method: "PUT",
                                                                            queryParameters: nil,
                                                                            bodyParameters: parameters,
                                                                            bodyType: .json)
        return Call<NoResponse>(dataProvider: dataProvider, request: request)
    }
}
