//
// BalancesAPIRequestParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import ClientCommonGen2

public extension BalancesAPI {
    /// This class is used as a container class for request parameters for BalancesAPI.getAggregations API call.
    struct GetAggregationsRequestParams: Equatable {
                public enum GroupedBy: String, Codable, CaseIterable {
        case productKind = "PRODUCT_KIND"
    }
    /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
    public let contentLanguage: String?
    /** Filters arrangements by given product kind ids and aggregates their balances. Since product kinds will be static this property is deprecated, please use externalProductKindIds. */
    public let productKindIds: [Int]?
    /** Filters arrangements by given external product kind ids and aggregates their balances. */
    public let externalProductKindIds: [String]?
    /** Groups arrangements by id of given parameter and aggregates their balances. If it is empty, then it aggregates balances for all arrangements */
    public let groupedBy: GroupedBy?
    /** Includes total aggregations by currency as a first item of the list in response when it is true otherwise, it doesn&#39;t. */
    public let includeTotals: Bool?

    internal init(contentLanguage: String?, productKindIds: [Int]?, externalProductKindIds: [String]?, groupedBy: GroupedBy?, includeTotals: Bool?) {
        self.contentLanguage = contentLanguage
        self.productKindIds = productKindIds
        self.externalProductKindIds = externalProductKindIds
        self.groupedBy = groupedBy
        self.includeTotals = includeTotals
    }
    /// Builder class for GetAggregationsRequestParams DTO.
    public final class Builder: Equatable {
        /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
        public private(set) var contentLanguage: String?
        /** Filters arrangements by given product kind ids and aggregates their balances. Since product kinds will be static this property is deprecated, please use externalProductKindIds. */
        public private(set) var productKindIds: [Int]?
        /** Filters arrangements by given external product kind ids and aggregates their balances. */
        public private(set) var externalProductKindIds: [String]?
        /** Groups arrangements by id of given parameter and aggregates their balances. If it is empty, then it aggregates balances for all arrangements */
        public private(set) var groupedBy: BalancesAPI.GetAggregationsRequestParams.GroupedBy?
        /** Includes total aggregations by currency as a first item of the list in response when it is true otherwise, it doesn&#39;t. */
        public private(set) var includeTotals: Bool? = false

        public init() {
        }

        /// Setter method for contentLanguage property.
        public func set(contentLanguage: String?) -> Self {
            self.contentLanguage = contentLanguage
            return self
        }
        /// Setter method for productKindIds property.
        public func set(productKindIds: [Int]?) -> Self {
            self.productKindIds = productKindIds
            return self
        }
        /// Setter method for externalProductKindIds property.
        public func set(externalProductKindIds: [String]?) -> Self {
            self.externalProductKindIds = externalProductKindIds
            return self
        }
        /// Setter method for groupedBy property.
        public func set(groupedBy: BalancesAPI.GetAggregationsRequestParams.GroupedBy?) -> Self {
            self.groupedBy = groupedBy
            return self
        }
        /// Setter method for includeTotals property.
        public func set(includeTotals: Bool?) -> Self {
            self.includeTotals = includeTotals
            return self
        }

        /// Builder initializer method for GetAggregationsRequestParams DTO.
        public func build() -> GetAggregationsRequestParams {
            return GetAggregationsRequestParams(contentLanguage: contentLanguage, 
            		productKindIds: productKindIds, 
            		externalProductKindIds: externalProductKindIds, 
            		groupedBy: groupedBy, 
            		includeTotals: includeTotals)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
        	return lhs.contentLanguage == rhs.contentLanguage &&
        	lhs.productKindIds?.description == rhs.productKindIds?.description &&
        	lhs.externalProductKindIds?.description == rhs.externalProductKindIds?.description &&
        	lhs.groupedBy == rhs.groupedBy &&
        	lhs.includeTotals == rhs.includeTotals
    	}
    }

public static func ==(lhs: Self, rhs: Self) -> Bool {
    return lhs.contentLanguage == rhs.contentLanguage &&
    lhs.productKindIds?.description == rhs.productKindIds?.description &&
    lhs.externalProductKindIds?.description == rhs.externalProductKindIds?.description &&
    lhs.groupedBy == rhs.groupedBy &&
    lhs.includeTotals == rhs.includeTotals
}
    }
}
