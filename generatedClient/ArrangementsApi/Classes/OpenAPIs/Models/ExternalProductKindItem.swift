//
// ExternalProductKindItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ExternalProductKindItem: Codable, Equatable {
    /** unique external identifier for the product kind */
    public var externalKindId: String
    /** unique product kind name */
    public var kindName: String
    /** unique product kind uri */
    public var kindUri: String
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ExternalProductKindItem.Builder class.")
    public init(externalKindId: String, kindName: String, kindUri: String, additions: [String: String]? = nil) {
        self.externalKindId = externalKindId
        self.kindName = kindName
        self.kindUri = kindUri
        self.additions = additions
    }

    /// Builder class for ExternalProductKindItem DTO.
    public final class Builder: Equatable {
        /** unique external identifier for the product kind */
        public let externalKindId: String
        /** unique product kind name */
        public let kindName: String
        /** unique product kind uri */
        public let kindUri: String
        public private(set) var additions: [String: String]?

        public init(externalKindId: String, kindName: String, kindUri: String) {
            self.externalKindId = externalKindId
            self.kindName = kindName
            self.kindUri = kindUri
        }

        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for ExternalProductKindItem DTO.
        public func build() -> ExternalProductKindItem {
            return ExternalProductKindItem(externalKindId: externalKindId, 
                    kindName: kindName, 
                    kindUri: kindUri, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.externalKindId == rhs.externalKindId &&
            lhs.kindName == rhs.kindName &&
            lhs.kindUri == rhs.kindUri &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(externalKindId, forKey: "externalKindId")
        try container.encode(kindName, forKey: "kindName")
        try container.encode(kindUri, forKey: "kindUri")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        externalKindId = try container.decode(String.self, forKey: "externalKindId")
        kindName = try container.decode(String.self, forKey: "kindName")
        kindUri = try container.decode(String.self, forKey: "kindUri")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: ExternalProductKindItem, rhs: ExternalProductKindItem) -> Bool {
        return lhs.externalKindId == rhs.externalKindId &&
        lhs.kindName == rhs.kindName &&
        lhs.kindUri == rhs.kindUri &&
        lhs.additions == rhs.additions
    }


}
