//
// ProductItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ProductItem: Codable, Equatable {
    /** A unique identifier for the product that the arrangement applies to  */
    public var externalId: String?
    /** The ID that is used by the Bank to identify the specific Product type - External reference to the product Type. */
    public var externalTypeId: String?
    /** The label/name that is used to label a specific product type. */
    public var typeName: String?
    public var productKind: SummaryProductKindItem?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ProductItem.Builder class.")
    public init(externalId: String? = nil, externalTypeId: String? = nil, typeName: String? = nil, productKind: SummaryProductKindItem? = nil, additions: [String: String]? = nil) {
        self.externalId = externalId
        self.externalTypeId = externalTypeId
        self.typeName = typeName
        self.productKind = productKind
        self.additions = additions
    }

    /// Builder class for ProductItem DTO.
    public final class Builder: Equatable {
        /** A unique identifier for the product that the arrangement applies to  */
        public private(set) var externalId: String?
        /** The ID that is used by the Bank to identify the specific Product type - External reference to the product Type. */
        public private(set) var externalTypeId: String?
        /** The label/name that is used to label a specific product type. */
        public private(set) var typeName: String?
        public private(set) var productKind: SummaryProductKindItem?
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for externalId property.
        public func set(externalId: String?) -> Self {
            self.externalId = externalId
            return self
        }
        /// Setter method for externalTypeId property.
        public func set(externalTypeId: String?) -> Self {
            self.externalTypeId = externalTypeId
            return self
        }
        /// Setter method for typeName property.
        public func set(typeName: String?) -> Self {
            self.typeName = typeName
            return self
        }
        /// Setter method for productKind property.
        public func set(productKind: SummaryProductKindItem?) -> Self {
            self.productKind = productKind
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for ProductItem DTO.
        public func build() -> ProductItem {
            return ProductItem(externalId: externalId, 
                    externalTypeId: externalTypeId, 
                    typeName: typeName, 
                    productKind: productKind, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.externalId == rhs.externalId &&
            lhs.externalTypeId == rhs.externalTypeId &&
            lhs.typeName == rhs.typeName &&
            lhs.productKind == rhs.productKind &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(externalId, forKey: "externalId")
        try container.encodeIfPresent(externalTypeId, forKey: "externalTypeId")
        try container.encodeIfPresent(typeName, forKey: "typeName")
        try container.encodeIfPresent(productKind, forKey: "productKind")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        externalId = try container.decodeIfPresent(String.self, forKey: "externalId")
        externalTypeId = try container.decodeIfPresent(String.self, forKey: "externalTypeId")
        typeName = try container.decodeIfPresent(String.self, forKey: "typeName")
        productKind = try container.decodeIfPresent(SummaryProductKindItem.self, forKey: "productKind")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: ProductItem, rhs: ProductItem) -> Bool {
        return lhs.externalId == rhs.externalId &&
        lhs.externalTypeId == rhs.externalTypeId &&
        lhs.typeName == rhs.typeName &&
        lhs.productKind == rhs.productKind &&
        lhs.additions == rhs.additions
    }


}
