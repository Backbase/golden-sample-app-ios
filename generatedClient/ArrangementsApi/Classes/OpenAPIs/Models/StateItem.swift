//
// StateItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct StateItem: Codable, Equatable {
    /** An external unique identifier for the arrangement state object. */
    public var externalStateId: String?
    /** Name that describes the specific arrangement state. */
    public var state: String?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of StateItem.Builder class.")
    public init(externalStateId: String? = nil, state: String? = nil, additions: [String: String]? = nil) {
        self.externalStateId = externalStateId
        self.state = state
        self.additions = additions
    }

    /// Builder class for StateItem DTO.
    public final class Builder: Equatable {
        /** An external unique identifier for the arrangement state object. */
        public private(set) var externalStateId: String?
        /** Name that describes the specific arrangement state. */
        public private(set) var state: String?
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for externalStateId property.
        public func set(externalStateId: String?) -> Self {
            self.externalStateId = externalStateId
            return self
        }
        /// Setter method for state property.
        public func set(state: String?) -> Self {
            self.state = state
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for StateItem DTO.
        public func build() -> StateItem {
            return StateItem(externalStateId: externalStateId, 
                    state: state, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.externalStateId == rhs.externalStateId &&
            lhs.state == rhs.state &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(externalStateId, forKey: "externalStateId")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        externalStateId = try container.decodeIfPresent(String.self, forKey: "externalStateId")
        state = try container.decodeIfPresent(String.self, forKey: "state")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: StateItem, rhs: StateItem) -> Bool {
        return lhs.externalStateId == rhs.externalStateId &&
        lhs.state == rhs.state &&
        lhs.additions == rhs.additions
    }


}
