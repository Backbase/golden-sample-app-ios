//
// ArrangementViewResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ArrangementViewResponse: Codable, Equatable {
    public var metadata: ArrangementViewMetadata?
    public var groups: [String: ArrangementGroupResponse]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ArrangementViewResponse.Builder class.")
    public init(metadata: ArrangementViewMetadata? = nil, groups: [String: ArrangementGroupResponse]? = nil) {
        self.metadata = metadata
        self.groups = groups
    }

    /// Builder class for ArrangementViewResponse DTO.
    public final class Builder: Equatable {
        public private(set) var metadata: ArrangementViewMetadata?
        public private(set) var groups: [String: ArrangementGroupResponse]?

        public init() {
        }

        /// Setter method for metadata property.
        public func set(metadata: ArrangementViewMetadata?) -> Self {
            self.metadata = metadata
            return self
        }
        /// Setter method for groups property.
        public func set(groups: [String: ArrangementGroupResponse]?) -> Self {
            self.groups = groups
            return self
        }

        /// Builder initializer method for ArrangementViewResponse DTO.
        public func build() -> ArrangementViewResponse {
            return ArrangementViewResponse(metadata: metadata, 
                    groups: groups)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.metadata == rhs.metadata &&
            lhs.groups == rhs.groups
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(metadata, forKey: "metadata")
        try container.encodeIfPresent(groups, forKey: "groups")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        metadata = try container.decodeIfPresent(ArrangementViewMetadata.self, forKey: "metadata")
        groups = try container.decodeIfPresent([String: ArrangementGroupResponse].self, forKey: "groups")
    }

    public static func ==(lhs: ArrangementViewResponse, rhs: ArrangementViewResponse) -> Bool {
        return lhs.metadata == rhs.metadata &&
        lhs.groups == rhs.groups
    }


}
