//
// SummaryAggregatedBalance.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** Defines a balance for groups of products. This field is not implemented OOTB, and it should be implemented by project/customer */
public struct SummaryAggregatedBalance: Codable, Equatable {
    /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
    public var currency: String?
    public var value: String?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SummaryAggregatedBalance.Builder class.")
    public init(currency: String? = nil, value: String? = nil, additions: [String: String]? = nil) {
        self.currency = currency
        self.value = value
        self.additions = additions
    }

    /// Builder class for SummaryAggregatedBalance DTO.
    public final class Builder: Equatable {
        /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
        public private(set) var currency: String?
        public private(set) var value: String?
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for currency property.
        public func set(currency: String?) -> Self {
            self.currency = currency
            return self
        }
        /// Setter method for value property.
        public func set(value: String?) -> Self {
            self.value = value
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for SummaryAggregatedBalance DTO.
        public func build() -> SummaryAggregatedBalance {
            return SummaryAggregatedBalance(currency: currency, 
                    value: value, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.currency == rhs.currency &&
            lhs.value == rhs.value &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        currency = try container.decodeIfPresent(String.self, forKey: "currency")
        value = try container.decodeIfPresent(String.self, forKey: "value")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: SummaryAggregatedBalance, rhs: SummaryAggregatedBalance) -> Bool {
        return lhs.currency == rhs.currency &&
        lhs.value == rhs.value &&
        lhs.additions == rhs.additions
    }


}
