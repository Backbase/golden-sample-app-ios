//
// LocaleTranslationItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** Locale Translation item */
public struct LocaleTranslationItem: Codable, Equatable {
    /** Defines the name of the field that is translated. */
    public var fieldName: String
    /** Defines the translated value of the field. */
    public var fieldValue: String
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of LocaleTranslationItem.Builder class.")
    public init(fieldName: String, fieldValue: String, additions: [String: String]? = nil) {
        self.fieldName = fieldName
        self.fieldValue = fieldValue
        self.additions = additions
    }

    /// Builder class for LocaleTranslationItem DTO.
    public final class Builder: Equatable {
        /** Defines the name of the field that is translated. */
        public let fieldName: String
        /** Defines the translated value of the field. */
        public let fieldValue: String
        public private(set) var additions: [String: String]?

        public init(fieldName: String, fieldValue: String) {
            self.fieldName = fieldName
            self.fieldValue = fieldValue
        }

        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for LocaleTranslationItem DTO.
        public func build() -> LocaleTranslationItem {
            return LocaleTranslationItem(fieldName: fieldName, 
                    fieldValue: fieldValue, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.fieldName == rhs.fieldName &&
            lhs.fieldValue == rhs.fieldValue &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(fieldName, forKey: "fieldName")
        try container.encode(fieldValue, forKey: "fieldValue")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        fieldName = try container.decode(String.self, forKey: "fieldName")
        fieldValue = try container.decode(String.self, forKey: "fieldValue")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: LocaleTranslationItem, rhs: LocaleTranslationItem) -> Bool {
        return lhs.fieldName == rhs.fieldName &&
        lhs.fieldValue == rhs.fieldValue &&
        lhs.additions == rhs.additions
    }


}
