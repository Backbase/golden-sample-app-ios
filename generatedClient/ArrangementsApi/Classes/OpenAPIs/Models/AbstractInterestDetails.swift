//
// AbstractInterestDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct AbstractInterestDetails: Codable, Equatable {
    /** Last year&#39;s interest that was earned (credit interest) or due (debit interest) */
    public var lastYearAccruedInterest: Double?
    /** Total amount of interest that is being withheld up to date and the bank provides 1099 document end of the year for Tax return purpose  *Example*:   - *12.32*: as fixed amount   - *3.14%*: as percent  */
    public var dividendWithheldYTD: String?
    /** The real rate of return earned on a savings deposit or investment taking into account the effect of compounding interest. */
    public var annualPercentageYield: Double?
    /** The Interest charge that is added monthly on the outstanding cash advance due on a credit card. */
    public var cashAdvanceInterestRate: Double?
    /** The Interest charge triggered by infractions such as late credit card payments. */
    public var penaltyInterestRate: Double?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AbstractInterestDetails.Builder class.")
    public init(lastYearAccruedInterest: Double? = nil, dividendWithheldYTD: String? = nil, annualPercentageYield: Double? = nil, cashAdvanceInterestRate: Double? = nil, penaltyInterestRate: Double? = nil, additions: [String: String]? = nil) {
        self.lastYearAccruedInterest = lastYearAccruedInterest
        self.dividendWithheldYTD = dividendWithheldYTD
        self.annualPercentageYield = annualPercentageYield
        self.cashAdvanceInterestRate = cashAdvanceInterestRate
        self.penaltyInterestRate = penaltyInterestRate
        self.additions = additions
    }

    /// Builder class for AbstractInterestDetails DTO.
    public final class Builder: Equatable {
        /** Last year&#39;s interest that was earned (credit interest) or due (debit interest) */
        public private(set) var lastYearAccruedInterest: Double?
        /** Total amount of interest that is being withheld up to date and the bank provides 1099 document end of the year for Tax return purpose  *Example*:   - *12.32*: as fixed amount   - *3.14%*: as percent  */
        public private(set) var dividendWithheldYTD: String?
        /** The real rate of return earned on a savings deposit or investment taking into account the effect of compounding interest. */
        public private(set) var annualPercentageYield: Double?
        /** The Interest charge that is added monthly on the outstanding cash advance due on a credit card. */
        public private(set) var cashAdvanceInterestRate: Double?
        /** The Interest charge triggered by infractions such as late credit card payments. */
        public private(set) var penaltyInterestRate: Double?
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for lastYearAccruedInterest property.
        public func set(lastYearAccruedInterest: Double?) -> Self {
            self.lastYearAccruedInterest = lastYearAccruedInterest
            return self
        }
        /// Setter method for dividendWithheldYTD property.
        public func set(dividendWithheldYTD: String?) -> Self {
            self.dividendWithheldYTD = dividendWithheldYTD
            return self
        }
        /// Setter method for annualPercentageYield property.
        public func set(annualPercentageYield: Double?) -> Self {
            self.annualPercentageYield = annualPercentageYield
            return self
        }
        /// Setter method for cashAdvanceInterestRate property.
        public func set(cashAdvanceInterestRate: Double?) -> Self {
            self.cashAdvanceInterestRate = cashAdvanceInterestRate
            return self
        }
        /// Setter method for penaltyInterestRate property.
        public func set(penaltyInterestRate: Double?) -> Self {
            self.penaltyInterestRate = penaltyInterestRate
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AbstractInterestDetails DTO.
        public func build() -> AbstractInterestDetails {
            return AbstractInterestDetails(lastYearAccruedInterest: lastYearAccruedInterest, 
                    dividendWithheldYTD: dividendWithheldYTD, 
                    annualPercentageYield: annualPercentageYield, 
                    cashAdvanceInterestRate: cashAdvanceInterestRate, 
                    penaltyInterestRate: penaltyInterestRate, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.lastYearAccruedInterest == rhs.lastYearAccruedInterest &&
            lhs.dividendWithheldYTD == rhs.dividendWithheldYTD &&
            lhs.annualPercentageYield == rhs.annualPercentageYield &&
            lhs.cashAdvanceInterestRate == rhs.cashAdvanceInterestRate &&
            lhs.penaltyInterestRate == rhs.penaltyInterestRate &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(lastYearAccruedInterest, forKey: "lastYearAccruedInterest")
        try container.encodeIfPresent(dividendWithheldYTD, forKey: "dividendWithheldYTD")
        try container.encodeIfPresent(annualPercentageYield, forKey: "annualPercentageYield")
        try container.encodeIfPresent(cashAdvanceInterestRate, forKey: "cashAdvanceInterestRate")
        try container.encodeIfPresent(penaltyInterestRate, forKey: "penaltyInterestRate")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        lastYearAccruedInterest = try container.decodeIfPresent(Double.self, forKey: "lastYearAccruedInterest")
        dividendWithheldYTD = try container.decodeIfPresent(String.self, forKey: "dividendWithheldYTD")
        annualPercentageYield = try container.decodeIfPresent(Double.self, forKey: "annualPercentageYield")
        cashAdvanceInterestRate = try container.decodeIfPresent(Double.self, forKey: "cashAdvanceInterestRate")
        penaltyInterestRate = try container.decodeIfPresent(Double.self, forKey: "penaltyInterestRate")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AbstractInterestDetails, rhs: AbstractInterestDetails) -> Bool {
        return lhs.lastYearAccruedInterest == rhs.lastYearAccruedInterest &&
        lhs.dividendWithheldYTD == rhs.dividendWithheldYTD &&
        lhs.annualPercentageYield == rhs.annualPercentageYield &&
        lhs.cashAdvanceInterestRate == rhs.cashAdvanceInterestRate &&
        lhs.penaltyInterestRate == rhs.penaltyInterestRate &&
        lhs.additions == rhs.additions
    }


}
