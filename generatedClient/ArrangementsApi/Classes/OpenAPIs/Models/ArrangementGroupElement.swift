//
// ArrangementGroupElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ArrangementGroupElement: Codable, Equatable {
    public var id: String
    public var attributes: [String: ArrangementGroupVariant]

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ArrangementGroupElement.Builder class.")
    public init(id: String, attributes: [String: ArrangementGroupVariant]) {
        self.id = id
        self.attributes = attributes
    }

    /// Builder class for ArrangementGroupElement DTO.
    public final class Builder: Equatable {
        public let id: String
        public let attributes: [String: ArrangementGroupVariant]

        public init(id: String, attributes: [String: ArrangementGroupVariant]) {
            self.id = id
            self.attributes = attributes
        }


        /// Builder initializer method for ArrangementGroupElement DTO.
        public func build() -> ArrangementGroupElement {
            return ArrangementGroupElement(id: id, 
                    attributes: attributes)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.id == rhs.id &&
            lhs.attributes == rhs.attributes
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(id, forKey: "id")
        try container.encode(attributes, forKey: "attributes")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        id = try container.decode(String.self, forKey: "id")
        attributes = try container.decode([String: ArrangementGroupVariant].self, forKey: "attributes")
    }

    public static func ==(lhs: ArrangementGroupElement, rhs: ArrangementGroupElement) -> Bool {
        return lhs.id == rhs.id &&
        lhs.attributes == rhs.attributes
    }


}
