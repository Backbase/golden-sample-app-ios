//
// AccountBalanceHistoryItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct AccountBalanceHistoryItem: Codable, Equatable {
    public var dateFrom: String?
    public var dateTo: String
    public var valuePtc: String?
    public var value: BalanceHistoryItemValue
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AccountBalanceHistoryItem.Builder class.")
    public init(dateFrom: String? = nil, dateTo: String, valuePtc: String? = nil, value: BalanceHistoryItemValue, additions: [String: String]? = nil) {
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.valuePtc = valuePtc
        self.value = value
        self.additions = additions
    }

    /// Builder class for AccountBalanceHistoryItem DTO.
    public final class Builder: Equatable {
        public private(set) var dateFrom: String?
        public let dateTo: String
        public private(set) var valuePtc: String?
        public let value: BalanceHistoryItemValue
        public private(set) var additions: [String: String]?

        public init(dateTo: String, value: BalanceHistoryItemValue) {
            self.dateTo = dateTo
            self.value = value
        }

        /// Setter method for dateFrom property.
        public func set(dateFrom: String?) -> Self {
            self.dateFrom = dateFrom
            return self
        }
        /// Setter method for valuePtc property.
        public func set(valuePtc: String?) -> Self {
            self.valuePtc = valuePtc
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AccountBalanceHistoryItem DTO.
        public func build() -> AccountBalanceHistoryItem {
            return AccountBalanceHistoryItem(dateFrom: dateFrom, 
                    dateTo: dateTo, 
                    valuePtc: valuePtc, 
                    value: value, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.dateFrom == rhs.dateFrom &&
            lhs.dateTo == rhs.dateTo &&
            lhs.valuePtc == rhs.valuePtc &&
            lhs.value == rhs.value &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(dateFrom, forKey: "dateFrom")
        try container.encode(dateTo, forKey: "dateTo")
        try container.encodeIfPresent(valuePtc, forKey: "valuePtc")
        try container.encode(value, forKey: "value")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        dateFrom = try container.decodeIfPresent(String.self, forKey: "dateFrom")
        dateTo = try container.decode(String.self, forKey: "dateTo")
        valuePtc = try container.decodeIfPresent(String.self, forKey: "valuePtc")
        value = try container.decode(BalanceHistoryItemValue.self, forKey: "value")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AccountBalanceHistoryItem, rhs: AccountBalanceHistoryItem) -> Bool {
        return lhs.dateFrom == rhs.dateFrom &&
        lhs.dateTo == rhs.dateTo &&
        lhs.valuePtc == rhs.valuePtc &&
        lhs.value == rhs.value &&
        lhs.additions == rhs.additions
    }


}
