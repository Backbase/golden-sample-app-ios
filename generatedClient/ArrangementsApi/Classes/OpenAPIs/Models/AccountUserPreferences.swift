//
// AccountUserPreferences.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** User defined preferences for a specific arrangement. Note: each user might have different preferences  */
public struct AccountUserPreferences: Codable, Equatable {
    /** The unique Arrangement identifier related to these user preferences */
    public var arrangementId: String
    /** The name that can be assigned by the user to label the arrangement */
    public var alias: String?
    /** User indicator whether to show or hide the arrangement on the front end */
    public var visible: Bool?
    /** Indication whether an arrangement can be favorable for a user */
    public var favorite: Bool?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AccountUserPreferences.Builder class.")
    public init(arrangementId: String, alias: String? = nil, visible: Bool? = nil, favorite: Bool? = nil, additions: [String: String]? = nil) {
        self.arrangementId = arrangementId
        self.alias = alias
        self.visible = visible
        self.favorite = favorite
        self.additions = additions
    }

    /// Builder class for AccountUserPreferences DTO.
    public final class Builder: Equatable {
        /** The unique Arrangement identifier related to these user preferences */
        public let arrangementId: String
        /** The name that can be assigned by the user to label the arrangement */
        public private(set) var alias: String?
        /** User indicator whether to show or hide the arrangement on the front end */
        public private(set) var visible: Bool?
        /** Indication whether an arrangement can be favorable for a user */
        public private(set) var favorite: Bool?
        public private(set) var additions: [String: String]?

        public init(arrangementId: String) {
            self.arrangementId = arrangementId
        }

        /// Setter method for alias property.
        public func set(alias: String?) -> Self {
            self.alias = alias
            return self
        }
        /// Setter method for visible property.
        public func set(visible: Bool?) -> Self {
            self.visible = visible
            return self
        }
        /// Setter method for favorite property.
        public func set(favorite: Bool?) -> Self {
            self.favorite = favorite
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AccountUserPreferences DTO.
        public func build() -> AccountUserPreferences {
            return AccountUserPreferences(arrangementId: arrangementId, 
                    alias: alias, 
                    visible: visible, 
                    favorite: favorite, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.arrangementId == rhs.arrangementId &&
            lhs.alias == rhs.alias &&
            lhs.visible == rhs.visible &&
            lhs.favorite == rhs.favorite &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(arrangementId, forKey: "arrangementId")
        try container.encodeIfPresent(alias, forKey: "alias")
        try container.encodeIfPresent(visible, forKey: "visible")
        try container.encodeIfPresent(favorite, forKey: "favorite")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        arrangementId = try container.decode(String.self, forKey: "arrangementId")
        alias = try container.decodeIfPresent(String.self, forKey: "alias")
        visible = try container.decodeIfPresent(Bool.self, forKey: "visible")
        favorite = try container.decodeIfPresent(Bool.self, forKey: "favorite")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AccountUserPreferences, rhs: AccountUserPreferences) -> Bool {
        return lhs.arrangementId == rhs.arrangementId &&
        lhs.alias == rhs.alias &&
        lhs.visible == rhs.visible &&
        lhs.favorite == rhs.favorite &&
        lhs.additions == rhs.additions
    }


}
