//
// ViewBalanceAggregation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** Contains the amount of the aggregations and the number of arrangements that were taken into account. */
public struct ViewBalanceAggregation: Codable, Equatable {
    /** Aggregated amount by currency. */
    public var amount: String?
    public var numberOfAccounts: Int64?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ViewBalanceAggregation.Builder class.")
    public init(amount: String? = nil, numberOfAccounts: Int64? = nil) {
        self.amount = amount
        self.numberOfAccounts = numberOfAccounts
    }

    /// Builder class for ViewBalanceAggregation DTO.
    public final class Builder: Equatable {
        /** Aggregated amount by currency. */
        public private(set) var amount: String?
        public private(set) var numberOfAccounts: Int64?

        public init() {
        }

        /// Setter method for amount property.
        public func set(amount: String?) -> Self {
            self.amount = amount
            return self
        }
        /// Setter method for numberOfAccounts property.
        public func set(numberOfAccounts: Int64?) -> Self {
            self.numberOfAccounts = numberOfAccounts
            return self
        }

        /// Builder initializer method for ViewBalanceAggregation DTO.
        public func build() -> ViewBalanceAggregation {
            return ViewBalanceAggregation(amount: amount, 
                    numberOfAccounts: numberOfAccounts)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.amount == rhs.amount &&
            lhs.numberOfAccounts == rhs.numberOfAccounts
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(numberOfAccounts, forKey: "numberOfAccounts")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        amount = try container.decodeIfPresent(String.self, forKey: "amount")
        numberOfAccounts = try container.decodeIfPresent(Int64.self, forKey: "numberOfAccounts")
    }

    public static func ==(lhs: ViewBalanceAggregation, rhs: ViewBalanceAggregation) -> Bool {
        return lhs.amount == rhs.amount &&
        lhs.numberOfAccounts == rhs.numberOfAccounts
    }


}
