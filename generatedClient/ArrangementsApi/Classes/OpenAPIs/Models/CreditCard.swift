//
// CreditCard.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct CreditCard: Codable, Equatable {
    public var bookedBalance: String?
    public var availableBalance: String?
    public var creditLimit: String?
    /** First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk. */
    public var number: String?
    /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
    public var currency: String?
    /** Defines if urgent transfer is allowed. */
    public var urgentTransferAllowed: Bool?
    public var cardNumber: Double?
    /** The number of the account the credit card transactions settle on (so actually the reference to the settlement account of the card)? */
    public var creditCardAccountNumber: String?
    /** Expiration date of a credit card, after which is no longer valid. */
    public var validThru: Date?
    /** The interest rate or rates which would be used for a particular arrangement. */
    public var applicableInterestRate: Double?
    public var remainingCredit: Double?
    public var outstandingPayment: Double?
    /** The minimum payment set a percentage of balance, or a fixed cash amount. */
    public var minimumPayment: Double?
    /** Minimum Payment Due Date shown on your monthly statement to remain in good standing. */
    public var minimumPaymentDueDate: Date?
    /** The annualized cost of credit or debt capital computed as the percentage ratio of interest to the principal. In the case of credit cards, the account interest rate is the annual percentage that is added monthly to the outstanding balance due on a credit card. */
    public var accountInterestRate: Double?
    /** Party(s) with a relationship to the account. */
    public var accountHolderNames: String?
    /** Monetary amount of the used overdraft. */
    public var creditLimitUsage: Double?
    /** Overdraft Interest is an interest applied to the account for any time throughout the month when the account is overdrawn. */
    public var creditLimitInterestRate: Double?
    public var accruedInterest: Double?
    /** An optional list of the maskable attributes that can be unmasked. */
    public var unmaskableAttributes: [MaskableAttribute]?
    /** Reference to the product of which the arrangement is an instantiation. */
    public var id: String?
    public var name: String?
    /** Represents an arrangement by it&#39;s correct naming identifier. It could be account alias or user alias depending on the journey selected by the financial institution. If none of those is set, the arrangement name will be used.  */
    public var displayName: String?
    /** Defines if transfer to another party is allowed. */
    public var externalTransferAllowed: Bool?
    /** Defines if cross currency transfer is allowed */
    public var crossCurrencyAllowed: Bool?
    /** The label/name that is used for the respective product kind */
    public var productKindName: String?
    /** The label/name that is used to label a specific product type */
    public var productTypeName: String?
    /** The name that can be assigned by the bank to label the arrangement. */
    public var bankAlias: String?
    /** Indicate if the account is regular or external */
    public var sourceId: String?
    /** indicator whether to show or hide the arrangement on the widget */
    public var visible: Bool?
    public var accountOpeningDate: Date?
    /** Last date of parameter update for the arrangement. */
    public var lastUpdateDate: Date?
    public var userPreferences: UserPreferences?
    public var state: StateItem?
    /** Reference to the parent of the arrangement. */
    public var parentId: String?
    public var subArrangements: [BaseProduct]?
    /** Financial institution ID */
    public var financialInstitutionId: Int64?
    /** Last synchronization datetime */
    public var lastSyncDate: Date?
    public var cardDetails: CardDetails?
    public var interestDetails: InterestDetails?
    /** The reservation of a portion of a credit or debit balance for the cost of services not yet rendered.  */
    public var reservedAmount: Double?
    /** The limitation in periodic saving transfers or withdrawals. In the case of the US, Regulation D enables for a maximum of 6 monthly savings transfers or withdrawals.  */
    public var remainingPeriodicTransfers: Double?
    /** Another country-specific bank identification number or code: the Fedwire Routing Number in the US or another country-specific identifier.  */
    public var bankBranchCode2: String?
    /** The last day of the forthcoming billing cycle. */
    public var nextClosingDate: Date?
    /** The date in which the arrangement has been overdue since. */
    public var overdueSince: Date?
    /** DEPRECATED: the attribute is deprecated and ignored by Backend  */
    public var credentialsExpired: Bool?
    /** Synchronization statuses an account can have on the provider side after it has been aggregated.  */
    public var externalAccountStatus: String?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of CreditCard.Builder class.")
    public init(bookedBalance: String? = nil, availableBalance: String? = nil, creditLimit: String? = nil, number: String? = nil, currency: String? = nil, urgentTransferAllowed: Bool? = nil, cardNumber: Double? = nil, creditCardAccountNumber: String? = nil, validThru: Date? = nil, applicableInterestRate: Double? = nil, remainingCredit: Double? = nil, outstandingPayment: Double? = nil, minimumPayment: Double? = nil, minimumPaymentDueDate: Date? = nil, accountInterestRate: Double? = nil, accountHolderNames: String? = nil, creditLimitUsage: Double? = nil, creditLimitInterestRate: Double? = nil, accruedInterest: Double? = nil, unmaskableAttributes: [MaskableAttribute]? = nil, id: String? = nil, name: String? = nil, displayName: String? = nil, externalTransferAllowed: Bool? = nil, crossCurrencyAllowed: Bool? = nil, productKindName: String? = nil, productTypeName: String? = nil, bankAlias: String? = nil, sourceId: String? = nil, visible: Bool? = nil, accountOpeningDate: Date? = nil, lastUpdateDate: Date? = nil, userPreferences: UserPreferences? = nil, state: StateItem? = nil, parentId: String? = nil, subArrangements: [BaseProduct]? = nil, financialInstitutionId: Int64? = nil, lastSyncDate: Date? = nil, cardDetails: CardDetails? = nil, interestDetails: InterestDetails? = nil, reservedAmount: Double? = nil, remainingPeriodicTransfers: Double? = nil, bankBranchCode2: String? = nil, nextClosingDate: Date? = nil, overdueSince: Date? = nil, credentialsExpired: Bool? = nil, externalAccountStatus: String? = nil, additions: [String: String]? = nil) {
        self.bookedBalance = bookedBalance
        self.availableBalance = availableBalance
        self.creditLimit = creditLimit
        self.number = number
        self.currency = currency
        self.urgentTransferAllowed = urgentTransferAllowed
        self.cardNumber = cardNumber
        self.creditCardAccountNumber = creditCardAccountNumber
        self.validThru = validThru
        self.applicableInterestRate = applicableInterestRate
        self.remainingCredit = remainingCredit
        self.outstandingPayment = outstandingPayment
        self.minimumPayment = minimumPayment
        self.minimumPaymentDueDate = minimumPaymentDueDate
        self.accountInterestRate = accountInterestRate
        self.accountHolderNames = accountHolderNames
        self.creditLimitUsage = creditLimitUsage
        self.creditLimitInterestRate = creditLimitInterestRate
        self.accruedInterest = accruedInterest
        self.unmaskableAttributes = unmaskableAttributes
        self.id = id
        self.name = name
        self.displayName = displayName
        self.externalTransferAllowed = externalTransferAllowed
        self.crossCurrencyAllowed = crossCurrencyAllowed
        self.productKindName = productKindName
        self.productTypeName = productTypeName
        self.bankAlias = bankAlias
        self.sourceId = sourceId
        self.visible = visible
        self.accountOpeningDate = accountOpeningDate
        self.lastUpdateDate = lastUpdateDate
        self.userPreferences = userPreferences
        self.state = state
        self.parentId = parentId
        self.subArrangements = subArrangements
        self.financialInstitutionId = financialInstitutionId
        self.lastSyncDate = lastSyncDate
        self.cardDetails = cardDetails
        self.interestDetails = interestDetails
        self.reservedAmount = reservedAmount
        self.remainingPeriodicTransfers = remainingPeriodicTransfers
        self.bankBranchCode2 = bankBranchCode2
        self.nextClosingDate = nextClosingDate
        self.overdueSince = overdueSince
        self.credentialsExpired = credentialsExpired
        self.externalAccountStatus = externalAccountStatus
        self.additions = additions
    }

    /// Builder class for CreditCard DTO.
    public final class Builder: Equatable {
        public private(set) var bookedBalance: String?
        public private(set) var availableBalance: String?
        public private(set) var creditLimit: String?
        /** First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk. */
        public private(set) var number: String?
        /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
        public private(set) var currency: String?
        /** Defines if urgent transfer is allowed. */
        public private(set) var urgentTransferAllowed: Bool?
        public private(set) var cardNumber: Double?
        /** The number of the account the credit card transactions settle on (so actually the reference to the settlement account of the card)? */
        public private(set) var creditCardAccountNumber: String?
        /** Expiration date of a credit card, after which is no longer valid. */
        public private(set) var validThru: Date?
        /** The interest rate or rates which would be used for a particular arrangement. */
        public private(set) var applicableInterestRate: Double?
        public private(set) var remainingCredit: Double?
        public private(set) var outstandingPayment: Double?
        /** The minimum payment set a percentage of balance, or a fixed cash amount. */
        public private(set) var minimumPayment: Double?
        /** Minimum Payment Due Date shown on your monthly statement to remain in good standing. */
        public private(set) var minimumPaymentDueDate: Date?
        /** The annualized cost of credit or debt capital computed as the percentage ratio of interest to the principal. In the case of credit cards, the account interest rate is the annual percentage that is added monthly to the outstanding balance due on a credit card. */
        public private(set) var accountInterestRate: Double?
        /** Party(s) with a relationship to the account. */
        public private(set) var accountHolderNames: String?
        /** Monetary amount of the used overdraft. */
        public private(set) var creditLimitUsage: Double?
        /** Overdraft Interest is an interest applied to the account for any time throughout the month when the account is overdrawn. */
        public private(set) var creditLimitInterestRate: Double?
        public private(set) var accruedInterest: Double?
        /** An optional list of the maskable attributes that can be unmasked. */
        public private(set) var unmaskableAttributes: [MaskableAttribute]?
        /** Reference to the product of which the arrangement is an instantiation. */
        public private(set) var id: String?
        public private(set) var name: String?
        /** Represents an arrangement by it&#39;s correct naming identifier. It could be account alias or user alias depending on the journey selected by the financial institution. If none of those is set, the arrangement name will be used.  */
        public private(set) var displayName: String?
        /** Defines if transfer to another party is allowed. */
        public private(set) var externalTransferAllowed: Bool?
        /** Defines if cross currency transfer is allowed */
        public private(set) var crossCurrencyAllowed: Bool?
        /** The label/name that is used for the respective product kind */
        public private(set) var productKindName: String?
        /** The label/name that is used to label a specific product type */
        public private(set) var productTypeName: String?
        /** The name that can be assigned by the bank to label the arrangement. */
        public private(set) var bankAlias: String?
        /** Indicate if the account is regular or external */
        public private(set) var sourceId: String?
        /** indicator whether to show or hide the arrangement on the widget */
        public private(set) var visible: Bool?
        public private(set) var accountOpeningDate: Date?
        /** Last date of parameter update for the arrangement. */
        public private(set) var lastUpdateDate: Date?
        public private(set) var userPreferences: UserPreferences?
        public private(set) var state: StateItem?
        /** Reference to the parent of the arrangement. */
        public private(set) var parentId: String?
        public private(set) var subArrangements: [BaseProduct]?
        /** Financial institution ID */
        public private(set) var financialInstitutionId: Int64?
        /** Last synchronization datetime */
        public private(set) var lastSyncDate: Date?
        public private(set) var cardDetails: CardDetails?
        public private(set) var interestDetails: InterestDetails?
        /** The reservation of a portion of a credit or debit balance for the cost of services not yet rendered.  */
        public private(set) var reservedAmount: Double?
        /** The limitation in periodic saving transfers or withdrawals. In the case of the US, Regulation D enables for a maximum of 6 monthly savings transfers or withdrawals.  */
        public private(set) var remainingPeriodicTransfers: Double?
        /** Another country-specific bank identification number or code: the Fedwire Routing Number in the US or another country-specific identifier.  */
        public private(set) var bankBranchCode2: String?
        /** The last day of the forthcoming billing cycle. */
        public private(set) var nextClosingDate: Date?
        /** The date in which the arrangement has been overdue since. */
        public private(set) var overdueSince: Date?
        /** DEPRECATED: the attribute is deprecated and ignored by Backend  */
        public private(set) var credentialsExpired: Bool?
        /** Synchronization statuses an account can have on the provider side after it has been aggregated.  */
        public private(set) var externalAccountStatus: String?
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for bookedBalance property.
        public func set(bookedBalance: String?) -> Self {
            self.bookedBalance = bookedBalance
            return self
        }
        /// Setter method for availableBalance property.
        public func set(availableBalance: String?) -> Self {
            self.availableBalance = availableBalance
            return self
        }
        /// Setter method for creditLimit property.
        public func set(creditLimit: String?) -> Self {
            self.creditLimit = creditLimit
            return self
        }
        /// Setter method for number property.
        public func set(number: String?) -> Self {
            self.number = number
            return self
        }
        /// Setter method for currency property.
        public func set(currency: String?) -> Self {
            self.currency = currency
            return self
        }
        /// Setter method for urgentTransferAllowed property.
        public func set(urgentTransferAllowed: Bool?) -> Self {
            self.urgentTransferAllowed = urgentTransferAllowed
            return self
        }
        /// Setter method for cardNumber property.
        public func set(cardNumber: Double?) -> Self {
            self.cardNumber = cardNumber
            return self
        }
        /// Setter method for creditCardAccountNumber property.
        public func set(creditCardAccountNumber: String?) -> Self {
            self.creditCardAccountNumber = creditCardAccountNumber
            return self
        }
        /// Setter method for validThru property.
        public func set(validThru: Date?) -> Self {
            self.validThru = validThru
            return self
        }
        /// Setter method for applicableInterestRate property.
        public func set(applicableInterestRate: Double?) -> Self {
            self.applicableInterestRate = applicableInterestRate
            return self
        }
        /// Setter method for remainingCredit property.
        public func set(remainingCredit: Double?) -> Self {
            self.remainingCredit = remainingCredit
            return self
        }
        /// Setter method for outstandingPayment property.
        public func set(outstandingPayment: Double?) -> Self {
            self.outstandingPayment = outstandingPayment
            return self
        }
        /// Setter method for minimumPayment property.
        public func set(minimumPayment: Double?) -> Self {
            self.minimumPayment = minimumPayment
            return self
        }
        /// Setter method for minimumPaymentDueDate property.
        public func set(minimumPaymentDueDate: Date?) -> Self {
            self.minimumPaymentDueDate = minimumPaymentDueDate
            return self
        }
        /// Setter method for accountInterestRate property.
        public func set(accountInterestRate: Double?) -> Self {
            self.accountInterestRate = accountInterestRate
            return self
        }
        /// Setter method for accountHolderNames property.
        public func set(accountHolderNames: String?) -> Self {
            self.accountHolderNames = accountHolderNames
            return self
        }
        /// Setter method for creditLimitUsage property.
        public func set(creditLimitUsage: Double?) -> Self {
            self.creditLimitUsage = creditLimitUsage
            return self
        }
        /// Setter method for creditLimitInterestRate property.
        public func set(creditLimitInterestRate: Double?) -> Self {
            self.creditLimitInterestRate = creditLimitInterestRate
            return self
        }
        /// Setter method for accruedInterest property.
        public func set(accruedInterest: Double?) -> Self {
            self.accruedInterest = accruedInterest
            return self
        }
        /// Setter method for unmaskableAttributes property.
        public func set(unmaskableAttributes: [MaskableAttribute]?) -> Self {
            self.unmaskableAttributes = unmaskableAttributes
            return self
        }
        /// Setter method for id property.
        public func set(id: String?) -> Self {
            self.id = id
            return self
        }
        /// Setter method for name property.
        public func set(name: String?) -> Self {
            self.name = name
            return self
        }
        /// Setter method for displayName property.
        public func set(displayName: String?) -> Self {
            self.displayName = displayName
            return self
        }
        /// Setter method for externalTransferAllowed property.
        public func set(externalTransferAllowed: Bool?) -> Self {
            self.externalTransferAllowed = externalTransferAllowed
            return self
        }
        /// Setter method for crossCurrencyAllowed property.
        public func set(crossCurrencyAllowed: Bool?) -> Self {
            self.crossCurrencyAllowed = crossCurrencyAllowed
            return self
        }
        /// Setter method for productKindName property.
        public func set(productKindName: String?) -> Self {
            self.productKindName = productKindName
            return self
        }
        /// Setter method for productTypeName property.
        public func set(productTypeName: String?) -> Self {
            self.productTypeName = productTypeName
            return self
        }
        /// Setter method for bankAlias property.
        public func set(bankAlias: String?) -> Self {
            self.bankAlias = bankAlias
            return self
        }
        /// Setter method for sourceId property.
        public func set(sourceId: String?) -> Self {
            self.sourceId = sourceId
            return self
        }
        /// Setter method for visible property.
        public func set(visible: Bool?) -> Self {
            self.visible = visible
            return self
        }
        /// Setter method for accountOpeningDate property.
        public func set(accountOpeningDate: Date?) -> Self {
            self.accountOpeningDate = accountOpeningDate
            return self
        }
        /// Setter method for lastUpdateDate property.
        public func set(lastUpdateDate: Date?) -> Self {
            self.lastUpdateDate = lastUpdateDate
            return self
        }
        /// Setter method for userPreferences property.
        public func set(userPreferences: UserPreferences?) -> Self {
            self.userPreferences = userPreferences
            return self
        }
        /// Setter method for state property.
        public func set(state: StateItem?) -> Self {
            self.state = state
            return self
        }
        /// Setter method for parentId property.
        public func set(parentId: String?) -> Self {
            self.parentId = parentId
            return self
        }
        /// Setter method for subArrangements property.
        public func set(subArrangements: [BaseProduct]?) -> Self {
            self.subArrangements = subArrangements
            return self
        }
        /// Setter method for financialInstitutionId property.
        public func set(financialInstitutionId: Int64?) -> Self {
            self.financialInstitutionId = financialInstitutionId
            return self
        }
        /// Setter method for lastSyncDate property.
        public func set(lastSyncDate: Date?) -> Self {
            self.lastSyncDate = lastSyncDate
            return self
        }
        /// Setter method for cardDetails property.
        public func set(cardDetails: CardDetails?) -> Self {
            self.cardDetails = cardDetails
            return self
        }
        /// Setter method for interestDetails property.
        public func set(interestDetails: InterestDetails?) -> Self {
            self.interestDetails = interestDetails
            return self
        }
        /// Setter method for reservedAmount property.
        public func set(reservedAmount: Double?) -> Self {
            self.reservedAmount = reservedAmount
            return self
        }
        /// Setter method for remainingPeriodicTransfers property.
        public func set(remainingPeriodicTransfers: Double?) -> Self {
            self.remainingPeriodicTransfers = remainingPeriodicTransfers
            return self
        }
        /// Setter method for bankBranchCode2 property.
        public func set(bankBranchCode2: String?) -> Self {
            self.bankBranchCode2 = bankBranchCode2
            return self
        }
        /// Setter method for nextClosingDate property.
        public func set(nextClosingDate: Date?) -> Self {
            self.nextClosingDate = nextClosingDate
            return self
        }
        /// Setter method for overdueSince property.
        public func set(overdueSince: Date?) -> Self {
            self.overdueSince = overdueSince
            return self
        }
        /// Setter method for credentialsExpired property.
        public func set(credentialsExpired: Bool?) -> Self {
            self.credentialsExpired = credentialsExpired
            return self
        }
        /// Setter method for externalAccountStatus property.
        public func set(externalAccountStatus: String?) -> Self {
            self.externalAccountStatus = externalAccountStatus
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for CreditCard DTO.
        public func build() -> CreditCard {
            return CreditCard(bookedBalance: bookedBalance, 
                    availableBalance: availableBalance, 
                    creditLimit: creditLimit, 
                    number: number, 
                    currency: currency, 
                    urgentTransferAllowed: urgentTransferAllowed, 
                    cardNumber: cardNumber, 
                    creditCardAccountNumber: creditCardAccountNumber, 
                    validThru: validThru, 
                    applicableInterestRate: applicableInterestRate, 
                    remainingCredit: remainingCredit, 
                    outstandingPayment: outstandingPayment, 
                    minimumPayment: minimumPayment, 
                    minimumPaymentDueDate: minimumPaymentDueDate, 
                    accountInterestRate: accountInterestRate, 
                    accountHolderNames: accountHolderNames, 
                    creditLimitUsage: creditLimitUsage, 
                    creditLimitInterestRate: creditLimitInterestRate, 
                    accruedInterest: accruedInterest, 
                    unmaskableAttributes: unmaskableAttributes, 
                    id: id, 
                    name: name, 
                    displayName: displayName, 
                    externalTransferAllowed: externalTransferAllowed, 
                    crossCurrencyAllowed: crossCurrencyAllowed, 
                    productKindName: productKindName, 
                    productTypeName: productTypeName, 
                    bankAlias: bankAlias, 
                    sourceId: sourceId, 
                    visible: visible, 
                    accountOpeningDate: accountOpeningDate, 
                    lastUpdateDate: lastUpdateDate, 
                    userPreferences: userPreferences, 
                    state: state, 
                    parentId: parentId, 
                    subArrangements: subArrangements, 
                    financialInstitutionId: financialInstitutionId, 
                    lastSyncDate: lastSyncDate, 
                    cardDetails: cardDetails, 
                    interestDetails: interestDetails, 
                    reservedAmount: reservedAmount, 
                    remainingPeriodicTransfers: remainingPeriodicTransfers, 
                    bankBranchCode2: bankBranchCode2, 
                    nextClosingDate: nextClosingDate, 
                    overdueSince: overdueSince, 
                    credentialsExpired: credentialsExpired, 
                    externalAccountStatus: externalAccountStatus, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.bookedBalance == rhs.bookedBalance &&
            lhs.availableBalance == rhs.availableBalance &&
            lhs.creditLimit == rhs.creditLimit &&
            lhs.number == rhs.number &&
            lhs.currency == rhs.currency &&
            lhs.urgentTransferAllowed == rhs.urgentTransferAllowed &&
            lhs.cardNumber == rhs.cardNumber &&
            lhs.creditCardAccountNumber == rhs.creditCardAccountNumber &&
            lhs.validThru == rhs.validThru &&
            lhs.applicableInterestRate == rhs.applicableInterestRate &&
            lhs.remainingCredit == rhs.remainingCredit &&
            lhs.outstandingPayment == rhs.outstandingPayment &&
            lhs.minimumPayment == rhs.minimumPayment &&
            lhs.minimumPaymentDueDate == rhs.minimumPaymentDueDate &&
            lhs.accountInterestRate == rhs.accountInterestRate &&
            lhs.accountHolderNames == rhs.accountHolderNames &&
            lhs.creditLimitUsage == rhs.creditLimitUsage &&
            lhs.creditLimitInterestRate == rhs.creditLimitInterestRate &&
            lhs.accruedInterest == rhs.accruedInterest &&
            lhs.unmaskableAttributes == rhs.unmaskableAttributes &&
            lhs.id == rhs.id &&
            lhs.name == rhs.name &&
            lhs.displayName == rhs.displayName &&
            lhs.externalTransferAllowed == rhs.externalTransferAllowed &&
            lhs.crossCurrencyAllowed == rhs.crossCurrencyAllowed &&
            lhs.productKindName == rhs.productKindName &&
            lhs.productTypeName == rhs.productTypeName &&
            lhs.bankAlias == rhs.bankAlias &&
            lhs.sourceId == rhs.sourceId &&
            lhs.visible == rhs.visible &&
            lhs.accountOpeningDate == rhs.accountOpeningDate &&
            lhs.lastUpdateDate == rhs.lastUpdateDate &&
            lhs.userPreferences == rhs.userPreferences &&
            lhs.state == rhs.state &&
            lhs.parentId == rhs.parentId &&
            lhs.subArrangements == rhs.subArrangements &&
            lhs.financialInstitutionId == rhs.financialInstitutionId &&
            lhs.lastSyncDate == rhs.lastSyncDate &&
            lhs.cardDetails == rhs.cardDetails &&
            lhs.interestDetails == rhs.interestDetails &&
            lhs.reservedAmount == rhs.reservedAmount &&
            lhs.remainingPeriodicTransfers == rhs.remainingPeriodicTransfers &&
            lhs.bankBranchCode2 == rhs.bankBranchCode2 &&
            lhs.nextClosingDate == rhs.nextClosingDate &&
            lhs.overdueSince == rhs.overdueSince &&
            lhs.credentialsExpired == rhs.credentialsExpired &&
            lhs.externalAccountStatus == rhs.externalAccountStatus &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(bookedBalance, forKey: "bookedBalance")
        try container.encodeIfPresent(availableBalance, forKey: "availableBalance")
        try container.encodeIfPresent(creditLimit, forKey: "creditLimit")
        try container.encodeIfPresent(number, forKey: "number")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(urgentTransferAllowed, forKey: "urgentTransferAllowed")
        try container.encodeIfPresent(cardNumber, forKey: "cardNumber")
        try container.encodeIfPresent(creditCardAccountNumber, forKey: "creditCardAccountNumber")
        let validThruStr: String?
        if let validThru = validThru {
            validThruStr = CodableHelper.dateTimeFormatter.string(from: validThru)
        } else {
            validThruStr = nil
        }
        try container.encodeIfPresent(validThruStr, forKey: "validThru")
        try container.encodeIfPresent(applicableInterestRate, forKey: "applicableInterestRate")
        try container.encodeIfPresent(remainingCredit, forKey: "remainingCredit")
        try container.encodeIfPresent(outstandingPayment, forKey: "outstandingPayment")
        try container.encodeIfPresent(minimumPayment, forKey: "minimumPayment")
        let minimumPaymentDueDateStr: String?
        if let minimumPaymentDueDate = minimumPaymentDueDate {
            minimumPaymentDueDateStr = CodableHelper.dateTimeFormatter.string(from: minimumPaymentDueDate)
        } else {
            minimumPaymentDueDateStr = nil
        }
        try container.encodeIfPresent(minimumPaymentDueDateStr, forKey: "minimumPaymentDueDate")
        try container.encodeIfPresent(accountInterestRate, forKey: "accountInterestRate")
        try container.encodeIfPresent(accountHolderNames, forKey: "accountHolderNames")
        try container.encodeIfPresent(creditLimitUsage, forKey: "creditLimitUsage")
        try container.encodeIfPresent(creditLimitInterestRate, forKey: "creditLimitInterestRate")
        try container.encodeIfPresent(accruedInterest, forKey: "accruedInterest")
        try container.encodeIfPresent(unmaskableAttributes, forKey: "unmaskableAttributes")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(displayName, forKey: "displayName")
        try container.encodeIfPresent(externalTransferAllowed, forKey: "externalTransferAllowed")
        try container.encodeIfPresent(crossCurrencyAllowed, forKey: "crossCurrencyAllowed")
        try container.encodeIfPresent(productKindName, forKey: "productKindName")
        try container.encodeIfPresent(productTypeName, forKey: "productTypeName")
        try container.encodeIfPresent(bankAlias, forKey: "bankAlias")
        try container.encodeIfPresent(sourceId, forKey: "sourceId")
        try container.encodeIfPresent(visible, forKey: "visible")
        let accountOpeningDateStr: String?
        if let accountOpeningDate = accountOpeningDate {
            accountOpeningDateStr = CodableHelper.dateTimeFormatter.string(from: accountOpeningDate)
        } else {
            accountOpeningDateStr = nil
        }
        try container.encodeIfPresent(accountOpeningDateStr, forKey: "accountOpeningDate")
        let lastUpdateDateStr: String?
        if let lastUpdateDate = lastUpdateDate {
            lastUpdateDateStr = CodableHelper.dateTimeFormatter.string(from: lastUpdateDate)
        } else {
            lastUpdateDateStr = nil
        }
        try container.encodeIfPresent(lastUpdateDateStr, forKey: "lastUpdateDate")
        try container.encodeIfPresent(userPreferences, forKey: "userPreferences")
        try container.encodeIfPresent(state, forKey: "state")
        try container.encodeIfPresent(parentId, forKey: "parentId")
        try container.encodeIfPresent(subArrangements, forKey: "subArrangements")
        try container.encodeIfPresent(financialInstitutionId, forKey: "financialInstitutionId")
        let lastSyncDateStr: String?
        if let lastSyncDate = lastSyncDate {
            lastSyncDateStr = CodableHelper.dateTimeFormatter.string(from: lastSyncDate)
        } else {
            lastSyncDateStr = nil
        }
        try container.encodeIfPresent(lastSyncDateStr, forKey: "lastSyncDate")
        try container.encodeIfPresent(cardDetails, forKey: "cardDetails")
        try container.encodeIfPresent(interestDetails, forKey: "interestDetails")
        try container.encodeIfPresent(reservedAmount, forKey: "reservedAmount")
        try container.encodeIfPresent(remainingPeriodicTransfers, forKey: "remainingPeriodicTransfers")
        try container.encodeIfPresent(bankBranchCode2, forKey: "bankBranchCode2")
        let nextClosingDateStr: String?
        if let nextClosingDate = nextClosingDate {
            nextClosingDateStr = CodableHelper.dateFormatter.string(from: nextClosingDate)
        } else {
            nextClosingDateStr = nil
        }
        try container.encodeIfPresent(nextClosingDateStr, forKey: "nextClosingDate")
        let overdueSinceStr: String?
        if let overdueSince = overdueSince {
            overdueSinceStr = CodableHelper.dateFormatter.string(from: overdueSince)
        } else {
            overdueSinceStr = nil
        }
        try container.encodeIfPresent(overdueSinceStr, forKey: "overdueSince")
        try container.encodeIfPresent(credentialsExpired, forKey: "credentialsExpired")
        try container.encodeIfPresent(externalAccountStatus, forKey: "externalAccountStatus")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        bookedBalance = try container.decodeIfPresent(String.self, forKey: "bookedBalance")
        availableBalance = try container.decodeIfPresent(String.self, forKey: "availableBalance")
        creditLimit = try container.decodeIfPresent(String.self, forKey: "creditLimit")
        number = try container.decodeIfPresent(String.self, forKey: "number")
        currency = try container.decodeIfPresent(String.self, forKey: "currency")
        urgentTransferAllowed = try container.decodeIfPresent(Bool.self, forKey: "urgentTransferAllowed")
        cardNumber = try container.decodeIfPresent(Double.self, forKey: "cardNumber")
        creditCardAccountNumber = try container.decodeIfPresent(String.self, forKey: "creditCardAccountNumber")
        validThru = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "validThru")
        applicableInterestRate = try container.decodeIfPresent(Double.self, forKey: "applicableInterestRate")
        remainingCredit = try container.decodeIfPresent(Double.self, forKey: "remainingCredit")
        outstandingPayment = try container.decodeIfPresent(Double.self, forKey: "outstandingPayment")
        minimumPayment = try container.decodeIfPresent(Double.self, forKey: "minimumPayment")
        minimumPaymentDueDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "minimumPaymentDueDate")
        accountInterestRate = try container.decodeIfPresent(Double.self, forKey: "accountInterestRate")
        accountHolderNames = try container.decodeIfPresent(String.self, forKey: "accountHolderNames")
        creditLimitUsage = try container.decodeIfPresent(Double.self, forKey: "creditLimitUsage")
        creditLimitInterestRate = try container.decodeIfPresent(Double.self, forKey: "creditLimitInterestRate")
        accruedInterest = try container.decodeIfPresent(Double.self, forKey: "accruedInterest")
        unmaskableAttributes = try container.decodeIfPresent([MaskableAttribute].self, forKey: "unmaskableAttributes")
        id = try container.decodeIfPresent(String.self, forKey: "id")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        displayName = try container.decodeIfPresent(String.self, forKey: "displayName")
        externalTransferAllowed = try container.decodeIfPresent(Bool.self, forKey: "externalTransferAllowed")
        crossCurrencyAllowed = try container.decodeIfPresent(Bool.self, forKey: "crossCurrencyAllowed")
        productKindName = try container.decodeIfPresent(String.self, forKey: "productKindName")
        productTypeName = try container.decodeIfPresent(String.self, forKey: "productTypeName")
        bankAlias = try container.decodeIfPresent(String.self, forKey: "bankAlias")
        sourceId = try container.decodeIfPresent(String.self, forKey: "sourceId")
        visible = try container.decodeIfPresent(Bool.self, forKey: "visible")
        accountOpeningDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "accountOpeningDate")
        lastUpdateDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "lastUpdateDate")
        userPreferences = try container.decodeIfPresent(UserPreferences.self, forKey: "userPreferences")
        state = try container.decodeIfPresent(StateItem.self, forKey: "state")
        parentId = try container.decodeIfPresent(String.self, forKey: "parentId")
        subArrangements = try container.decodeIfPresent([BaseProduct].self, forKey: "subArrangements")
        financialInstitutionId = try container.decodeIfPresent(Int64.self, forKey: "financialInstitutionId")
        lastSyncDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "lastSyncDate")
        cardDetails = try container.decodeIfPresent(CardDetails.self, forKey: "cardDetails")
        interestDetails = try container.decodeIfPresent(InterestDetails.self, forKey: "interestDetails")
        reservedAmount = try container.decodeIfPresent(Double.self, forKey: "reservedAmount")
        remainingPeriodicTransfers = try container.decodeIfPresent(Double.self, forKey: "remainingPeriodicTransfers")
        bankBranchCode2 = try container.decodeIfPresent(String.self, forKey: "bankBranchCode2")
        nextClosingDate = try CodableHelper.decodeDateIfPresent(from: container, forKey: "nextClosingDate")
        overdueSince = try CodableHelper.decodeDateIfPresent(from: container, forKey: "overdueSince")
        credentialsExpired = try container.decodeIfPresent(Bool.self, forKey: "credentialsExpired")
        externalAccountStatus = try container.decodeIfPresent(String.self, forKey: "externalAccountStatus")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: CreditCard, rhs: CreditCard) -> Bool {
        return lhs.bookedBalance == rhs.bookedBalance &&
        lhs.availableBalance == rhs.availableBalance &&
        lhs.creditLimit == rhs.creditLimit &&
        lhs.number == rhs.number &&
        lhs.currency == rhs.currency &&
        lhs.urgentTransferAllowed == rhs.urgentTransferAllowed &&
        lhs.cardNumber == rhs.cardNumber &&
        lhs.creditCardAccountNumber == rhs.creditCardAccountNumber &&
        lhs.validThru == rhs.validThru &&
        lhs.applicableInterestRate == rhs.applicableInterestRate &&
        lhs.remainingCredit == rhs.remainingCredit &&
        lhs.outstandingPayment == rhs.outstandingPayment &&
        lhs.minimumPayment == rhs.minimumPayment &&
        lhs.minimumPaymentDueDate == rhs.minimumPaymentDueDate &&
        lhs.accountInterestRate == rhs.accountInterestRate &&
        lhs.accountHolderNames == rhs.accountHolderNames &&
        lhs.creditLimitUsage == rhs.creditLimitUsage &&
        lhs.creditLimitInterestRate == rhs.creditLimitInterestRate &&
        lhs.accruedInterest == rhs.accruedInterest &&
        lhs.unmaskableAttributes == rhs.unmaskableAttributes &&
        lhs.id == rhs.id &&
        lhs.name == rhs.name &&
        lhs.displayName == rhs.displayName &&
        lhs.externalTransferAllowed == rhs.externalTransferAllowed &&
        lhs.crossCurrencyAllowed == rhs.crossCurrencyAllowed &&
        lhs.productKindName == rhs.productKindName &&
        lhs.productTypeName == rhs.productTypeName &&
        lhs.bankAlias == rhs.bankAlias &&
        lhs.sourceId == rhs.sourceId &&
        lhs.visible == rhs.visible &&
        lhs.accountOpeningDate == rhs.accountOpeningDate &&
        lhs.lastUpdateDate == rhs.lastUpdateDate &&
        lhs.userPreferences == rhs.userPreferences &&
        lhs.state == rhs.state &&
        lhs.parentId == rhs.parentId &&
        lhs.subArrangements == rhs.subArrangements &&
        lhs.financialInstitutionId == rhs.financialInstitutionId &&
        lhs.lastSyncDate == rhs.lastSyncDate &&
        lhs.cardDetails == rhs.cardDetails &&
        lhs.interestDetails == rhs.interestDetails &&
        lhs.reservedAmount == rhs.reservedAmount &&
        lhs.remainingPeriodicTransfers == rhs.remainingPeriodicTransfers &&
        lhs.bankBranchCode2 == rhs.bankBranchCode2 &&
        lhs.nextClosingDate == rhs.nextClosingDate &&
        lhs.overdueSince == rhs.overdueSince &&
        lhs.credentialsExpired == rhs.credentialsExpired &&
        lhs.externalAccountStatus == rhs.externalAccountStatus &&
        lhs.additions == rhs.additions
    }


}
