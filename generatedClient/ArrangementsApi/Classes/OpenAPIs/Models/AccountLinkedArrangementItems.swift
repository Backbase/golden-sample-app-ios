//
// AccountLinkedArrangementItems.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct AccountLinkedArrangementItems: Codable, Equatable {
    /** total number of elements matching the query */
    public var totalElements: Int64
    public var arrangementElements: [AccountLinkedArrangementItem]
    /** total number of arrangements which are related with legal entity from core bank */
    public var totalElementsFromCore: Int64?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AccountLinkedArrangementItems.Builder class.")
    public init(totalElements: Int64, arrangementElements: [AccountLinkedArrangementItem], totalElementsFromCore: Int64? = nil, additions: [String: String]? = nil) {
        self.totalElements = totalElements
        self.arrangementElements = arrangementElements
        self.totalElementsFromCore = totalElementsFromCore
        self.additions = additions
    }

    /// Builder class for AccountLinkedArrangementItems DTO.
    public final class Builder: Equatable {
        /** total number of elements matching the query */
        public let totalElements: Int64
        public let arrangementElements: [AccountLinkedArrangementItem]
        /** total number of arrangements which are related with legal entity from core bank */
        public private(set) var totalElementsFromCore: Int64?
        public private(set) var additions: [String: String]?

        public init(totalElements: Int64, arrangementElements: [AccountLinkedArrangementItem]) {
            self.totalElements = totalElements
            self.arrangementElements = arrangementElements
        }

        /// Setter method for totalElementsFromCore property.
        public func set(totalElementsFromCore: Int64?) -> Self {
            self.totalElementsFromCore = totalElementsFromCore
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AccountLinkedArrangementItems DTO.
        public func build() -> AccountLinkedArrangementItems {
            return AccountLinkedArrangementItems(totalElements: totalElements, 
                    arrangementElements: arrangementElements, 
                    totalElementsFromCore: totalElementsFromCore, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.totalElements == rhs.totalElements &&
            lhs.arrangementElements == rhs.arrangementElements &&
            lhs.totalElementsFromCore == rhs.totalElementsFromCore &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(totalElements, forKey: "totalElements")
        try container.encode(arrangementElements, forKey: "arrangementElements")
        try container.encodeIfPresent(totalElementsFromCore, forKey: "totalElementsFromCore")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        totalElements = try container.decode(Int64.self, forKey: "totalElements")
        arrangementElements = try container.decode([AccountLinkedArrangementItem].self, forKey: "arrangementElements")
        totalElementsFromCore = try container.decodeIfPresent(Int64.self, forKey: "totalElementsFromCore")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AccountLinkedArrangementItems, rhs: AccountLinkedArrangementItems) -> Bool {
        return lhs.totalElements == rhs.totalElements &&
        lhs.arrangementElements == rhs.arrangementElements &&
        lhs.totalElementsFromCore == rhs.totalElementsFromCore &&
        lhs.additions == rhs.additions
    }


}
