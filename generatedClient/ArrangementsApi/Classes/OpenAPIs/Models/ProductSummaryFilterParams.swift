//
// ProductSummaryFilterParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ProductSummaryFilterParams: Codable, Equatable {
    /** Skip over pages of elements by specifying a start value for the query. */
    public var from: Int? = 0
    /** Limit the number of elements in the response. */
    public var size: Int?
    public var legalEntityIds: [String]
    public var arrangementIds: [String]?
    public var ignoredArrangementIds: [String]?
    /** Full text search */
    public var searchTerm: String?
    /** Product kind names to be ignored */
    public var ignoredProductKindNames: [String]?
    public var orderBy: [ProductSummaryFilterParamOrderBy]?
    public var direction: SortDirection?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ProductSummaryFilterParams.Builder class.")
    public init(from: Int? = nil, size: Int? = nil, legalEntityIds: [String], arrangementIds: [String]? = nil, ignoredArrangementIds: [String]? = nil, searchTerm: String? = nil, ignoredProductKindNames: [String]? = nil, orderBy: [ProductSummaryFilterParamOrderBy]? = nil, direction: SortDirection? = nil) {
        self.from = from
        self.size = size
        self.legalEntityIds = legalEntityIds
        self.arrangementIds = arrangementIds
        self.ignoredArrangementIds = ignoredArrangementIds
        self.searchTerm = searchTerm
        self.ignoredProductKindNames = ignoredProductKindNames
        self.orderBy = orderBy
        self.direction = direction
    }

    /// Builder class for ProductSummaryFilterParams DTO.
    public final class Builder: Equatable {
        /** Skip over pages of elements by specifying a start value for the query. */
        public private(set) var from: Int? = 0
        /** Limit the number of elements in the response. */
        public private(set) var size: Int?
        public let legalEntityIds: [String]
        public private(set) var arrangementIds: [String]?
        public private(set) var ignoredArrangementIds: [String]?
        /** Full text search */
        public private(set) var searchTerm: String?
        /** Product kind names to be ignored */
        public private(set) var ignoredProductKindNames: [String]?
        public private(set) var orderBy: [ProductSummaryFilterParamOrderBy]?
        public private(set) var direction: SortDirection?

        public init(legalEntityIds: [String]) {
            self.legalEntityIds = legalEntityIds
        }

        /// Setter method for from property.
        public func set(from: Int?) -> Self {
            self.from = from
            return self
        }
        /// Setter method for size property.
        public func set(size: Int?) -> Self {
            self.size = size
            return self
        }
        /// Setter method for arrangementIds property.
        public func set(arrangementIds: [String]?) -> Self {
            self.arrangementIds = arrangementIds
            return self
        }
        /// Setter method for ignoredArrangementIds property.
        public func set(ignoredArrangementIds: [String]?) -> Self {
            self.ignoredArrangementIds = ignoredArrangementIds
            return self
        }
        /// Setter method for searchTerm property.
        public func set(searchTerm: String?) -> Self {
            self.searchTerm = searchTerm
            return self
        }
        /// Setter method for ignoredProductKindNames property.
        public func set(ignoredProductKindNames: [String]?) -> Self {
            self.ignoredProductKindNames = ignoredProductKindNames
            return self
        }
        /// Setter method for orderBy property.
        public func set(orderBy: [ProductSummaryFilterParamOrderBy]?) -> Self {
            self.orderBy = orderBy
            return self
        }
        /// Setter method for direction property.
        public func set(direction: SortDirection?) -> Self {
            self.direction = direction
            return self
        }

        /// Builder initializer method for ProductSummaryFilterParams DTO.
        public func build() -> ProductSummaryFilterParams {
            return ProductSummaryFilterParams(from: from, 
                    size: size, 
                    legalEntityIds: legalEntityIds, 
                    arrangementIds: arrangementIds, 
                    ignoredArrangementIds: ignoredArrangementIds, 
                    searchTerm: searchTerm, 
                    ignoredProductKindNames: ignoredProductKindNames, 
                    orderBy: orderBy, 
                    direction: direction)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.from == rhs.from &&
            lhs.size == rhs.size &&
            lhs.legalEntityIds == rhs.legalEntityIds &&
            lhs.arrangementIds == rhs.arrangementIds &&
            lhs.ignoredArrangementIds == rhs.ignoredArrangementIds &&
            lhs.searchTerm == rhs.searchTerm &&
            lhs.ignoredProductKindNames == rhs.ignoredProductKindNames &&
            lhs.orderBy == rhs.orderBy &&
            lhs.direction == rhs.direction
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(from, forKey: "from")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encode(legalEntityIds, forKey: "legalEntityIds")
        try container.encodeIfPresent(arrangementIds, forKey: "arrangementIds")
        try container.encodeIfPresent(ignoredArrangementIds, forKey: "ignoredArrangementIds")
        try container.encodeIfPresent(searchTerm, forKey: "searchTerm")
        try container.encodeIfPresent(ignoredProductKindNames, forKey: "ignoredProductKindNames")
        try container.encodeIfPresent(orderBy, forKey: "orderBy")
        try container.encodeIfPresent(direction, forKey: "direction")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        from = try container.decodeIfPresent(Int.self, forKey: "from")
        size = try container.decodeIfPresent(Int.self, forKey: "size")
        legalEntityIds = try container.decode([String].self, forKey: "legalEntityIds")
        arrangementIds = try container.decodeIfPresent([String].self, forKey: "arrangementIds")
        ignoredArrangementIds = try container.decodeIfPresent([String].self, forKey: "ignoredArrangementIds")
        searchTerm = try container.decodeIfPresent(String.self, forKey: "searchTerm")
        ignoredProductKindNames = try container.decodeIfPresent([String].self, forKey: "ignoredProductKindNames")
        orderBy = try container.decodeIfPresent([ProductSummaryFilterParamOrderBy].self, forKey: "orderBy")
        direction = try container.decodeIfPresent(SortDirection.self, forKey: "direction")
    }

    public static func ==(lhs: ProductSummaryFilterParams, rhs: ProductSummaryFilterParams) -> Bool {
        return lhs.from == rhs.from &&
        lhs.size == rhs.size &&
        lhs.legalEntityIds == rhs.legalEntityIds &&
        lhs.arrangementIds == rhs.arrangementIds &&
        lhs.ignoredArrangementIds == rhs.ignoredArrangementIds &&
        lhs.searchTerm == rhs.searchTerm &&
        lhs.ignoredProductKindNames == rhs.ignoredProductKindNames &&
        lhs.orderBy == rhs.orderBy &&
        lhs.direction == rhs.direction
    }


}
