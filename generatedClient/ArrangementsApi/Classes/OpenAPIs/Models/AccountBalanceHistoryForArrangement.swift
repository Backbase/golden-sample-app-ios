//
// AccountBalanceHistoryForArrangement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct AccountBalanceHistoryForArrangement: Codable, Equatable {
    /** A unique identifier for the Arrangement object that is generated and used Internally in DBS */
    public var arrangementId: String
    /** A collection of objects that defines the balance item */
    public var balanceHistory: [AccountBalanceHistoryItem]
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AccountBalanceHistoryForArrangement.Builder class.")
    public init(arrangementId: String, balanceHistory: [AccountBalanceHistoryItem], additions: [String: String]? = nil) {
        self.arrangementId = arrangementId
        self.balanceHistory = balanceHistory
        self.additions = additions
    }

    /// Builder class for AccountBalanceHistoryForArrangement DTO.
    public final class Builder: Equatable {
        /** A unique identifier for the Arrangement object that is generated and used Internally in DBS */
        public let arrangementId: String
        /** A collection of objects that defines the balance item */
        public let balanceHistory: [AccountBalanceHistoryItem]
        public private(set) var additions: [String: String]?

        public init(arrangementId: String, balanceHistory: [AccountBalanceHistoryItem]) {
            self.arrangementId = arrangementId
            self.balanceHistory = balanceHistory
        }

        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AccountBalanceHistoryForArrangement DTO.
        public func build() -> AccountBalanceHistoryForArrangement {
            return AccountBalanceHistoryForArrangement(arrangementId: arrangementId, 
                    balanceHistory: balanceHistory, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.arrangementId == rhs.arrangementId &&
            lhs.balanceHistory == rhs.balanceHistory &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(arrangementId, forKey: "arrangementId")
        try container.encode(balanceHistory, forKey: "balanceHistory")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        arrangementId = try container.decode(String.self, forKey: "arrangementId")
        balanceHistory = try container.decode([AccountBalanceHistoryItem].self, forKey: "balanceHistory")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AccountBalanceHistoryForArrangement, rhs: AccountBalanceHistoryForArrangement) -> Bool {
        return lhs.arrangementId == rhs.arrangementId &&
        lhs.balanceHistory == rhs.balanceHistory &&
        lhs.additions == rhs.additions
    }


}
