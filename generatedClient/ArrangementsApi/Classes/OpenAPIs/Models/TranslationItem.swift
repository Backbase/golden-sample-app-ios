//
// TranslationItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** Translation item */
public struct TranslationItem: Codable, Equatable {
    /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
    public var locale: String?
    public var localeTranslations: [LocaleTranslationItem]?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TranslationItem.Builder class.")
    public init(locale: String? = nil, localeTranslations: [LocaleTranslationItem]? = nil, additions: [String: String]? = nil) {
        self.locale = locale
        self.localeTranslations = localeTranslations
        self.additions = additions
    }

    /// Builder class for TranslationItem DTO.
    public final class Builder: Equatable {
        /** Defines the translation natural language as specified in ISO 639-1, and territory two-letter form of ISO 3166. */
        public private(set) var locale: String?
        public private(set) var localeTranslations: [LocaleTranslationItem]?
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for locale property.
        public func set(locale: String?) -> Self {
            self.locale = locale
            return self
        }
        /// Setter method for localeTranslations property.
        public func set(localeTranslations: [LocaleTranslationItem]?) -> Self {
            self.localeTranslations = localeTranslations
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for TranslationItem DTO.
        public func build() -> TranslationItem {
            return TranslationItem(locale: locale, 
                    localeTranslations: localeTranslations, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.locale == rhs.locale &&
            lhs.localeTranslations == rhs.localeTranslations &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(locale, forKey: "locale")
        try container.encodeIfPresent(localeTranslations, forKey: "localeTranslations")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        locale = try container.decodeIfPresent(String.self, forKey: "locale")
        localeTranslations = try container.decodeIfPresent([LocaleTranslationItem].self, forKey: "localeTranslations")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: TranslationItem, rhs: TranslationItem) -> Bool {
        return lhs.locale == rhs.locale &&
        lhs.localeTranslations == rhs.localeTranslations &&
        lhs.additions == rhs.additions
    }


}
