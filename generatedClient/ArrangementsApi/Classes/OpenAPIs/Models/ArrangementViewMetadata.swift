//
// ArrangementViewMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ArrangementViewMetadata: Codable, Equatable {
    public var totalCount: Int64?
    /** Allows to aggregate balances by currency. There might be different balance agreggations. */
    public var balanceAggregations: [String: [String: ViewBalanceAggregation]]?
    /** Allows to project data from the collected arrangements. For example: distinct values such us acceptable values for filters or counts.  */
    public var projections: [String: [String]]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ArrangementViewMetadata.Builder class.")
    public init(totalCount: Int64? = nil, balanceAggregations: [String: [String: ViewBalanceAggregation]]? = nil, projections: [String: [String]]? = nil) {
        self.totalCount = totalCount
        self.balanceAggregations = balanceAggregations
        self.projections = projections
    }

    /// Builder class for ArrangementViewMetadata DTO.
    public final class Builder: Equatable {
        public private(set) var totalCount: Int64?
        /** Allows to aggregate balances by currency. There might be different balance agreggations. */
        public private(set) var balanceAggregations: [String: [String: ViewBalanceAggregation]]?
        /** Allows to project data from the collected arrangements. For example: distinct values such us acceptable values for filters or counts.  */
        public private(set) var projections: [String: [String]]?

        public init() {
        }

        /// Setter method for totalCount property.
        public func set(totalCount: Int64?) -> Self {
            self.totalCount = totalCount
            return self
        }
        /// Setter method for balanceAggregations property.
        public func set(balanceAggregations: [String: [String: ViewBalanceAggregation]]?) -> Self {
            self.balanceAggregations = balanceAggregations
            return self
        }
        /// Setter method for projections property.
        public func set(projections: [String: [String]]?) -> Self {
            self.projections = projections
            return self
        }

        /// Builder initializer method for ArrangementViewMetadata DTO.
        public func build() -> ArrangementViewMetadata {
            return ArrangementViewMetadata(totalCount: totalCount, 
                    balanceAggregations: balanceAggregations, 
                    projections: projections)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.totalCount == rhs.totalCount &&
            lhs.balanceAggregations == rhs.balanceAggregations &&
            lhs.projections == rhs.projections
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(totalCount, forKey: "totalCount")
        try container.encodeIfPresent(balanceAggregations, forKey: "balanceAggregations")
        try container.encodeIfPresent(projections, forKey: "projections")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        totalCount = try container.decodeIfPresent(Int64.self, forKey: "totalCount")
        balanceAggregations = try container.decodeIfPresent([String: [String: ViewBalanceAggregation]].self, forKey: "balanceAggregations")
        projections = try container.decodeIfPresent([String: [String]].self, forKey: "projections")
    }

    public static func ==(lhs: ArrangementViewMetadata, rhs: ArrangementViewMetadata) -> Bool {
        return lhs.totalCount == rhs.totalCount &&
        lhs.balanceAggregations == rhs.balanceAggregations &&
        lhs.projections == rhs.projections
    }


}
