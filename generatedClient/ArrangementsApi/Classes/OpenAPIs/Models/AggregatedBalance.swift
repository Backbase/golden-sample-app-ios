//
// AggregatedBalance.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** Schema defining aggregated balance amount in given currency and number of arrangements. */
public struct AggregatedBalance: Codable, Equatable {
    /** Number of arrangements that are aggregated for this currency. */
    public var numberOfArrangements: Int
    /** The amount in the specified currency */
    public var amount: String
    /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
    public var currencyCode: String
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AggregatedBalance.Builder class.")
    public init(numberOfArrangements: Int, amount: String, currencyCode: String, additions: [String: String]? = nil) {
        self.numberOfArrangements = numberOfArrangements
        self.amount = amount
        self.currencyCode = currencyCode
        self.additions = additions
    }

    /// Builder class for AggregatedBalance DTO.
    public final class Builder: Equatable {
        /** Number of arrangements that are aggregated for this currency. */
        public let numberOfArrangements: Int
        /** The amount in the specified currency */
        public let amount: String
        /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
        public let currencyCode: String
        public private(set) var additions: [String: String]?

        public init(numberOfArrangements: Int, amount: String, currencyCode: String) {
            self.numberOfArrangements = numberOfArrangements
            self.amount = amount
            self.currencyCode = currencyCode
        }

        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AggregatedBalance DTO.
        public func build() -> AggregatedBalance {
            return AggregatedBalance(numberOfArrangements: numberOfArrangements, 
                    amount: amount, 
                    currencyCode: currencyCode, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.numberOfArrangements == rhs.numberOfArrangements &&
            lhs.amount == rhs.amount &&
            lhs.currencyCode == rhs.currencyCode &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(numberOfArrangements, forKey: "numberOfArrangements")
        try container.encode(amount, forKey: "amount")
        try container.encode(currencyCode, forKey: "currencyCode")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        numberOfArrangements = try container.decode(Int.self, forKey: "numberOfArrangements")
        amount = try container.decode(String.self, forKey: "amount")
        currencyCode = try container.decode(String.self, forKey: "currencyCode")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AggregatedBalance, rhs: AggregatedBalance) -> Bool {
        return lhs.numberOfArrangements == rhs.numberOfArrangements &&
        lhs.amount == rhs.amount &&
        lhs.currencyCode == rhs.currencyCode &&
        lhs.additions == rhs.additions
    }


}
