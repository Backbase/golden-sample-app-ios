//
// ArrangementGroupMetadata.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ArrangementGroupMetadata: Codable, Equatable {
    public var totalCount: Int64?
    /** Pointer to a specific item in the dataset, its value can be use to go to previous page. When it is not returned that means there is not any previous page.  */
    public var prevCursor: String?
    /** Pointer to the first arrangement of the next page the group.  The consumers of the endpoint should not make any assumption about the cursor value or its structure and they should use values exclusively provided by the endpoint.  Null cursor means there is no next page.  */
    public var nextCursor: String?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ArrangementGroupMetadata.Builder class.")
    public init(totalCount: Int64? = nil, prevCursor: String? = nil, nextCursor: String? = nil) {
        self.totalCount = totalCount
        self.prevCursor = prevCursor
        self.nextCursor = nextCursor
    }

    /// Builder class for ArrangementGroupMetadata DTO.
    public final class Builder: Equatable {
        public private(set) var totalCount: Int64?
        /** Pointer to a specific item in the dataset, its value can be use to go to previous page. When it is not returned that means there is not any previous page.  */
        public private(set) var prevCursor: String?
        /** Pointer to the first arrangement of the next page the group.  The consumers of the endpoint should not make any assumption about the cursor value or its structure and they should use values exclusively provided by the endpoint.  Null cursor means there is no next page.  */
        public private(set) var nextCursor: String?

        public init() {
        }

        /// Setter method for totalCount property.
        public func set(totalCount: Int64?) -> Self {
            self.totalCount = totalCount
            return self
        }
        /// Setter method for prevCursor property.
        public func set(prevCursor: String?) -> Self {
            self.prevCursor = prevCursor
            return self
        }
        /// Setter method for nextCursor property.
        public func set(nextCursor: String?) -> Self {
            self.nextCursor = nextCursor
            return self
        }

        /// Builder initializer method for ArrangementGroupMetadata DTO.
        public func build() -> ArrangementGroupMetadata {
            return ArrangementGroupMetadata(totalCount: totalCount, 
                    prevCursor: prevCursor, 
                    nextCursor: nextCursor)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.totalCount == rhs.totalCount &&
            lhs.prevCursor == rhs.prevCursor &&
            lhs.nextCursor == rhs.nextCursor
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(totalCount, forKey: "totalCount")
        try container.encodeIfPresent(prevCursor, forKey: "prevCursor")
        try container.encodeIfPresent(nextCursor, forKey: "nextCursor")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        totalCount = try container.decodeIfPresent(Int64.self, forKey: "totalCount")
        prevCursor = try container.decodeIfPresent(String.self, forKey: "prevCursor")
        nextCursor = try container.decodeIfPresent(String.self, forKey: "nextCursor")
    }

    public static func ==(lhs: ArrangementGroupMetadata, rhs: ArrangementGroupMetadata) -> Bool {
        return lhs.totalCount == rhs.totalCount &&
        lhs.prevCursor == rhs.prevCursor &&
        lhs.nextCursor == rhs.nextCursor
    }


}
