//
// PaginationDefTrait.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct PaginationDefTrait: Codable, Equatable {
    /** Skip over pages of elements by specifying a start value for the query. */
    public var from: Int? = 0
    /** Limit the number of elements in the response (defaults to 10). */
    public var size: Int? = 10

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of PaginationDefTrait.Builder class.")
    public init(from: Int? = nil, size: Int? = nil) {
        self.from = from
        self.size = size
    }

    /// Builder class for PaginationDefTrait DTO.
    public final class Builder: Equatable {
        /** Skip over pages of elements by specifying a start value for the query. */
        public private(set) var from: Int? = 0
        /** Limit the number of elements in the response (defaults to 10). */
        public private(set) var size: Int? = 10

        public init() {
        }

        /// Setter method for from property.
        public func set(from: Int?) -> Self {
            self.from = from
            return self
        }
        /// Setter method for size property.
        public func set(size: Int?) -> Self {
            self.size = size
            return self
        }

        /// Builder initializer method for PaginationDefTrait DTO.
        public func build() -> PaginationDefTrait {
            return PaginationDefTrait(from: from, 
                    size: size)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.from == rhs.from &&
            lhs.size == rhs.size
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(from, forKey: "from")
        try container.encodeIfPresent(size, forKey: "size")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        from = try container.decodeIfPresent(Int.self, forKey: "from")
        size = try container.decodeIfPresent(Int.self, forKey: "size")
    }

    public static func ==(lhs: PaginationDefTrait, rhs: PaginationDefTrait) -> Bool {
        return lhs.from == rhs.from &&
        lhs.size == rhs.size
    }


}
