//
// ProductKindItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ProductKindItem: Codable, Equatable {
    /** Internal product kind used to save in DB. Since product kinds will be static this property is deprecated. */
    public var id: Int
    /** unique external identifier for the product kind */
    public var externalKindId: String?
    /** unique product kind name */
    public var kindName: String
    /** unique product kind uri */
    public var kindUri: String?
    public var translations: [TranslationItem]?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ProductKindItem.Builder class.")
    public init(id: Int, externalKindId: String? = nil, kindName: String, kindUri: String? = nil, translations: [TranslationItem]? = nil, additions: [String: String]? = nil) {
        self.id = id
        self.externalKindId = externalKindId
        self.kindName = kindName
        self.kindUri = kindUri
        self.translations = translations
        self.additions = additions
    }

    /// Builder class for ProductKindItem DTO.
    public final class Builder: Equatable {
        /** Internal product kind used to save in DB. Since product kinds will be static this property is deprecated. */
        public let id: Int
        /** unique external identifier for the product kind */
        public private(set) var externalKindId: String?
        /** unique product kind name */
        public let kindName: String
        /** unique product kind uri */
        public private(set) var kindUri: String?
        public private(set) var translations: [TranslationItem]?
        public private(set) var additions: [String: String]?

        public init(id: Int, kindName: String) {
            self.id = id
            self.kindName = kindName
        }

        /// Setter method for externalKindId property.
        public func set(externalKindId: String?) -> Self {
            self.externalKindId = externalKindId
            return self
        }
        /// Setter method for kindUri property.
        public func set(kindUri: String?) -> Self {
            self.kindUri = kindUri
            return self
        }
        /// Setter method for translations property.
        public func set(translations: [TranslationItem]?) -> Self {
            self.translations = translations
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for ProductKindItem DTO.
        public func build() -> ProductKindItem {
            return ProductKindItem(id: id, 
                    externalKindId: externalKindId, 
                    kindName: kindName, 
                    kindUri: kindUri, 
                    translations: translations, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.id == rhs.id &&
            lhs.externalKindId == rhs.externalKindId &&
            lhs.kindName == rhs.kindName &&
            lhs.kindUri == rhs.kindUri &&
            lhs.translations == rhs.translations &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(id, forKey: "id")
        try container.encodeIfPresent(externalKindId, forKey: "externalKindId")
        try container.encode(kindName, forKey: "kindName")
        try container.encodeIfPresent(kindUri, forKey: "kindUri")
        try container.encodeIfPresent(translations, forKey: "translations")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        id = try container.decode(Int.self, forKey: "id")
        externalKindId = try container.decodeIfPresent(String.self, forKey: "externalKindId")
        kindName = try container.decode(String.self, forKey: "kindName")
        kindUri = try container.decodeIfPresent(String.self, forKey: "kindUri")
        translations = try container.decodeIfPresent([TranslationItem].self, forKey: "translations")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: ProductKindItem, rhs: ProductKindItem) -> Bool {
        return lhs.id == rhs.id &&
        lhs.externalKindId == rhs.externalKindId &&
        lhs.kindName == rhs.kindName &&
        lhs.kindUri == rhs.kindUri &&
        lhs.translations == rhs.translations &&
        lhs.additions == rhs.additions
    }


}
