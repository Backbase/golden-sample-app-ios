//
// SavingsAccountProductKinds.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct SavingsAccountProductKinds: Codable, Equatable {
    public var products: [SavingsAccount]
    /** The label/name that is used for the respective product kind */
    public var name: String?
    public var aggregatedBalance: SummaryAggregatedBalance?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SavingsAccountProductKinds.Builder class.")
    public init(products: [SavingsAccount], name: String? = nil, aggregatedBalance: SummaryAggregatedBalance? = nil, additions: [String: String]? = nil) {
        self.products = products
        self.name = name
        self.aggregatedBalance = aggregatedBalance
        self.additions = additions
    }

    /// Builder class for SavingsAccountProductKinds DTO.
    public final class Builder: Equatable {
        public let products: [SavingsAccount]
        /** The label/name that is used for the respective product kind */
        public private(set) var name: String?
        public private(set) var aggregatedBalance: SummaryAggregatedBalance?
        public private(set) var additions: [String: String]?

        public init(products: [SavingsAccount]) {
            self.products = products
        }

        /// Setter method for name property.
        public func set(name: String?) -> Self {
            self.name = name
            return self
        }
        /// Setter method for aggregatedBalance property.
        public func set(aggregatedBalance: SummaryAggregatedBalance?) -> Self {
            self.aggregatedBalance = aggregatedBalance
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for SavingsAccountProductKinds DTO.
        public func build() -> SavingsAccountProductKinds {
            return SavingsAccountProductKinds(products: products, 
                    name: name, 
                    aggregatedBalance: aggregatedBalance, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.products == rhs.products &&
            lhs.name == rhs.name &&
            lhs.aggregatedBalance == rhs.aggregatedBalance &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(products, forKey: "products")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(aggregatedBalance, forKey: "aggregatedBalance")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        products = try container.decode([SavingsAccount].self, forKey: "products")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        aggregatedBalance = try container.decodeIfPresent(SummaryAggregatedBalance.self, forKey: "aggregatedBalance")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: SavingsAccountProductKinds, rhs: SavingsAccountProductKinds) -> Bool {
        return lhs.products == rhs.products &&
        lhs.name == rhs.name &&
        lhs.aggregatedBalance == rhs.aggregatedBalance &&
        lhs.additions == rhs.additions
    }


}
