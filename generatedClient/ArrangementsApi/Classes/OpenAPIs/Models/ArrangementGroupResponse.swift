//
// ArrangementGroupResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ArrangementGroupResponse: Codable, Equatable {
    public var metadata: ArrangementGroupMetadata?
    public var elements: [ArrangementGroupElement]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ArrangementGroupResponse.Builder class.")
    public init(metadata: ArrangementGroupMetadata? = nil, elements: [ArrangementGroupElement]? = nil) {
        self.metadata = metadata
        self.elements = elements
    }

    /// Builder class for ArrangementGroupResponse DTO.
    public final class Builder: Equatable {
        public private(set) var metadata: ArrangementGroupMetadata?
        public private(set) var elements: [ArrangementGroupElement]?

        public init() {
        }

        /// Setter method for metadata property.
        public func set(metadata: ArrangementGroupMetadata?) -> Self {
            self.metadata = metadata
            return self
        }
        /// Setter method for elements property.
        public func set(elements: [ArrangementGroupElement]?) -> Self {
            self.elements = elements
            return self
        }

        /// Builder initializer method for ArrangementGroupResponse DTO.
        public func build() -> ArrangementGroupResponse {
            return ArrangementGroupResponse(metadata: metadata, 
                    elements: elements)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.metadata == rhs.metadata &&
            lhs.elements == rhs.elements
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(metadata, forKey: "metadata")
        try container.encodeIfPresent(elements, forKey: "elements")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        metadata = try container.decodeIfPresent(ArrangementGroupMetadata.self, forKey: "metadata")
        elements = try container.decodeIfPresent([ArrangementGroupElement].self, forKey: "elements")
    }

    public static func ==(lhs: ArrangementGroupResponse, rhs: ArrangementGroupResponse) -> Bool {
        return lhs.metadata == rhs.metadata &&
        lhs.elements == rhs.elements
    }


}
