//
// ProductKindsResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ProductKindsResult: Codable, Equatable {
    public var productKinds: [ProductKindItem]
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ProductKindsResult.Builder class.")
    public init(productKinds: [ProductKindItem], additions: [String: String]? = nil) {
        self.productKinds = productKinds
        self.additions = additions
    }

    /// Builder class for ProductKindsResult DTO.
    public final class Builder: Equatable {
        public let productKinds: [ProductKindItem]
        public private(set) var additions: [String: String]?

        public init(productKinds: [ProductKindItem]) {
            self.productKinds = productKinds
        }

        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for ProductKindsResult DTO.
        public func build() -> ProductKindsResult {
            return ProductKindsResult(productKinds: productKinds, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.productKinds == rhs.productKinds &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encode(productKinds, forKey: "productKinds")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        productKinds = try container.decode([ProductKindItem].self, forKey: "productKinds")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: ProductKindsResult, rhs: ProductKindsResult) -> Bool {
        return lhs.productKinds == rhs.productKinds &&
        lhs.additions == rhs.additions
    }


}
