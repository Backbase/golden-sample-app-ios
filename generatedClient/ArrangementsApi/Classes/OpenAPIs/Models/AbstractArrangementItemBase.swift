//
// AbstractArrangementItemBase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct AbstractArrangementItemBase: Codable, Equatable {
    /** The name that can be assigned by the bank to label an arrangement */
    public var name: String?
    /** Amount of money available before any adjustments have been made for deposits in transit, checks that have not yet been cleared, reserve requirements and interest received */
    public var bookedBalance: Double?
    /** The amount that is available for transactions */
    public var availableBalance: Double?
    /** The credit limit (or overdraft limit) is the maximum amount of credit that the financial institution extends to the account holder for this arrangement. */
    public var creditLimit: Double?
    /** The International Bank Account Number. If specified, it must be a valid IBAN, otherwise an invalid value error could be raised.  */
    public var IBAN: String?
    /** BBAN is the country-specific bank account number. It is short for Basic Bank Account Number. Account numbers usually match the BBAN.  */
    public var BBAN: String?
    /** Bank Identifier Code - international bank code that identifies particular banks worldwide */
    public var BIC: String?
    /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
    public var currency: String
    /** Defines if transfer to another party is allowed */
    public var externalTransferAllowed: Bool?
    /** Defines if urgent transfer is allowed */
    public var urgentTransferAllowed: Bool?
    /** The interest that is earned or due, but not settled yet. Interest that is earned is also called credit interest or interest earned year to date. Interest that is due is also called debit interest. */
    public var accruedInterest: Double?
    /** First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk. */
    public var number: String?
    /** The amount that was (originally) contracted for the respective product. This is mainly used in the context of loans and deposits.  */
    public var principalAmount: Double?
    /** The total current value of all the securities kept in the account */
    public var currentInvestmentValue: Double?
    /** A unique identifier(number) assigned to identify the contract for the product */
    public var productNumber: String?
    /** A country-specific bank identification number or code: the sort code in the UK, the ACH routing number in the US, and the transit number in Canada  */
    public var bankBranchCode: String?
    /** The date of activation of the account in the bank&#39;s system */
    public var accountOpeningDate: Date?
    /** The annualized cost of credit or debt capital computed as the percentage ratio of interest to the principal. In the case of credit cards, the account interest rate is the annual percentage that is added monthly to the outstanding balance due on a credit card. */
    public var accountInterestRate: Double?
    /** The balance of the account on a specific date that needs to be used for the calculation of interest. NB! If no date is specified (like for the book date balance) the current date can be assumed. */
    public var valueDateBalance: Double?
    /** Monetary amount of the used overdraft */
    public var creditLimitUsage: Double?
    /** Overdraft Interest is an interest applied to the account for any time throughout the month when the account is overdrawn */
    public var creditLimitInterestRate: Double?
    /** The date after which overdraft will no longer be available to the account (renewed automatically or cancelled) */
    public var creditLimitExpiryDate: Date?
    /** The date on which the credit card becomes active */
    public var startDate: Date?
    public var termUnit: TimeUnit?
    /** Number for the Term Unit for the product arranged between Bank and customer */
    public var termNumber: Double?
    public var interestPaymentFrequencyUnit: TimeUnit?
    /** Number of times per year when the accumulated interest is settled to the account on a regular basis. The frequency could be yearly, half-yearly, quarterly, monthly, weekly, daily (or not at all, until maturity). */
    public var interestPaymentFrequencyNumber: Double?
    /** End term of a holding period */
    public var maturityDate: Date?
    /** Amount payable at the end of a holding period of a product (maturity date). For deposit all of the interest is usualy paid at maturity date (IF the term is shorter then one year). */
    public var maturityAmount: Double?
    /** Indicates whether or not an arrangement is to be continued after maturity automatically. Usually the product is renewed using the same principal and term unless renegotiation has taken place prior to expiration. */
    public var autoRenewalIndicator: Bool?
    /** Account for settlement of accumulated interest on a regular basis / Account that provides quick access to accumulated cash to facilitate daily settlements with other businesses */
    public var interestSettlementAccount: String?
    /** The remaining portion of the original loan amount, plus any interest that has been capitalized, that is still owed. Interest accrues on the outstanding principal balance / The value date balance of the arrangement */
    public var outstandingPrincipalAmount: Double?
    /** A fixed payment amount paid by a borrower to the bank at a specified date each calendar month. */
    public var monthlyInstalmentAmount: Double?
    /** The part of a debt that is overdue after missing one or more required payments. The amount of the arrears is the amount accrued from the date on which the first missed payment was due. */
    public var amountInArrear: Double?
    /** Minimum amount that a customer must have in an account in order to receive some sort of service, such as keeping the account open or receive interest */
    public var minimumRequiredBalance: Double?
    /** The number of the account the credit card transactions settle on (so actually the reference to the settlement account of the card) */
    public var creditCardAccountNumber: String?
    /** Expiration date of a credit card, after which is no longer valid */
    public var validThru: Date?
    /** The interest rate or rates which would be used for a particular arrangement */
    public var applicableInterestRate: Double?
    /** Amount of money left to spent from the Credit limit of the account. If the user has received a refund, or has transferredadditional funds to the arrangement, then the RemainingCredit can in some cases be greater than the CreditLimit. RemainingCredit &#x3D; CreditLimit - CreditLimitUsage + any additional funds transferred to the arrangement. */
    public var remainingCredit: Double?
    /** Outstanding payment refers to the outstanding [unpaid] balance, i.e., the current amount due */
    public var outstandingPayment: Double?
    /** The minimum payment set a percentage of balance, or a fixed cash amount */
    public var minimumPayment: Double?
    /** Minimum Payment Due Date shown on your monthly statement to remain in good standing */
    public var minimumPaymentDueDate: Date?
    /** The value of an asset to its owner, depending on his or her expectations */
    public var totalInvestmentValue: Double?
    /** Address of the Payer/Payee - Alternate address line for the account */
    public var accountHolderAddressLine1: String?
    /** Address of the Payer/Payee - Alternate address line for the account */
    public var accountHolderAddressLine2: String?
    /** Street name of the Payer/Payee - Alternate street name for the account. */
    public var accountHolderStreetName: String?
    /** Town of the Payer/Payee - Alternate town for the account */
    public var town: String?
    /** Post Code of the Payer/Payee - - Alternate post code for the account */
    public var postCode: String?
    /** Post Code of the Payer/Payee - - Alternate country sub division for the account */
    public var countrySubDivision: String?
    /** Party(s) with a relationship to the account. */
    public var accountHolderNames: String?
    /** Country of the account holder */
    public var accountHolderCountry: String?
    /** Indicator whether or not the arrangement can be used in payment orders as credit account - account to transfer TO */
    public var creditAccount: Bool?
    /** Indicator whether or not the arrangement can be used in payment orders as debit account - account to transfer FROM */
    public var debitAccount: Bool?
    /** Last date of balance (or other parameter) update for the given arrangement */
    public var lastUpdateDate: Date?
    /** The name that can be assigned by the customer to label the arrangement */
    public var bankAlias: String?
    /** Indicate if the account is regular or external */
    public var sourceId: String?
    /** External reference to the arrangement state */
    public var externalStateId: String?
    /** Indicate if the account has parent child relationship with another account */
    public var externalParentId: String?
    /** Financial institution ID */
    public var financialInstitutionId: Int64?
    /** Last synchronization datetime */
    public var lastSyncDate: Date?
    /** DEPRECATED: the attribute is deprecated and ignored by Backend  */
    public var credentialsExpired: Bool?
    /** Synchronization statuses an account can have on the provider side after it has been aggregated.  */
    public var externalAccountStatus: String?
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AbstractArrangementItemBase.Builder class.")
    public init(name: String? = nil, bookedBalance: Double? = nil, availableBalance: Double? = nil, creditLimit: Double? = nil, IBAN: String? = nil, BBAN: String? = nil, BIC: String? = nil, currency: String, externalTransferAllowed: Bool? = nil, urgentTransferAllowed: Bool? = nil, accruedInterest: Double? = nil, number: String? = nil, principalAmount: Double? = nil, currentInvestmentValue: Double? = nil, productNumber: String? = nil, bankBranchCode: String? = nil, accountOpeningDate: Date? = nil, accountInterestRate: Double? = nil, valueDateBalance: Double? = nil, creditLimitUsage: Double? = nil, creditLimitInterestRate: Double? = nil, creditLimitExpiryDate: Date? = nil, startDate: Date? = nil, termUnit: TimeUnit? = nil, termNumber: Double? = nil, interestPaymentFrequencyUnit: TimeUnit? = nil, interestPaymentFrequencyNumber: Double? = nil, maturityDate: Date? = nil, maturityAmount: Double? = nil, autoRenewalIndicator: Bool? = nil, interestSettlementAccount: String? = nil, outstandingPrincipalAmount: Double? = nil, monthlyInstalmentAmount: Double? = nil, amountInArrear: Double? = nil, minimumRequiredBalance: Double? = nil, creditCardAccountNumber: String? = nil, validThru: Date? = nil, applicableInterestRate: Double? = nil, remainingCredit: Double? = nil, outstandingPayment: Double? = nil, minimumPayment: Double? = nil, minimumPaymentDueDate: Date? = nil, totalInvestmentValue: Double? = nil, accountHolderAddressLine1: String? = nil, accountHolderAddressLine2: String? = nil, accountHolderStreetName: String? = nil, town: String? = nil, postCode: String? = nil, countrySubDivision: String? = nil, accountHolderNames: String? = nil, accountHolderCountry: String? = nil, creditAccount: Bool? = nil, debitAccount: Bool? = nil, lastUpdateDate: Date? = nil, bankAlias: String? = nil, sourceId: String? = nil, externalStateId: String? = nil, externalParentId: String? = nil, financialInstitutionId: Int64? = nil, lastSyncDate: Date? = nil, credentialsExpired: Bool? = nil, externalAccountStatus: String? = nil, additions: [String: String]? = nil) {
        self.name = name
        self.bookedBalance = bookedBalance
        self.availableBalance = availableBalance
        self.creditLimit = creditLimit
        self.IBAN = IBAN
        self.BBAN = BBAN
        self.BIC = BIC
        self.currency = currency
        self.externalTransferAllowed = externalTransferAllowed
        self.urgentTransferAllowed = urgentTransferAllowed
        self.accruedInterest = accruedInterest
        self.number = number
        self.principalAmount = principalAmount
        self.currentInvestmentValue = currentInvestmentValue
        self.productNumber = productNumber
        self.bankBranchCode = bankBranchCode
        self.accountOpeningDate = accountOpeningDate
        self.accountInterestRate = accountInterestRate
        self.valueDateBalance = valueDateBalance
        self.creditLimitUsage = creditLimitUsage
        self.creditLimitInterestRate = creditLimitInterestRate
        self.creditLimitExpiryDate = creditLimitExpiryDate
        self.startDate = startDate
        self.termUnit = termUnit
        self.termNumber = termNumber
        self.interestPaymentFrequencyUnit = interestPaymentFrequencyUnit
        self.interestPaymentFrequencyNumber = interestPaymentFrequencyNumber
        self.maturityDate = maturityDate
        self.maturityAmount = maturityAmount
        self.autoRenewalIndicator = autoRenewalIndicator
        self.interestSettlementAccount = interestSettlementAccount
        self.outstandingPrincipalAmount = outstandingPrincipalAmount
        self.monthlyInstalmentAmount = monthlyInstalmentAmount
        self.amountInArrear = amountInArrear
        self.minimumRequiredBalance = minimumRequiredBalance
        self.creditCardAccountNumber = creditCardAccountNumber
        self.validThru = validThru
        self.applicableInterestRate = applicableInterestRate
        self.remainingCredit = remainingCredit
        self.outstandingPayment = outstandingPayment
        self.minimumPayment = minimumPayment
        self.minimumPaymentDueDate = minimumPaymentDueDate
        self.totalInvestmentValue = totalInvestmentValue
        self.accountHolderAddressLine1 = accountHolderAddressLine1
        self.accountHolderAddressLine2 = accountHolderAddressLine2
        self.accountHolderStreetName = accountHolderStreetName
        self.town = town
        self.postCode = postCode
        self.countrySubDivision = countrySubDivision
        self.accountHolderNames = accountHolderNames
        self.accountHolderCountry = accountHolderCountry
        self.creditAccount = creditAccount
        self.debitAccount = debitAccount
        self.lastUpdateDate = lastUpdateDate
        self.bankAlias = bankAlias
        self.sourceId = sourceId
        self.externalStateId = externalStateId
        self.externalParentId = externalParentId
        self.financialInstitutionId = financialInstitutionId
        self.lastSyncDate = lastSyncDate
        self.credentialsExpired = credentialsExpired
        self.externalAccountStatus = externalAccountStatus
        self.additions = additions
    }

    /// Builder class for AbstractArrangementItemBase DTO.
    public final class Builder: Equatable {
        /** The name that can be assigned by the bank to label an arrangement */
        public private(set) var name: String?
        /** Amount of money available before any adjustments have been made for deposits in transit, checks that have not yet been cleared, reserve requirements and interest received */
        public private(set) var bookedBalance: Double?
        /** The amount that is available for transactions */
        public private(set) var availableBalance: Double?
        /** The credit limit (or overdraft limit) is the maximum amount of credit that the financial institution extends to the account holder for this arrangement. */
        public private(set) var creditLimit: Double?
        /** The International Bank Account Number. If specified, it must be a valid IBAN, otherwise an invalid value error could be raised.  */
        public private(set) var IBAN: String?
        /** BBAN is the country-specific bank account number. It is short for Basic Bank Account Number. Account numbers usually match the BBAN.  */
        public private(set) var BBAN: String?
        /** Bank Identifier Code - international bank code that identifies particular banks worldwide */
        public private(set) var BIC: String?
        /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
        public let currency: String
        /** Defines if transfer to another party is allowed */
        public private(set) var externalTransferAllowed: Bool?
        /** Defines if urgent transfer is allowed */
        public private(set) var urgentTransferAllowed: Bool?
        /** The interest that is earned or due, but not settled yet. Interest that is earned is also called credit interest or interest earned year to date. Interest that is due is also called debit interest. */
        public private(set) var accruedInterest: Double?
        /** First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk. */
        public private(set) var number: String?
        /** The amount that was (originally) contracted for the respective product. This is mainly used in the context of loans and deposits.  */
        public private(set) var principalAmount: Double?
        /** The total current value of all the securities kept in the account */
        public private(set) var currentInvestmentValue: Double?
        /** A unique identifier(number) assigned to identify the contract for the product */
        public private(set) var productNumber: String?
        /** A country-specific bank identification number or code: the sort code in the UK, the ACH routing number in the US, and the transit number in Canada  */
        public private(set) var bankBranchCode: String?
        /** The date of activation of the account in the bank&#39;s system */
        public private(set) var accountOpeningDate: Date?
        /** The annualized cost of credit or debt capital computed as the percentage ratio of interest to the principal. In the case of credit cards, the account interest rate is the annual percentage that is added monthly to the outstanding balance due on a credit card. */
        public private(set) var accountInterestRate: Double?
        /** The balance of the account on a specific date that needs to be used for the calculation of interest. NB! If no date is specified (like for the book date balance) the current date can be assumed. */
        public private(set) var valueDateBalance: Double?
        /** Monetary amount of the used overdraft */
        public private(set) var creditLimitUsage: Double?
        /** Overdraft Interest is an interest applied to the account for any time throughout the month when the account is overdrawn */
        public private(set) var creditLimitInterestRate: Double?
        /** The date after which overdraft will no longer be available to the account (renewed automatically or cancelled) */
        public private(set) var creditLimitExpiryDate: Date?
        /** The date on which the credit card becomes active */
        public private(set) var startDate: Date?
        public private(set) var termUnit: TimeUnit?
        /** Number for the Term Unit for the product arranged between Bank and customer */
        public private(set) var termNumber: Double?
        public private(set) var interestPaymentFrequencyUnit: TimeUnit?
        /** Number of times per year when the accumulated interest is settled to the account on a regular basis. The frequency could be yearly, half-yearly, quarterly, monthly, weekly, daily (or not at all, until maturity). */
        public private(set) var interestPaymentFrequencyNumber: Double?
        /** End term of a holding period */
        public private(set) var maturityDate: Date?
        /** Amount payable at the end of a holding period of a product (maturity date). For deposit all of the interest is usualy paid at maturity date (IF the term is shorter then one year). */
        public private(set) var maturityAmount: Double?
        /** Indicates whether or not an arrangement is to be continued after maturity automatically. Usually the product is renewed using the same principal and term unless renegotiation has taken place prior to expiration. */
        public private(set) var autoRenewalIndicator: Bool?
        /** Account for settlement of accumulated interest on a regular basis / Account that provides quick access to accumulated cash to facilitate daily settlements with other businesses */
        public private(set) var interestSettlementAccount: String?
        /** The remaining portion of the original loan amount, plus any interest that has been capitalized, that is still owed. Interest accrues on the outstanding principal balance / The value date balance of the arrangement */
        public private(set) var outstandingPrincipalAmount: Double?
        /** A fixed payment amount paid by a borrower to the bank at a specified date each calendar month. */
        public private(set) var monthlyInstalmentAmount: Double?
        /** The part of a debt that is overdue after missing one or more required payments. The amount of the arrears is the amount accrued from the date on which the first missed payment was due. */
        public private(set) var amountInArrear: Double?
        /** Minimum amount that a customer must have in an account in order to receive some sort of service, such as keeping the account open or receive interest */
        public private(set) var minimumRequiredBalance: Double?
        /** The number of the account the credit card transactions settle on (so actually the reference to the settlement account of the card) */
        public private(set) var creditCardAccountNumber: String?
        /** Expiration date of a credit card, after which is no longer valid */
        public private(set) var validThru: Date?
        /** The interest rate or rates which would be used for a particular arrangement */
        public private(set) var applicableInterestRate: Double?
        /** Amount of money left to spent from the Credit limit of the account. If the user has received a refund, or has transferredadditional funds to the arrangement, then the RemainingCredit can in some cases be greater than the CreditLimit. RemainingCredit &#x3D; CreditLimit - CreditLimitUsage + any additional funds transferred to the arrangement. */
        public private(set) var remainingCredit: Double?
        /** Outstanding payment refers to the outstanding [unpaid] balance, i.e., the current amount due */
        public private(set) var outstandingPayment: Double?
        /** The minimum payment set a percentage of balance, or a fixed cash amount */
        public private(set) var minimumPayment: Double?
        /** Minimum Payment Due Date shown on your monthly statement to remain in good standing */
        public private(set) var minimumPaymentDueDate: Date?
        /** The value of an asset to its owner, depending on his or her expectations */
        public private(set) var totalInvestmentValue: Double?
        /** Address of the Payer/Payee - Alternate address line for the account */
        public private(set) var accountHolderAddressLine1: String?
        /** Address of the Payer/Payee - Alternate address line for the account */
        public private(set) var accountHolderAddressLine2: String?
        /** Street name of the Payer/Payee - Alternate street name for the account. */
        public private(set) var accountHolderStreetName: String?
        /** Town of the Payer/Payee - Alternate town for the account */
        public private(set) var town: String?
        /** Post Code of the Payer/Payee - - Alternate post code for the account */
        public private(set) var postCode: String?
        /** Post Code of the Payer/Payee - - Alternate country sub division for the account */
        public private(set) var countrySubDivision: String?
        /** Party(s) with a relationship to the account. */
        public private(set) var accountHolderNames: String?
        /** Country of the account holder */
        public private(set) var accountHolderCountry: String?
        /** Indicator whether or not the arrangement can be used in payment orders as credit account - account to transfer TO */
        public private(set) var creditAccount: Bool?
        /** Indicator whether or not the arrangement can be used in payment orders as debit account - account to transfer FROM */
        public private(set) var debitAccount: Bool?
        /** Last date of balance (or other parameter) update for the given arrangement */
        public private(set) var lastUpdateDate: Date?
        /** The name that can be assigned by the customer to label the arrangement */
        public private(set) var bankAlias: String?
        /** Indicate if the account is regular or external */
        public private(set) var sourceId: String?
        /** External reference to the arrangement state */
        public private(set) var externalStateId: String?
        /** Indicate if the account has parent child relationship with another account */
        public private(set) var externalParentId: String?
        /** Financial institution ID */
        public private(set) var financialInstitutionId: Int64?
        /** Last synchronization datetime */
        public private(set) var lastSyncDate: Date?
        /** DEPRECATED: the attribute is deprecated and ignored by Backend  */
        public private(set) var credentialsExpired: Bool?
        /** Synchronization statuses an account can have on the provider side after it has been aggregated.  */
        public private(set) var externalAccountStatus: String?
        public private(set) var additions: [String: String]?

        public init(currency: String) {
            self.currency = currency
        }

        /// Setter method for name property.
        public func set(name: String?) -> Self {
            self.name = name
            return self
        }
        /// Setter method for bookedBalance property.
        public func set(bookedBalance: Double?) -> Self {
            self.bookedBalance = bookedBalance
            return self
        }
        /// Setter method for availableBalance property.
        public func set(availableBalance: Double?) -> Self {
            self.availableBalance = availableBalance
            return self
        }
        /// Setter method for creditLimit property.
        public func set(creditLimit: Double?) -> Self {
            self.creditLimit = creditLimit
            return self
        }
        /// Setter method for IBAN property.
        public func set(IBAN: String?) -> Self {
            self.IBAN = IBAN
            return self
        }
        /// Setter method for BBAN property.
        public func set(BBAN: String?) -> Self {
            self.BBAN = BBAN
            return self
        }
        /// Setter method for BIC property.
        public func set(BIC: String?) -> Self {
            self.BIC = BIC
            return self
        }
        /// Setter method for externalTransferAllowed property.
        public func set(externalTransferAllowed: Bool?) -> Self {
            self.externalTransferAllowed = externalTransferAllowed
            return self
        }
        /// Setter method for urgentTransferAllowed property.
        public func set(urgentTransferAllowed: Bool?) -> Self {
            self.urgentTransferAllowed = urgentTransferAllowed
            return self
        }
        /// Setter method for accruedInterest property.
        public func set(accruedInterest: Double?) -> Self {
            self.accruedInterest = accruedInterest
            return self
        }
        /// Setter method for number property.
        public func set(number: String?) -> Self {
            self.number = number
            return self
        }
        /// Setter method for principalAmount property.
        public func set(principalAmount: Double?) -> Self {
            self.principalAmount = principalAmount
            return self
        }
        /// Setter method for currentInvestmentValue property.
        public func set(currentInvestmentValue: Double?) -> Self {
            self.currentInvestmentValue = currentInvestmentValue
            return self
        }
        /// Setter method for productNumber property.
        public func set(productNumber: String?) -> Self {
            self.productNumber = productNumber
            return self
        }
        /// Setter method for bankBranchCode property.
        public func set(bankBranchCode: String?) -> Self {
            self.bankBranchCode = bankBranchCode
            return self
        }
        /// Setter method for accountOpeningDate property.
        public func set(accountOpeningDate: Date?) -> Self {
            self.accountOpeningDate = accountOpeningDate
            return self
        }
        /// Setter method for accountInterestRate property.
        public func set(accountInterestRate: Double?) -> Self {
            self.accountInterestRate = accountInterestRate
            return self
        }
        /// Setter method for valueDateBalance property.
        public func set(valueDateBalance: Double?) -> Self {
            self.valueDateBalance = valueDateBalance
            return self
        }
        /// Setter method for creditLimitUsage property.
        public func set(creditLimitUsage: Double?) -> Self {
            self.creditLimitUsage = creditLimitUsage
            return self
        }
        /// Setter method for creditLimitInterestRate property.
        public func set(creditLimitInterestRate: Double?) -> Self {
            self.creditLimitInterestRate = creditLimitInterestRate
            return self
        }
        /// Setter method for creditLimitExpiryDate property.
        public func set(creditLimitExpiryDate: Date?) -> Self {
            self.creditLimitExpiryDate = creditLimitExpiryDate
            return self
        }
        /// Setter method for startDate property.
        public func set(startDate: Date?) -> Self {
            self.startDate = startDate
            return self
        }
        /// Setter method for termUnit property.
        public func set(termUnit: TimeUnit?) -> Self {
            self.termUnit = termUnit
            return self
        }
        /// Setter method for termNumber property.
        public func set(termNumber: Double?) -> Self {
            self.termNumber = termNumber
            return self
        }
        /// Setter method for interestPaymentFrequencyUnit property.
        public func set(interestPaymentFrequencyUnit: TimeUnit?) -> Self {
            self.interestPaymentFrequencyUnit = interestPaymentFrequencyUnit
            return self
        }
        /// Setter method for interestPaymentFrequencyNumber property.
        public func set(interestPaymentFrequencyNumber: Double?) -> Self {
            self.interestPaymentFrequencyNumber = interestPaymentFrequencyNumber
            return self
        }
        /// Setter method for maturityDate property.
        public func set(maturityDate: Date?) -> Self {
            self.maturityDate = maturityDate
            return self
        }
        /// Setter method for maturityAmount property.
        public func set(maturityAmount: Double?) -> Self {
            self.maturityAmount = maturityAmount
            return self
        }
        /// Setter method for autoRenewalIndicator property.
        public func set(autoRenewalIndicator: Bool?) -> Self {
            self.autoRenewalIndicator = autoRenewalIndicator
            return self
        }
        /// Setter method for interestSettlementAccount property.
        public func set(interestSettlementAccount: String?) -> Self {
            self.interestSettlementAccount = interestSettlementAccount
            return self
        }
        /// Setter method for outstandingPrincipalAmount property.
        public func set(outstandingPrincipalAmount: Double?) -> Self {
            self.outstandingPrincipalAmount = outstandingPrincipalAmount
            return self
        }
        /// Setter method for monthlyInstalmentAmount property.
        public func set(monthlyInstalmentAmount: Double?) -> Self {
            self.monthlyInstalmentAmount = monthlyInstalmentAmount
            return self
        }
        /// Setter method for amountInArrear property.
        public func set(amountInArrear: Double?) -> Self {
            self.amountInArrear = amountInArrear
            return self
        }
        /// Setter method for minimumRequiredBalance property.
        public func set(minimumRequiredBalance: Double?) -> Self {
            self.minimumRequiredBalance = minimumRequiredBalance
            return self
        }
        /// Setter method for creditCardAccountNumber property.
        public func set(creditCardAccountNumber: String?) -> Self {
            self.creditCardAccountNumber = creditCardAccountNumber
            return self
        }
        /// Setter method for validThru property.
        public func set(validThru: Date?) -> Self {
            self.validThru = validThru
            return self
        }
        /// Setter method for applicableInterestRate property.
        public func set(applicableInterestRate: Double?) -> Self {
            self.applicableInterestRate = applicableInterestRate
            return self
        }
        /// Setter method for remainingCredit property.
        public func set(remainingCredit: Double?) -> Self {
            self.remainingCredit = remainingCredit
            return self
        }
        /// Setter method for outstandingPayment property.
        public func set(outstandingPayment: Double?) -> Self {
            self.outstandingPayment = outstandingPayment
            return self
        }
        /// Setter method for minimumPayment property.
        public func set(minimumPayment: Double?) -> Self {
            self.minimumPayment = minimumPayment
            return self
        }
        /// Setter method for minimumPaymentDueDate property.
        public func set(minimumPaymentDueDate: Date?) -> Self {
            self.minimumPaymentDueDate = minimumPaymentDueDate
            return self
        }
        /// Setter method for totalInvestmentValue property.
        public func set(totalInvestmentValue: Double?) -> Self {
            self.totalInvestmentValue = totalInvestmentValue
            return self
        }
        /// Setter method for accountHolderAddressLine1 property.
        public func set(accountHolderAddressLine1: String?) -> Self {
            self.accountHolderAddressLine1 = accountHolderAddressLine1
            return self
        }
        /// Setter method for accountHolderAddressLine2 property.
        public func set(accountHolderAddressLine2: String?) -> Self {
            self.accountHolderAddressLine2 = accountHolderAddressLine2
            return self
        }
        /// Setter method for accountHolderStreetName property.
        public func set(accountHolderStreetName: String?) -> Self {
            self.accountHolderStreetName = accountHolderStreetName
            return self
        }
        /// Setter method for town property.
        public func set(town: String?) -> Self {
            self.town = town
            return self
        }
        /// Setter method for postCode property.
        public func set(postCode: String?) -> Self {
            self.postCode = postCode
            return self
        }
        /// Setter method for countrySubDivision property.
        public func set(countrySubDivision: String?) -> Self {
            self.countrySubDivision = countrySubDivision
            return self
        }
        /// Setter method for accountHolderNames property.
        public func set(accountHolderNames: String?) -> Self {
            self.accountHolderNames = accountHolderNames
            return self
        }
        /// Setter method for accountHolderCountry property.
        public func set(accountHolderCountry: String?) -> Self {
            self.accountHolderCountry = accountHolderCountry
            return self
        }
        /// Setter method for creditAccount property.
        public func set(creditAccount: Bool?) -> Self {
            self.creditAccount = creditAccount
            return self
        }
        /// Setter method for debitAccount property.
        public func set(debitAccount: Bool?) -> Self {
            self.debitAccount = debitAccount
            return self
        }
        /// Setter method for lastUpdateDate property.
        public func set(lastUpdateDate: Date?) -> Self {
            self.lastUpdateDate = lastUpdateDate
            return self
        }
        /// Setter method for bankAlias property.
        public func set(bankAlias: String?) -> Self {
            self.bankAlias = bankAlias
            return self
        }
        /// Setter method for sourceId property.
        public func set(sourceId: String?) -> Self {
            self.sourceId = sourceId
            return self
        }
        /// Setter method for externalStateId property.
        public func set(externalStateId: String?) -> Self {
            self.externalStateId = externalStateId
            return self
        }
        /// Setter method for externalParentId property.
        public func set(externalParentId: String?) -> Self {
            self.externalParentId = externalParentId
            return self
        }
        /// Setter method for financialInstitutionId property.
        public func set(financialInstitutionId: Int64?) -> Self {
            self.financialInstitutionId = financialInstitutionId
            return self
        }
        /// Setter method for lastSyncDate property.
        public func set(lastSyncDate: Date?) -> Self {
            self.lastSyncDate = lastSyncDate
            return self
        }
        /// Setter method for credentialsExpired property.
        public func set(credentialsExpired: Bool?) -> Self {
            self.credentialsExpired = credentialsExpired
            return self
        }
        /// Setter method for externalAccountStatus property.
        public func set(externalAccountStatus: String?) -> Self {
            self.externalAccountStatus = externalAccountStatus
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AbstractArrangementItemBase DTO.
        public func build() -> AbstractArrangementItemBase {
            return AbstractArrangementItemBase(name: name, 
                    bookedBalance: bookedBalance, 
                    availableBalance: availableBalance, 
                    creditLimit: creditLimit, 
                    IBAN: IBAN, 
                    BBAN: BBAN, 
                    BIC: BIC, 
                    currency: currency, 
                    externalTransferAllowed: externalTransferAllowed, 
                    urgentTransferAllowed: urgentTransferAllowed, 
                    accruedInterest: accruedInterest, 
                    number: number, 
                    principalAmount: principalAmount, 
                    currentInvestmentValue: currentInvestmentValue, 
                    productNumber: productNumber, 
                    bankBranchCode: bankBranchCode, 
                    accountOpeningDate: accountOpeningDate, 
                    accountInterestRate: accountInterestRate, 
                    valueDateBalance: valueDateBalance, 
                    creditLimitUsage: creditLimitUsage, 
                    creditLimitInterestRate: creditLimitInterestRate, 
                    creditLimitExpiryDate: creditLimitExpiryDate, 
                    startDate: startDate, 
                    termUnit: termUnit, 
                    termNumber: termNumber, 
                    interestPaymentFrequencyUnit: interestPaymentFrequencyUnit, 
                    interestPaymentFrequencyNumber: interestPaymentFrequencyNumber, 
                    maturityDate: maturityDate, 
                    maturityAmount: maturityAmount, 
                    autoRenewalIndicator: autoRenewalIndicator, 
                    interestSettlementAccount: interestSettlementAccount, 
                    outstandingPrincipalAmount: outstandingPrincipalAmount, 
                    monthlyInstalmentAmount: monthlyInstalmentAmount, 
                    amountInArrear: amountInArrear, 
                    minimumRequiredBalance: minimumRequiredBalance, 
                    creditCardAccountNumber: creditCardAccountNumber, 
                    validThru: validThru, 
                    applicableInterestRate: applicableInterestRate, 
                    remainingCredit: remainingCredit, 
                    outstandingPayment: outstandingPayment, 
                    minimumPayment: minimumPayment, 
                    minimumPaymentDueDate: minimumPaymentDueDate, 
                    totalInvestmentValue: totalInvestmentValue, 
                    accountHolderAddressLine1: accountHolderAddressLine1, 
                    accountHolderAddressLine2: accountHolderAddressLine2, 
                    accountHolderStreetName: accountHolderStreetName, 
                    town: town, 
                    postCode: postCode, 
                    countrySubDivision: countrySubDivision, 
                    accountHolderNames: accountHolderNames, 
                    accountHolderCountry: accountHolderCountry, 
                    creditAccount: creditAccount, 
                    debitAccount: debitAccount, 
                    lastUpdateDate: lastUpdateDate, 
                    bankAlias: bankAlias, 
                    sourceId: sourceId, 
                    externalStateId: externalStateId, 
                    externalParentId: externalParentId, 
                    financialInstitutionId: financialInstitutionId, 
                    lastSyncDate: lastSyncDate, 
                    credentialsExpired: credentialsExpired, 
                    externalAccountStatus: externalAccountStatus, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.name == rhs.name &&
            lhs.bookedBalance == rhs.bookedBalance &&
            lhs.availableBalance == rhs.availableBalance &&
            lhs.creditLimit == rhs.creditLimit &&
            lhs.IBAN == rhs.IBAN &&
            lhs.BBAN == rhs.BBAN &&
            lhs.BIC == rhs.BIC &&
            lhs.currency == rhs.currency &&
            lhs.externalTransferAllowed == rhs.externalTransferAllowed &&
            lhs.urgentTransferAllowed == rhs.urgentTransferAllowed &&
            lhs.accruedInterest == rhs.accruedInterest &&
            lhs.number == rhs.number &&
            lhs.principalAmount == rhs.principalAmount &&
            lhs.currentInvestmentValue == rhs.currentInvestmentValue &&
            lhs.productNumber == rhs.productNumber &&
            lhs.bankBranchCode == rhs.bankBranchCode &&
            lhs.accountOpeningDate == rhs.accountOpeningDate &&
            lhs.accountInterestRate == rhs.accountInterestRate &&
            lhs.valueDateBalance == rhs.valueDateBalance &&
            lhs.creditLimitUsage == rhs.creditLimitUsage &&
            lhs.creditLimitInterestRate == rhs.creditLimitInterestRate &&
            lhs.creditLimitExpiryDate == rhs.creditLimitExpiryDate &&
            lhs.startDate == rhs.startDate &&
            lhs.termUnit == rhs.termUnit &&
            lhs.termNumber == rhs.termNumber &&
            lhs.interestPaymentFrequencyUnit == rhs.interestPaymentFrequencyUnit &&
            lhs.interestPaymentFrequencyNumber == rhs.interestPaymentFrequencyNumber &&
            lhs.maturityDate == rhs.maturityDate &&
            lhs.maturityAmount == rhs.maturityAmount &&
            lhs.autoRenewalIndicator == rhs.autoRenewalIndicator &&
            lhs.interestSettlementAccount == rhs.interestSettlementAccount &&
            lhs.outstandingPrincipalAmount == rhs.outstandingPrincipalAmount &&
            lhs.monthlyInstalmentAmount == rhs.monthlyInstalmentAmount &&
            lhs.amountInArrear == rhs.amountInArrear &&
            lhs.minimumRequiredBalance == rhs.minimumRequiredBalance &&
            lhs.creditCardAccountNumber == rhs.creditCardAccountNumber &&
            lhs.validThru == rhs.validThru &&
            lhs.applicableInterestRate == rhs.applicableInterestRate &&
            lhs.remainingCredit == rhs.remainingCredit &&
            lhs.outstandingPayment == rhs.outstandingPayment &&
            lhs.minimumPayment == rhs.minimumPayment &&
            lhs.minimumPaymentDueDate == rhs.minimumPaymentDueDate &&
            lhs.totalInvestmentValue == rhs.totalInvestmentValue &&
            lhs.accountHolderAddressLine1 == rhs.accountHolderAddressLine1 &&
            lhs.accountHolderAddressLine2 == rhs.accountHolderAddressLine2 &&
            lhs.accountHolderStreetName == rhs.accountHolderStreetName &&
            lhs.town == rhs.town &&
            lhs.postCode == rhs.postCode &&
            lhs.countrySubDivision == rhs.countrySubDivision &&
            lhs.accountHolderNames == rhs.accountHolderNames &&
            lhs.accountHolderCountry == rhs.accountHolderCountry &&
            lhs.creditAccount == rhs.creditAccount &&
            lhs.debitAccount == rhs.debitAccount &&
            lhs.lastUpdateDate == rhs.lastUpdateDate &&
            lhs.bankAlias == rhs.bankAlias &&
            lhs.sourceId == rhs.sourceId &&
            lhs.externalStateId == rhs.externalStateId &&
            lhs.externalParentId == rhs.externalParentId &&
            lhs.financialInstitutionId == rhs.financialInstitutionId &&
            lhs.lastSyncDate == rhs.lastSyncDate &&
            lhs.credentialsExpired == rhs.credentialsExpired &&
            lhs.externalAccountStatus == rhs.externalAccountStatus &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(bookedBalance, forKey: "bookedBalance")
        try container.encodeIfPresent(availableBalance, forKey: "availableBalance")
        try container.encodeIfPresent(creditLimit, forKey: "creditLimit")
        try container.encodeIfPresent(IBAN, forKey: "IBAN")
        try container.encodeIfPresent(BBAN, forKey: "BBAN")
        try container.encodeIfPresent(BIC, forKey: "BIC")
        try container.encode(currency, forKey: "currency")
        try container.encodeIfPresent(externalTransferAllowed, forKey: "externalTransferAllowed")
        try container.encodeIfPresent(urgentTransferAllowed, forKey: "urgentTransferAllowed")
        try container.encodeIfPresent(accruedInterest, forKey: "accruedInterest")
        try container.encodeIfPresent(number, forKey: "number")
        try container.encodeIfPresent(principalAmount, forKey: "principalAmount")
        try container.encodeIfPresent(currentInvestmentValue, forKey: "currentInvestmentValue")
        try container.encodeIfPresent(productNumber, forKey: "productNumber")
        try container.encodeIfPresent(bankBranchCode, forKey: "bankBranchCode")
        let accountOpeningDateStr: String?
        if let accountOpeningDate = accountOpeningDate {
            accountOpeningDateStr = CodableHelper.dateTimeFormatter.string(from: accountOpeningDate)
        } else {
            accountOpeningDateStr = nil
        }
        try container.encodeIfPresent(accountOpeningDateStr, forKey: "accountOpeningDate")
        try container.encodeIfPresent(accountInterestRate, forKey: "accountInterestRate")
        try container.encodeIfPresent(valueDateBalance, forKey: "valueDateBalance")
        try container.encodeIfPresent(creditLimitUsage, forKey: "creditLimitUsage")
        try container.encodeIfPresent(creditLimitInterestRate, forKey: "creditLimitInterestRate")
        let creditLimitExpiryDateStr: String?
        if let creditLimitExpiryDate = creditLimitExpiryDate {
            creditLimitExpiryDateStr = CodableHelper.dateTimeFormatter.string(from: creditLimitExpiryDate)
        } else {
            creditLimitExpiryDateStr = nil
        }
        try container.encodeIfPresent(creditLimitExpiryDateStr, forKey: "creditLimitExpiryDate")
        let startDateStr: String?
        if let startDate = startDate {
            startDateStr = CodableHelper.dateTimeFormatter.string(from: startDate)
        } else {
            startDateStr = nil
        }
        try container.encodeIfPresent(startDateStr, forKey: "startDate")
        try container.encodeIfPresent(termUnit, forKey: "termUnit")
        try container.encodeIfPresent(termNumber, forKey: "termNumber")
        try container.encodeIfPresent(interestPaymentFrequencyUnit, forKey: "interestPaymentFrequencyUnit")
        try container.encodeIfPresent(interestPaymentFrequencyNumber, forKey: "interestPaymentFrequencyNumber")
        let maturityDateStr: String?
        if let maturityDate = maturityDate {
            maturityDateStr = CodableHelper.dateTimeFormatter.string(from: maturityDate)
        } else {
            maturityDateStr = nil
        }
        try container.encodeIfPresent(maturityDateStr, forKey: "maturityDate")
        try container.encodeIfPresent(maturityAmount, forKey: "maturityAmount")
        try container.encodeIfPresent(autoRenewalIndicator, forKey: "autoRenewalIndicator")
        try container.encodeIfPresent(interestSettlementAccount, forKey: "interestSettlementAccount")
        try container.encodeIfPresent(outstandingPrincipalAmount, forKey: "outstandingPrincipalAmount")
        try container.encodeIfPresent(monthlyInstalmentAmount, forKey: "monthlyInstalmentAmount")
        try container.encodeIfPresent(amountInArrear, forKey: "amountInArrear")
        try container.encodeIfPresent(minimumRequiredBalance, forKey: "minimumRequiredBalance")
        try container.encodeIfPresent(creditCardAccountNumber, forKey: "creditCardAccountNumber")
        let validThruStr: String?
        if let validThru = validThru {
            validThruStr = CodableHelper.dateTimeFormatter.string(from: validThru)
        } else {
            validThruStr = nil
        }
        try container.encodeIfPresent(validThruStr, forKey: "validThru")
        try container.encodeIfPresent(applicableInterestRate, forKey: "applicableInterestRate")
        try container.encodeIfPresent(remainingCredit, forKey: "remainingCredit")
        try container.encodeIfPresent(outstandingPayment, forKey: "outstandingPayment")
        try container.encodeIfPresent(minimumPayment, forKey: "minimumPayment")
        let minimumPaymentDueDateStr: String?
        if let minimumPaymentDueDate = minimumPaymentDueDate {
            minimumPaymentDueDateStr = CodableHelper.dateTimeFormatter.string(from: minimumPaymentDueDate)
        } else {
            minimumPaymentDueDateStr = nil
        }
        try container.encodeIfPresent(minimumPaymentDueDateStr, forKey: "minimumPaymentDueDate")
        try container.encodeIfPresent(totalInvestmentValue, forKey: "totalInvestmentValue")
        try container.encodeIfPresent(accountHolderAddressLine1, forKey: "accountHolderAddressLine1")
        try container.encodeIfPresent(accountHolderAddressLine2, forKey: "accountHolderAddressLine2")
        try container.encodeIfPresent(accountHolderStreetName, forKey: "accountHolderStreetName")
        try container.encodeIfPresent(town, forKey: "town")
        try container.encodeIfPresent(postCode, forKey: "postCode")
        try container.encodeIfPresent(countrySubDivision, forKey: "countrySubDivision")
        try container.encodeIfPresent(accountHolderNames, forKey: "accountHolderNames")
        try container.encodeIfPresent(accountHolderCountry, forKey: "accountHolderCountry")
        try container.encodeIfPresent(creditAccount, forKey: "creditAccount")
        try container.encodeIfPresent(debitAccount, forKey: "debitAccount")
        let lastUpdateDateStr: String?
        if let lastUpdateDate = lastUpdateDate {
            lastUpdateDateStr = CodableHelper.dateTimeFormatter.string(from: lastUpdateDate)
        } else {
            lastUpdateDateStr = nil
        }
        try container.encodeIfPresent(lastUpdateDateStr, forKey: "lastUpdateDate")
        try container.encodeIfPresent(bankAlias, forKey: "bankAlias")
        try container.encodeIfPresent(sourceId, forKey: "sourceId")
        try container.encodeIfPresent(externalStateId, forKey: "externalStateId")
        try container.encodeIfPresent(externalParentId, forKey: "externalParentId")
        try container.encodeIfPresent(financialInstitutionId, forKey: "financialInstitutionId")
        let lastSyncDateStr: String?
        if let lastSyncDate = lastSyncDate {
            lastSyncDateStr = CodableHelper.dateTimeFormatter.string(from: lastSyncDate)
        } else {
            lastSyncDateStr = nil
        }
        try container.encodeIfPresent(lastSyncDateStr, forKey: "lastSyncDate")
        try container.encodeIfPresent(credentialsExpired, forKey: "credentialsExpired")
        try container.encodeIfPresent(externalAccountStatus, forKey: "externalAccountStatus")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        name = try container.decodeIfPresent(String.self, forKey: "name")
        bookedBalance = try container.decodeIfPresent(Double.self, forKey: "bookedBalance")
        availableBalance = try container.decodeIfPresent(Double.self, forKey: "availableBalance")
        creditLimit = try container.decodeIfPresent(Double.self, forKey: "creditLimit")
        IBAN = try container.decodeIfPresent(String.self, forKey: "IBAN")
        BBAN = try container.decodeIfPresent(String.self, forKey: "BBAN")
        BIC = try container.decodeIfPresent(String.self, forKey: "BIC")
        currency = try container.decode(String.self, forKey: "currency")
        externalTransferAllowed = try container.decodeIfPresent(Bool.self, forKey: "externalTransferAllowed")
        urgentTransferAllowed = try container.decodeIfPresent(Bool.self, forKey: "urgentTransferAllowed")
        accruedInterest = try container.decodeIfPresent(Double.self, forKey: "accruedInterest")
        number = try container.decodeIfPresent(String.self, forKey: "number")
        principalAmount = try container.decodeIfPresent(Double.self, forKey: "principalAmount")
        currentInvestmentValue = try container.decodeIfPresent(Double.self, forKey: "currentInvestmentValue")
        productNumber = try container.decodeIfPresent(String.self, forKey: "productNumber")
        bankBranchCode = try container.decodeIfPresent(String.self, forKey: "bankBranchCode")
        accountOpeningDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "accountOpeningDate")
        accountInterestRate = try container.decodeIfPresent(Double.self, forKey: "accountInterestRate")
        valueDateBalance = try container.decodeIfPresent(Double.self, forKey: "valueDateBalance")
        creditLimitUsage = try container.decodeIfPresent(Double.self, forKey: "creditLimitUsage")
        creditLimitInterestRate = try container.decodeIfPresent(Double.self, forKey: "creditLimitInterestRate")
        creditLimitExpiryDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "creditLimitExpiryDate")
        startDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "startDate")
        termUnit = try container.decodeIfPresent(TimeUnit.self, forKey: "termUnit")
        termNumber = try container.decodeIfPresent(Double.self, forKey: "termNumber")
        interestPaymentFrequencyUnit = try container.decodeIfPresent(TimeUnit.self, forKey: "interestPaymentFrequencyUnit")
        interestPaymentFrequencyNumber = try container.decodeIfPresent(Double.self, forKey: "interestPaymentFrequencyNumber")
        maturityDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "maturityDate")
        maturityAmount = try container.decodeIfPresent(Double.self, forKey: "maturityAmount")
        autoRenewalIndicator = try container.decodeIfPresent(Bool.self, forKey: "autoRenewalIndicator")
        interestSettlementAccount = try container.decodeIfPresent(String.self, forKey: "interestSettlementAccount")
        outstandingPrincipalAmount = try container.decodeIfPresent(Double.self, forKey: "outstandingPrincipalAmount")
        monthlyInstalmentAmount = try container.decodeIfPresent(Double.self, forKey: "monthlyInstalmentAmount")
        amountInArrear = try container.decodeIfPresent(Double.self, forKey: "amountInArrear")
        minimumRequiredBalance = try container.decodeIfPresent(Double.self, forKey: "minimumRequiredBalance")
        creditCardAccountNumber = try container.decodeIfPresent(String.self, forKey: "creditCardAccountNumber")
        validThru = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "validThru")
        applicableInterestRate = try container.decodeIfPresent(Double.self, forKey: "applicableInterestRate")
        remainingCredit = try container.decodeIfPresent(Double.self, forKey: "remainingCredit")
        outstandingPayment = try container.decodeIfPresent(Double.self, forKey: "outstandingPayment")
        minimumPayment = try container.decodeIfPresent(Double.self, forKey: "minimumPayment")
        minimumPaymentDueDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "minimumPaymentDueDate")
        totalInvestmentValue = try container.decodeIfPresent(Double.self, forKey: "totalInvestmentValue")
        accountHolderAddressLine1 = try container.decodeIfPresent(String.self, forKey: "accountHolderAddressLine1")
        accountHolderAddressLine2 = try container.decodeIfPresent(String.self, forKey: "accountHolderAddressLine2")
        accountHolderStreetName = try container.decodeIfPresent(String.self, forKey: "accountHolderStreetName")
        town = try container.decodeIfPresent(String.self, forKey: "town")
        postCode = try container.decodeIfPresent(String.self, forKey: "postCode")
        countrySubDivision = try container.decodeIfPresent(String.self, forKey: "countrySubDivision")
        accountHolderNames = try container.decodeIfPresent(String.self, forKey: "accountHolderNames")
        accountHolderCountry = try container.decodeIfPresent(String.self, forKey: "accountHolderCountry")
        creditAccount = try container.decodeIfPresent(Bool.self, forKey: "creditAccount")
        debitAccount = try container.decodeIfPresent(Bool.self, forKey: "debitAccount")
        lastUpdateDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "lastUpdateDate")
        bankAlias = try container.decodeIfPresent(String.self, forKey: "bankAlias")
        sourceId = try container.decodeIfPresent(String.self, forKey: "sourceId")
        externalStateId = try container.decodeIfPresent(String.self, forKey: "externalStateId")
        externalParentId = try container.decodeIfPresent(String.self, forKey: "externalParentId")
        financialInstitutionId = try container.decodeIfPresent(Int64.self, forKey: "financialInstitutionId")
        lastSyncDate = try CodableHelper.decodeDateTimeIfPresent(from: container, forKey: "lastSyncDate")
        credentialsExpired = try container.decodeIfPresent(Bool.self, forKey: "credentialsExpired")
        externalAccountStatus = try container.decodeIfPresent(String.self, forKey: "externalAccountStatus")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AbstractArrangementItemBase, rhs: AbstractArrangementItemBase) -> Bool {
        return lhs.name == rhs.name &&
        lhs.bookedBalance == rhs.bookedBalance &&
        lhs.availableBalance == rhs.availableBalance &&
        lhs.creditLimit == rhs.creditLimit &&
        lhs.IBAN == rhs.IBAN &&
        lhs.BBAN == rhs.BBAN &&
        lhs.BIC == rhs.BIC &&
        lhs.currency == rhs.currency &&
        lhs.externalTransferAllowed == rhs.externalTransferAllowed &&
        lhs.urgentTransferAllowed == rhs.urgentTransferAllowed &&
        lhs.accruedInterest == rhs.accruedInterest &&
        lhs.number == rhs.number &&
        lhs.principalAmount == rhs.principalAmount &&
        lhs.currentInvestmentValue == rhs.currentInvestmentValue &&
        lhs.productNumber == rhs.productNumber &&
        lhs.bankBranchCode == rhs.bankBranchCode &&
        lhs.accountOpeningDate == rhs.accountOpeningDate &&
        lhs.accountInterestRate == rhs.accountInterestRate &&
        lhs.valueDateBalance == rhs.valueDateBalance &&
        lhs.creditLimitUsage == rhs.creditLimitUsage &&
        lhs.creditLimitInterestRate == rhs.creditLimitInterestRate &&
        lhs.creditLimitExpiryDate == rhs.creditLimitExpiryDate &&
        lhs.startDate == rhs.startDate &&
        lhs.termUnit == rhs.termUnit &&
        lhs.termNumber == rhs.termNumber &&
        lhs.interestPaymentFrequencyUnit == rhs.interestPaymentFrequencyUnit &&
        lhs.interestPaymentFrequencyNumber == rhs.interestPaymentFrequencyNumber &&
        lhs.maturityDate == rhs.maturityDate &&
        lhs.maturityAmount == rhs.maturityAmount &&
        lhs.autoRenewalIndicator == rhs.autoRenewalIndicator &&
        lhs.interestSettlementAccount == rhs.interestSettlementAccount &&
        lhs.outstandingPrincipalAmount == rhs.outstandingPrincipalAmount &&
        lhs.monthlyInstalmentAmount == rhs.monthlyInstalmentAmount &&
        lhs.amountInArrear == rhs.amountInArrear &&
        lhs.minimumRequiredBalance == rhs.minimumRequiredBalance &&
        lhs.creditCardAccountNumber == rhs.creditCardAccountNumber &&
        lhs.validThru == rhs.validThru &&
        lhs.applicableInterestRate == rhs.applicableInterestRate &&
        lhs.remainingCredit == rhs.remainingCredit &&
        lhs.outstandingPayment == rhs.outstandingPayment &&
        lhs.minimumPayment == rhs.minimumPayment &&
        lhs.minimumPaymentDueDate == rhs.minimumPaymentDueDate &&
        lhs.totalInvestmentValue == rhs.totalInvestmentValue &&
        lhs.accountHolderAddressLine1 == rhs.accountHolderAddressLine1 &&
        lhs.accountHolderAddressLine2 == rhs.accountHolderAddressLine2 &&
        lhs.accountHolderStreetName == rhs.accountHolderStreetName &&
        lhs.town == rhs.town &&
        lhs.postCode == rhs.postCode &&
        lhs.countrySubDivision == rhs.countrySubDivision &&
        lhs.accountHolderNames == rhs.accountHolderNames &&
        lhs.accountHolderCountry == rhs.accountHolderCountry &&
        lhs.creditAccount == rhs.creditAccount &&
        lhs.debitAccount == rhs.debitAccount &&
        lhs.lastUpdateDate == rhs.lastUpdateDate &&
        lhs.bankAlias == rhs.bankAlias &&
        lhs.sourceId == rhs.sourceId &&
        lhs.externalStateId == rhs.externalStateId &&
        lhs.externalParentId == rhs.externalParentId &&
        lhs.financialInstitutionId == rhs.financialInstitutionId &&
        lhs.lastSyncDate == rhs.lastSyncDate &&
        lhs.credentialsExpired == rhs.credentialsExpired &&
        lhs.externalAccountStatus == rhs.externalAccountStatus &&
        lhs.additions == rhs.additions
    }


}
