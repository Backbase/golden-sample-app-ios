//
// ErrorItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ErrorItem: Codable, Equatable {
    /** Any further information. */
    public var message: String?
    /** {capability-name}.api.{api-key-name}. For generated validation errors this is the path in the document the error resolves to. e.g. object name + &#39;.&#39; + field */
    public var key: String?
    /** Context can be anything used to construct localised messages. */
    public var context: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ErrorItem.Builder class.")
    public init(message: String? = nil, key: String? = nil, context: [String: String]? = nil) {
        self.message = message
        self.key = key
        self.context = context
    }

    /// Builder class for ErrorItem DTO.
    public final class Builder: Equatable {
        /** Any further information. */
        public private(set) var message: String?
        /** {capability-name}.api.{api-key-name}. For generated validation errors this is the path in the document the error resolves to. e.g. object name + &#39;.&#39; + field */
        public private(set) var key: String?
        /** Context can be anything used to construct localised messages. */
        public private(set) var context: [String: String]?

        public init() {
        }

        /// Setter method for message property.
        public func set(message: String?) -> Self {
            self.message = message
            return self
        }
        /// Setter method for key property.
        public func set(key: String?) -> Self {
            self.key = key
            return self
        }
        /// Setter method for context property.
        public func set(context: [String: String]?) -> Self {
            self.context = context
            return self
        }

        /// Builder initializer method for ErrorItem DTO.
        public func build() -> ErrorItem {
            return ErrorItem(message: message, 
                    key: key, 
                    context: context)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.message == rhs.message &&
            lhs.key == rhs.key &&
            lhs.context == rhs.context
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(key, forKey: "key")
        try container.encodeIfPresent(context, forKey: "context")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        message = try container.decodeIfPresent(String.self, forKey: "message")
        key = try container.decodeIfPresent(String.self, forKey: "key")
        context = try container.decodeIfPresent([String: String].self, forKey: "context")
    }

    public static func ==(lhs: ErrorItem, rhs: ErrorItem) -> Bool {
        return lhs.message == rhs.message &&
        lhs.key == rhs.key &&
        lhs.context == rhs.context
    }


}
