//
// AdditionalProperties.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2

/** Additional Properties */
public struct AdditionalProperties: Codable, Equatable {
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of AdditionalProperties.Builder class.")
    public init(additions: [String: String]? = nil) {
        self.additions = additions
    }

    /// Builder class for AdditionalProperties DTO.
    public final class Builder: Equatable {
        public private(set) var additions: [String: String]?

        public init() {
        }

        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for AdditionalProperties DTO.
        public func build() -> AdditionalProperties {
            return AdditionalProperties(additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: AdditionalProperties, rhs: AdditionalProperties) -> Bool {
        return lhs.additions == rhs.additions
    }


}
