//
// ProductSummary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct ProductSummary: Codable, Equatable {
    public var aggregatedBalance: SummaryAggregatedBalance?
    public var currentAccounts: CurrentAccountProductKinds?
    public var savingsAccounts: SavingsAccountProductKinds?
    public var termDeposits: TermDepositProductKinds?
    public var loans: LoanProductKinds?
    public var creditCards: CreditCardProductKinds?
    public var debitCards: DebitCardProductKinds?
    public var investmentAccounts: InvestmentAccountProductKinds?
    public var customProductKinds: [CustomProductKind]
    public var additions: [String: String]?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ProductSummary.Builder class.")
    public init(aggregatedBalance: SummaryAggregatedBalance? = nil, currentAccounts: CurrentAccountProductKinds? = nil, savingsAccounts: SavingsAccountProductKinds? = nil, termDeposits: TermDepositProductKinds? = nil, loans: LoanProductKinds? = nil, creditCards: CreditCardProductKinds? = nil, debitCards: DebitCardProductKinds? = nil, investmentAccounts: InvestmentAccountProductKinds? = nil, customProductKinds: [CustomProductKind], additions: [String: String]? = nil) {
        self.aggregatedBalance = aggregatedBalance
        self.currentAccounts = currentAccounts
        self.savingsAccounts = savingsAccounts
        self.termDeposits = termDeposits
        self.loans = loans
        self.creditCards = creditCards
        self.debitCards = debitCards
        self.investmentAccounts = investmentAccounts
        self.customProductKinds = customProductKinds
        self.additions = additions
    }

    /// Builder class for ProductSummary DTO.
    public final class Builder: Equatable {
        public private(set) var aggregatedBalance: SummaryAggregatedBalance?
        public private(set) var currentAccounts: CurrentAccountProductKinds?
        public private(set) var savingsAccounts: SavingsAccountProductKinds?
        public private(set) var termDeposits: TermDepositProductKinds?
        public private(set) var loans: LoanProductKinds?
        public private(set) var creditCards: CreditCardProductKinds?
        public private(set) var debitCards: DebitCardProductKinds?
        public private(set) var investmentAccounts: InvestmentAccountProductKinds?
        public let customProductKinds: [CustomProductKind]
        public private(set) var additions: [String: String]?

        public init(customProductKinds: [CustomProductKind]) {
            self.customProductKinds = customProductKinds
        }

        /// Setter method for aggregatedBalance property.
        public func set(aggregatedBalance: SummaryAggregatedBalance?) -> Self {
            self.aggregatedBalance = aggregatedBalance
            return self
        }
        /// Setter method for currentAccounts property.
        public func set(currentAccounts: CurrentAccountProductKinds?) -> Self {
            self.currentAccounts = currentAccounts
            return self
        }
        /// Setter method for savingsAccounts property.
        public func set(savingsAccounts: SavingsAccountProductKinds?) -> Self {
            self.savingsAccounts = savingsAccounts
            return self
        }
        /// Setter method for termDeposits property.
        public func set(termDeposits: TermDepositProductKinds?) -> Self {
            self.termDeposits = termDeposits
            return self
        }
        /// Setter method for loans property.
        public func set(loans: LoanProductKinds?) -> Self {
            self.loans = loans
            return self
        }
        /// Setter method for creditCards property.
        public func set(creditCards: CreditCardProductKinds?) -> Self {
            self.creditCards = creditCards
            return self
        }
        /// Setter method for debitCards property.
        public func set(debitCards: DebitCardProductKinds?) -> Self {
            self.debitCards = debitCards
            return self
        }
        /// Setter method for investmentAccounts property.
        public func set(investmentAccounts: InvestmentAccountProductKinds?) -> Self {
            self.investmentAccounts = investmentAccounts
            return self
        }
        /// Setter method for additions property.
        public func set(additions: [String: String]?) -> Self {
            self.additions = additions
            return self
        }

        /// Builder initializer method for ProductSummary DTO.
        public func build() -> ProductSummary {
            return ProductSummary(aggregatedBalance: aggregatedBalance, 
                    currentAccounts: currentAccounts, 
                    savingsAccounts: savingsAccounts, 
                    termDeposits: termDeposits, 
                    loans: loans, 
                    creditCards: creditCards, 
                    debitCards: debitCards, 
                    investmentAccounts: investmentAccounts, 
                    customProductKinds: customProductKinds, 
                    additions: additions)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.aggregatedBalance == rhs.aggregatedBalance &&
            lhs.currentAccounts == rhs.currentAccounts &&
            lhs.savingsAccounts == rhs.savingsAccounts &&
            lhs.termDeposits == rhs.termDeposits &&
            lhs.loans == rhs.loans &&
            lhs.creditCards == rhs.creditCards &&
            lhs.debitCards == rhs.debitCards &&
            lhs.investmentAccounts == rhs.investmentAccounts &&
            lhs.customProductKinds == rhs.customProductKinds &&
            lhs.additions == rhs.additions
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(aggregatedBalance, forKey: "aggregatedBalance")
        try container.encodeIfPresent(currentAccounts, forKey: "currentAccounts")
        try container.encodeIfPresent(savingsAccounts, forKey: "savingsAccounts")
        try container.encodeIfPresent(termDeposits, forKey: "termDeposits")
        try container.encodeIfPresent(loans, forKey: "loans")
        try container.encodeIfPresent(creditCards, forKey: "creditCards")
        try container.encodeIfPresent(debitCards, forKey: "debitCards")
        try container.encodeIfPresent(investmentAccounts, forKey: "investmentAccounts")
        try container.encode(customProductKinds, forKey: "customProductKinds")
        try container.encodeIfPresent(additions, forKey: "additions")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        aggregatedBalance = try container.decodeIfPresent(SummaryAggregatedBalance.self, forKey: "aggregatedBalance")
        currentAccounts = try container.decodeIfPresent(CurrentAccountProductKinds.self, forKey: "currentAccounts")
        savingsAccounts = try container.decodeIfPresent(SavingsAccountProductKinds.self, forKey: "savingsAccounts")
        termDeposits = try container.decodeIfPresent(TermDepositProductKinds.self, forKey: "termDeposits")
        loans = try container.decodeIfPresent(LoanProductKinds.self, forKey: "loans")
        creditCards = try container.decodeIfPresent(CreditCardProductKinds.self, forKey: "creditCards")
        debitCards = try container.decodeIfPresent(DebitCardProductKinds.self, forKey: "debitCards")
        investmentAccounts = try container.decodeIfPresent(InvestmentAccountProductKinds.self, forKey: "investmentAccounts")
        customProductKinds = try container.decode([CustomProductKind].self, forKey: "customProductKinds")
        additions = try container.decodeIfPresent([String: String].self, forKey: "additions")
    }

    public static func ==(lhs: ProductSummary, rhs: ProductSummary) -> Bool {
        return lhs.aggregatedBalance == rhs.aggregatedBalance &&
        lhs.currentAccounts == rhs.currentAccounts &&
        lhs.savingsAccounts == rhs.savingsAccounts &&
        lhs.termDeposits == rhs.termDeposits &&
        lhs.loans == rhs.loans &&
        lhs.creditCards == rhs.creditCards &&
        lhs.debitCards == rhs.debitCards &&
        lhs.investmentAccounts == rhs.investmentAccounts &&
        lhs.customProductKinds == rhs.customProductKinds &&
        lhs.additions == rhs.additions
    }


}
