//
// BalanceHistoryItemValue.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import ClientCommonGen2


public struct BalanceHistoryItemValue: Codable, Equatable {
    /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
    public var currency: String?
    public var balance: String?

    @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of BalanceHistoryItemValue.Builder class.")
    public init(currency: String? = nil, balance: String? = nil) {
        self.currency = currency
        self.balance = balance
    }

    /// Builder class for BalanceHistoryItemValue DTO.
    public final class Builder: Equatable {
        /** The alpha-3 code (complying with ISO 4217) of the currency that qualifies the amount. */
        public private(set) var currency: String?
        public private(set) var balance: String?

        public init() {
        }

        /// Setter method for currency property.
        public func set(currency: String?) -> Self {
            self.currency = currency
            return self
        }
        /// Setter method for balance property.
        public func set(balance: String?) -> Self {
            self.balance = balance
            return self
        }

        /// Builder initializer method for BalanceHistoryItemValue DTO.
        public func build() -> BalanceHistoryItemValue {
            return BalanceHistoryItemValue(currency: currency, 
                    balance: balance)
        }

        public static func ==(lhs: Builder, rhs: Builder) -> Bool {
            return lhs.currency == rhs.currency &&
            lhs.balance == rhs.balance
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: String.self)
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(balance, forKey: "balance")
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)
        currency = try container.decodeIfPresent(String.self, forKey: "currency")
        balance = try container.decodeIfPresent(String.self, forKey: "balance")
    }

    public static func ==(lhs: BalanceHistoryItemValue, rhs: BalanceHistoryItemValue) -> Bool {
        return lhs.currency == rhs.currency &&
        lhs.balance == rhs.balance
    }


}
