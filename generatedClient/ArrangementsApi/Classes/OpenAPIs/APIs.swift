// APIs.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Backbase
import ClientCommonGen2

open class ArrangementsClient: NSObject, DBSClient {
    public var dataProvider: DBSDataProvider?
    public var baseURL: URL
    public static var customHeaders: [String:String] = [:]
    public static var apiResponseQueue: DispatchQueue = .main

    public init(dataProvider: DBSDataProvider, baseURL: URL) {
        self.dataProvider = dataProvider
        self.baseURL = baseURL
    }
}

open class RequestBuilder<T> {
    var headers: [String:String]
    public let parameters: [String:Any]?
    public let isBody: Bool
    public let method: String
    public let requestUrl: URL

    /// Optional block to obtain a reference to the request's progress instance when available.
    public var onProgressReady: ((Progress) -> ())?

    required public init(method: String, requestUrl: URL, parameters: [String:Any]?, isBody: Bool, headers: [String:String] = [:]) {
        self.method = method
        self.requestUrl = requestUrl
        self.parameters = parameters
        self.isBody = isBody
        self.headers = headers

        addHeaders(ArrangementsClient.customHeaders)
        addHeaders(Backbase.authClient().tokens())
    }

    open func addHeaders(_ aHeaders:[String:String]) {
        for (header, value) in aHeaders {
            headers[header] = value
        }
    }

    open func execute(_ apiResponseQueue: DispatchQueue = ArrangementsClient.apiResponseQueue, _ completion: @escaping (_ result: Result<Response<T>, Error>) -> Void) { }

    public func addHeader(name: String, value: String) -> Self {
        if !value.isEmpty {
            headers[name] = value
        }
        return self
    }
}

public protocol RequestBuilderFactory {
    func getNonDecodableBuilder<T>() -> RequestBuilder<T>.Type
    func getBuilder<T:Decodable>() -> RequestBuilder<T>.Type
}